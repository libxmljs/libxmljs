
    /**
     * This file was auto-generated by swig2ts.js
     */

    import { StructuredErrorCallback, GenericErrorCallback, FROM_BUFFER_ASYNC_TYPE } from "../types";
    
    
    type attributeDeclSAXFunc = {}
    type attributeSAXFunc = {}
    type cdataBlockSAXFunc = {}
    type charactersSAXFunc = {}
    type commentSAXFunc = {}
    type elementDeclSAXFunc = {}
    type endDocumentSAXFunc = {}
    type endElementNsSAX2Func = {}
    type endElementSAXFunc = {}
    type entityDeclSAXFunc = {}
    type errorSAXFunc = {}
    type externalSubsetSAXFunc = {}
    type fatalErrorSAXFunc = {}
    type getEntitySAXFunc = {}
    type getParameterEntitySAXFunc = {}
    type hasExternalSubsetSAXFunc = {}
    type hasInternalSubsetSAXFunc = {}
    export type htmlDocPtr = xmlDocPtr & {}
    type htmlElemDesc = {}
    export type htmlElemDescPtr = {
                name: string,   // q(const).char
                startTag: string,   // char
                endTag: string,   // char
                saveEndTag: string,   // char
                empty: string,   // char
                depr: string,   // char
                dtd: string,   // char
                isinline: string,   // char
                desc: string,   // q(const).char
                subelts: string,   // q(const).char
                defaultsubelt: string,   // q(const).char
                attrs_opt: string,   // q(const).char
                attrs_depr: string,   // q(const).char
                attrs_req: string,   // q(const).char

getCPtr: {
                (): number,
            }}
    type htmlEntityDesc = {}
    export type htmlEntityDescPtr = {
                value: number,   // unsigned int
                name: string,   // q(const).char
                desc: string,   // q(const).char

getCPtr: {
                (): number,
            }}
    export type htmlNodePtr = {}
    type htmlParserCtxt = {}
    export type htmlParserCtxtPtr = {}
    type htmlParserInput = {}
    export type htmlParserInputPtr = {}
    type htmlParserNodeInfo = {}
    type htmlParserOption = {}
    type htmlSAXHandler = {}
    export type htmlSAXHandlerPtr = {}
    type htmlStatus = {}
    type ignorableWhitespaceSAXFunc = {}
    type internalSubsetSAXFunc = {}
    type isStandaloneSAXFunc = {}
    type notationDeclSAXFunc = {}
    type processingInstructionSAXFunc = {}
    type referenceSAXFunc = {}
    type resolveEntitySAXFunc = {}
    type setDocumentLocatorSAXFunc = {}
    type startDocumentSAXFunc = {}
    type startElementNsSAX2Func = {}
    type startElementSAXFunc = {}
    type unparsedEntityDeclSAXFunc = {}
    type warningSAXFunc = {}
    type xlinkActuate = {}
    type xlinkExtendedLinkFunk = {}
    type xlinkExtendedLinkSetFunk = {}
    type xlinkHRef = {}
    type xlinkHandler = {}
    export type xlinkHandlerPtr = {
                simple: xlinkSimpleLinkFunk,   // xlinkSimpleLinkFunk
                extended: xlinkExtendedLinkFunk,   // xlinkExtendedLinkFunk
                set: xlinkExtendedLinkSetFunk,   // xlinkExtendedLinkSetFunk

getCPtr: {
                (): number,
            }}
    type xlinkNodeDetectFunc = {}
    type xlinkRole = {}
    type xlinkShow = {}
    type xlinkSimpleLinkFunk = {}
    type xlinkTitle = {}
    type xlinkType = {}
    type xmlAttr = {}
    export type xmlAttrPtr = {
                _private: any,   // void
                type: xmlElementType,   // xmlElementType
                name: string,   // q(const).xmlChar
                children: xmlNodePtr | null,   // struct _xmlNode
                last: xmlNodePtr | null,   // struct _xmlNode
                parent: xmlNodePtr | null,   // struct _xmlNode
                next: xmlAttrPtr | null,   // struct _xmlAttr
                prev: xmlAttrPtr | null,   // struct _xmlAttr
                doc: xmlDocPtr | null,   // struct _xmlDoc
                ns: xmlNsPtr | null,   // xmlNs
                atype: xmlAttributeType,   // xmlAttributeType
                psvi: any,   // void

getCPtr: {
                (): number,
            }}
    type xmlAttribute = {}
    type xmlAttributeDefault = {}
    export type xmlAttributePtr = {
                _private: any,   // void
                type: xmlElementType,   // xmlElementType
                name: string,   // q(const).xmlChar
                children: xmlNodePtr | null,   // _xmlNode
                last: xmlNodePtr | null,   // _xmlNode
                parent: xmlDtdPtr | null,   // _xmlDtd
                next: xmlNodePtr | null,   // _xmlNode
                prev: xmlNodePtr | null,   // _xmlNode
                doc: xmlDocPtr | null,   // _xmlDoc
                nexth: xmlAttributePtr,   // _xmlAttribute
                atype: xmlAttributeType,   // xmlAttributeType
                def: xmlAttributeDefault,   // xmlAttributeDefault
                defaultValue: string,   // q(const).xmlChar
                tree: xmlEnumerationPtr,   // xmlEnumerationPtr
                prefix: string,   // q(const).xmlChar
                elem: string,   // q(const).xmlChar

getCPtr: {
                (): number,
            }}
    type xmlAttributeTable = {}
    export type xmlAttributeTablePtr = {}
    type xmlAttributeType = {}
    type xmlAutomata = {}
    export type xmlAutomataPtr = {}
    type xmlAutomataState = {}
    export type xmlAutomataStatePtr = {}
    type xmlBuf = {}
    export type xmlBufPtr = {}
    type xmlBuffer = {}
    type xmlBufferAllocationScheme = {}
    export type xmlBufferPtr = {
                content: string,   // xmlChar
                use: number,   // unsigned int
                size: number,   // unsigned int
                alloc: xmlBufferAllocationScheme,   // xmlBufferAllocationScheme
                contentIO: string,   // xmlChar

getCPtr: {
                (): number,
            }}
    type xmlCatalog = {}
    type xmlCatalogAllow = {}
    type xmlCatalogPrefer = {}
    export type xmlCatalogPtr = {}
    type xmlChLRange = {}
    export type xmlChLRangePtr = {
                low: number,   // unsigned int
                high: number,   // unsigned int

getCPtr: {
                (): number,
            }}
    type xmlChRangeGroup = {}
    export type xmlChRangeGroupPtr = {
                nbShortRange: number,   // int
                nbLongRange: number,   // int
                shortRange: xmlChSRange,   // q(const).xmlChSRange
                longRange: xmlChLRange,   // q(const).xmlChLRange

getCPtr: {
                (): number,
            }}
    type xmlChSRange = {}
    export type xmlChSRangePtr = {
                low: number,   // unsigned short
                high: number,   // unsigned short

getCPtr: {
                (): number,
            }}
    type xmlChar = {}
    type xmlCharEncoding = {}
    type xmlCharEncodingHandler = {}
    export type xmlCharEncodingHandlerPtr = {
                name: string,   // char
                input: xmlCharEncodingInputFunc,   // xmlCharEncodingInputFunc
                output: xmlCharEncodingOutputFunc,   // xmlCharEncodingOutputFunc

getCPtr: {
                (): number,
            }}
    type xmlCharEncodingInputFunc = {}
    type xmlCharEncodingOutputFunc = {}
    type xmlDOMWrapAcquireNsFunction = {}
    type xmlDOMWrapCtxt = {}
    export type xmlDOMWrapCtxtPtr = {
                _private: any,   // void
                type: number,   // int
                namespaceMap: any,   // void
                getNsForNodeFunc: xmlDOMWrapAcquireNsFunction,   // xmlDOMWrapAcquireNsFunction

getCPtr: {
                (): number,
            }}
    type xmlDeregisterNodeFunc = {}
    type xmlDict = {}
    export type xmlDictPtr = {}
    type xmlDoc = {}
    type xmlDocProperties = {}
    export type xmlDocPtr = {
                _private: any,   // void
                type: xmlElementType,   // xmlElementType
                name: string,   // char
                children: xmlNodePtr | null,   // struct _xmlNode
                last: xmlNodePtr | null,   // struct _xmlNode
                parent: xmlNodePtr | null,   // struct _xmlNode
                next: xmlNodePtr | null,   // struct _xmlNode
                prev: xmlNodePtr | null,   // struct _xmlNode
                doc: xmlDocPtr | null,   // struct _xmlDoc
                compression: number,   // int
                standalone: number,   // int
                intSubset: xmlDtdPtr | null,   // struct _xmlDtd
                extSubset: xmlDtdPtr | null,   // struct _xmlDtd
                oldNs: xmlNsPtr | null,   // struct _xmlNs
                version: string,   // q(const).xmlChar
                encoding: string,   // q(const).xmlChar
                ids: any,   // void
                refs: any,   // void
                URL: string,   // q(const).xmlChar
                charset: number,   // int
                dict: xmlDictPtr,   // struct _xmlDict
                psvi: any,   // void
                parseFlags: number,   // int
                properties: number,   // int

getCPtr: {
                (): number,
            }}
    type xmlDtd = {}
    export type xmlDtdPtr = {
                _private: any,   // void
                type: xmlElementType,   // xmlElementType
                name: string,   // q(const).xmlChar
                children: xmlNodePtr | null,   // struct _xmlNode
                last: xmlNodePtr | null,   // struct _xmlNode
                parent: xmlDocPtr | null,   // struct _xmlDoc
                next: xmlNodePtr | null,   // struct _xmlNode
                prev: xmlNodePtr | null,   // struct _xmlNode
                doc: xmlDocPtr | null,   // struct _xmlDoc
                notations: any,   // void
                elements: any,   // void
                attributes: any,   // void
                entities: any,   // void
                ExternalID: string,   // q(const).xmlChar
                SystemID: string,   // q(const).xmlChar
                pentities: any,   // void

getCPtr: {
                (): number,
            }}
    type xmlElement = {}
    type xmlElementContent = {}
    type xmlElementContentOccur = {}
    export type xmlElementContentPtr = {
                type: xmlElementContentType,   // xmlElementContentType
                ocur: xmlElementContentOccur,   // xmlElementContentOccur
                name: string,   // q(const).xmlChar
                c1: xmlElementContentPtr,   // _xmlElementContent
                c2: xmlElementContentPtr,   // _xmlElementContent
                parent: xmlElementContentPtr,   // _xmlElementContent
                prefix: string,   // q(const).xmlChar

getCPtr: {
                (): number,
            }}
    type xmlElementContentType = {}
    export type xmlElementPtr = xmlNodePtr & {
                _private: any,   // void
                type: xmlElementType,   // xmlElementType
                name: string,   // q(const).xmlChar
                children: xmlNodePtr | null,   // struct _xmlNode
                last: xmlNodePtr | null,   // struct _xmlNode
                parent: xmlDtdPtr | null,   // struct _xmlDtd
                next: xmlNodePtr | null,   // struct _xmlNode
                prev: xmlNodePtr | null,   // struct _xmlNode
                doc: xmlDocPtr | null,   // struct _xmlDoc
                etype: xmlElementTypeVal,   // xmlElementTypeVal
                content: xmlElementContentPtr,   // xmlElementContentPtr
                attributes: xmlAttributePtr,   // xmlAttributePtr
                prefix: string,   // q(const).xmlChar
                contModel: xmlRegexpPtr,   // xmlRegexpPtr

getCPtr: {
                (): number,
            }}
    type xmlElementTable = {}
    export type xmlElementTablePtr = {}
    type xmlElementType = {}
    type xmlElementTypeVal = {}
    type xmlEntitiesTable = {}
    export type xmlEntitiesTablePtr = {}
    type xmlEntity = {}
    export type xmlEntityPtr = {
                _private: any,   // void
                type: xmlElementType,   // xmlElementType
                name: string,   // q(const).xmlChar
                children: xmlNodePtr | null,   // struct _xmlNode
                last: xmlNodePtr | null,   // struct _xmlNode
                parent: xmlDtdPtr | null,   // struct _xmlDtd
                next: xmlNodePtr | null,   // struct _xmlNode
                prev: xmlNodePtr | null,   // struct _xmlNode
                doc: xmlDocPtr | null,   // struct _xmlDoc
                orig: string,   // xmlChar
                content: string,   // xmlChar
                length: number,   // int
                etype: xmlEntityType,   // xmlEntityType
                ExternalID: string,   // q(const).xmlChar
                SystemID: string,   // q(const).xmlChar
                nexte: xmlEntityPtr,   // struct _xmlEntity
                URI: string,   // q(const).xmlChar
                owner: number,   // int
                checked: number,   // int

getCPtr: {
                (): number,
            }}
    type xmlEntityReferenceFunc = {}
    type xmlEntityType = {}
    type xmlEnumeration = {}
    export type xmlEnumerationPtr = {
                next: xmlEnumerationPtr,   // _xmlEnumeration
                name: string,   // q(const).xmlChar

getCPtr: {
                (): number,
            }}
    type xmlError = {}
    type xmlErrorDomain = {}
    type xmlErrorLevel = {}
    export type xmlErrorPtr = {
                domain: number,   // int
                code: number,   // int
                message: string,   // char
                level: xmlErrorLevel,   // xmlErrorLevel
                file: string,   // char
                line: number,   // int
                str1: string,   // char
                str2: string,   // char
                str3: string,   // char
                int1: number,   // int
                int2: number,   // int
                ctxt: any,   // void
                node: any,   // void

getCPtr: {
                (): number,
            }}
    type xmlExpCtxt = {}
    export type xmlExpCtxtPtr = {}
    type xmlExpNode = {}
    export type xmlExpNodePtr = {}
    type xmlExpNodeType = {}
    type xmlExternalEntityLoader = {}
    type xmlFeature = {}
    type xmlFreeFunc = {}
    type xmlGenericErrorFunc = {}
    type xmlGlobalState = {}
    export type xmlGlobalStatePtr = {
                xmlParserVersion: string,   // q(const).char
                xmlDefaultSAXLocator: xmlSAXLocator,   // xmlSAXLocator
                xmlDefaultSAXHandler: xmlSAXHandlerV1,   // xmlSAXHandlerV1
                docbDefaultSAXHandler: xmlSAXHandlerV1,   // xmlSAXHandlerV1
                htmlDefaultSAXHandler: xmlSAXHandlerV1,   // xmlSAXHandlerV1
                xmlFree: xmlFreeFunc,   // xmlFreeFunc
                xmlMalloc: xmlMallocFunc,   // xmlMallocFunc
                xmlMemStrdup: xmlStrdupFunc,   // xmlStrdupFunc
                xmlRealloc: xmlReallocFunc,   // xmlReallocFunc
                xmlGenericError: xmlGenericErrorFunc,   // xmlGenericErrorFunc
                xmlStructuredError: xmlStructuredErrorFunc,   // xmlStructuredErrorFunc
                xmlGenericErrorContext: any,   // void
                oldXMLWDcompatibility: number,   // int
                xmlBufferAllocScheme: xmlBufferAllocationScheme,   // xmlBufferAllocationScheme
                xmlDefaultBufferSize: number,   // int
                xmlSubstituteEntitiesDefaultValue: number,   // int
                xmlDoValidityCheckingDefaultValue: number,   // int
                xmlGetWarningsDefaultValue: number,   // int
                xmlKeepBlanksDefaultValue: number,   // int
                xmlLineNumbersDefaultValue: number,   // int
                xmlLoadExtDtdDefaultValue: number,   // int
                xmlParserDebugEntities: number,   // int
                xmlPedanticParserDefaultValue: number,   // int
                xmlSaveNoEmptyTags: number,   // int
                xmlIndentTreeOutput: number,   // int
                xmlTreeIndentString: string,   // q(const).char
                xmlRegisterNodeDefaultValue: xmlRegisterNodeFunc,   // xmlRegisterNodeFunc
                xmlDeregisterNodeDefaultValue: xmlDeregisterNodeFunc,   // xmlDeregisterNodeFunc
                xmlMallocAtomic: xmlMallocFunc,   // xmlMallocFunc
                xmlLastError: xmlError,   // xmlError
                xmlParserInputBufferCreateFilenameValue: xmlParserInputBufferCreateFilenameFunc,   // xmlParserInputBufferCreateFilenameFunc
                xmlOutputBufferCreateFilenameValue: xmlOutputBufferCreateFilenameFunc,   // xmlOutputBufferCreateFilenameFunc
                xmlStructuredErrorContext: any,   // void

getCPtr: {
                (): number,
            }}
    type xmlHashCopier = {}
    type xmlHashDeallocator = {}
    type xmlHashScanner = {}
    type xmlHashScannerFull = {}
    type xmlHashTable = {}
    export type xmlHashTablePtr = {}
    type xmlID = {}
    export type xmlIDPtr = {
                next: xmlIDPtr,   // _xmlID
                value: string,   // q(const).xmlChar
                attr: xmlAttrPtr | null,   // xmlAttrPtr
                name: string,   // q(const).xmlChar
                lineno: number,   // int
                doc: xmlDocPtr | null,   // _xmlDoc

getCPtr: {
                (): number,
            }}
    type xmlIDTable = {}
    export type xmlIDTablePtr = {}
    type xmlInputCloseCallback = {}
    type xmlInputMatchCallback = {}
    type xmlInputOpenCallback = {}
    type xmlInputReadCallback = {}
    type xmlLink = {}
    export type xmlLinkPtr = {}
    type xmlList = {}
    type xmlListDataCompare = {}
    type xmlListDeallocator = {}
    export type xmlListPtr = {}
    type xmlListWalker = {}
    type xmlLocationSet = {}
    export type xmlLocationSetPtr = {
                locNr: number,   // int
                locMax: number,   // int
                locTab: xmlXPathObjectPtr,   // xmlXPathObjectPtr

getCPtr: {
                (): number,
            }}
    type xmlMallocFunc = {}
    type xmlModule = {}
    type xmlModuleOption = {}
    export type xmlModulePtr = {}
    type xmlMutex = {}
    export type xmlMutexPtr = {}
    type xmlNode = {}
    export type xmlNodePtr = {
                _private: any,   // void
                type: xmlElementType,   // xmlElementType
                name: string,   // q(const).xmlChar
                children: xmlNodePtr | null,   // struct _xmlNode
                last: xmlNodePtr | null,   // struct _xmlNode
                parent: xmlNodePtr | null,   // struct _xmlNode
                next: xmlNodePtr | null,   // struct _xmlNode
                prev: xmlNodePtr | null,   // struct _xmlNode
                doc: xmlDocPtr | null,   // struct _xmlDoc
                ns: xmlNsPtr | null,   // xmlNs
                content: string,   // xmlChar
                properties: xmlAttrPtr | null,   // struct _xmlAttr
                nsDef: xmlNsPtr | null,   // xmlNs
                psvi: any,   // void
                line: number,   // unsigned short
                extra: number,   // unsigned short

getCPtr: {
                (): number,
            }}
    type xmlNodeSet = {}
    export type xmlNodeSetPtr = {
                nodeNr: number,   // int
                nodeMax: number,   // int
                nodeTab: xmlNodePtr | null,   // xmlNodePtr

getCPtr: {
                (): number,
            }}
    type xmlNotation = {}
    export type xmlNotationPtr = {
                name: string,   // q(const).xmlChar
                PublicID: string,   // q(const).xmlChar
                SystemID: string,   // q(const).xmlChar

getCPtr: {
                (): number,
            }}
    type xmlNotationTable = {}
    export type xmlNotationTablePtr = {}
    type xmlNs = {}
    export type xmlNsPtr = {
                next: xmlNsPtr | null,   // struct _xmlNs
                type: xmlNsPtr | null,   // xmlNsType
                href: string,   // q(const).xmlChar
                prefix: string,   // q(const).xmlChar
                _private: any,   // void
                context: xmlDocPtr | null,   // struct _xmlDoc

getCPtr: {
                (): number,
            }}
    type xmlNsType = {}
    type xmlOutputBuffer = {}
    type xmlOutputBufferCreateFilenameFunc = {}
    export type xmlOutputBufferPtr = {
                context: any,   // void
                writecallback: xmlOutputWriteCallback,   // xmlOutputWriteCallback
                closecallback: xmlOutputCloseCallback,   // xmlOutputCloseCallback
                encoder: xmlCharEncodingHandlerPtr,   // xmlCharEncodingHandlerPtr
                buffer: xmlBufPtr,   // xmlBufPtr
                conv: xmlBufPtr,   // xmlBufPtr
                written: number,   // int
                error: number,   // int

getCPtr: {
                (): number,
            }}
    type xmlOutputCloseCallback = {}
    type xmlOutputMatchCallback = {}
    type xmlOutputOpenCallback = {}
    type xmlOutputWriteCallback = {}
    type xmlParserCtxt = {}
    export type xmlParserCtxtPtr = {
                sax: xmlSAXHandlerPtr,   // _xmlSAXHandler
                userData: any,   // void
                myDoc: xmlDocPtr | null,   // xmlDocPtr
                wellFormed: number,   // int
                replaceEntities: number,   // int
                version: string,   // q(const).xmlChar
                encoding: string,   // q(const).xmlChar
                standalone: number,   // int
                html: number,   // int
                input: xmlParserInputPtr,   // xmlParserInputPtr
                inputNr: number,   // int
                inputMax: number,   // int
                inputTab: xmlParserInputPtr,   // xmlParserInputPtr
                node: xmlNodePtr | null,   // xmlNodePtr
                nodeNr: number,   // int
                nodeMax: number,   // int
                nodeTab: xmlNodePtr | null,   // xmlNodePtr
                record_info: number,   // int
                node_seq: xmlParserNodeInfoSeq,   // xmlParserNodeInfoSeq
                errNo: number,   // int
                hasExternalSubset: number,   // int
                hasPErefs: number,   // int
                external: number,   // int
                valid: number,   // int
                validate: number,   // int
                vctxt: xmlValidCtxt,   // xmlValidCtxt
                instate: xmlParserInputState,   // xmlParserInputState
                token: number,   // int
                directory: string,   // char
                name: string,   // q(const).xmlChar
                nameNr: number,   // int
                nameMax: number,   // int
                nameTab: string,   // q(const).xmlChar
                nbChars: number,   // long
                checkIndex: number,   // long
                keepBlanks: number,   // int
                disableSAX: number,   // int
                inSubset: number,   // int
                intSubName: string,   // q(const).xmlChar
                extSubURI: string,   // xmlChar
                extSubSystem: string,   // xmlChar
                space: number,   // int
                spaceNr: number,   // int
                spaceMax: number,   // int
                spaceTab: number,   // int
                depth: number,   // int
                entity: xmlParserInputPtr,   // xmlParserInputPtr
                charset: number,   // int
                nodelen: number,   // int
                nodemem: number,   // int
                pedantic: number,   // int
                _private: any,   // void
                loadsubset: number,   // int
                linenumbers: number,   // int
                catalogs: any,   // void
                recovery: number,   // int
                progressive: number,   // int
                dict: xmlDictPtr,   // xmlDictPtr
                atts: string,   // q(const).xmlChar
                maxatts: number,   // int
                docdict: number,   // int
                str_xml: string,   // q(const).xmlChar
                str_xmlns: string,   // q(const).xmlChar
                str_xml_ns: string,   // q(const).xmlChar
                sax2: number,   // int
                nsNr: number,   // int
                nsMax: number,   // int
                nsTab: string,   // q(const).xmlChar
                attallocs: number,   // int
                pushTab: xmlStartTag,   // xmlStartTag
                attsDefault: xmlHashTablePtr,   // xmlHashTablePtr
                attsSpecial: xmlHashTablePtr,   // xmlHashTablePtr
                nsWellFormed: number,   // int
                options: number,   // int
                dictNames: number,   // int
                freeElemsNr: number,   // int
                freeElems: xmlNodePtr | null,   // xmlNodePtr
                freeAttrsNr: number,   // int
                freeAttrs: xmlAttrPtr | null,   // xmlAttrPtr
                lastError: xmlError,   // xmlError
                parseMode: xmlParserMode,   // xmlParserMode
                nbentities: number,   // unsigned long
                sizeentities: number,   // unsigned long
                nodeInfo: xmlParserNodeInfo,   // xmlParserNodeInfo
                nodeInfoNr: number,   // int
                nodeInfoMax: number,   // int
                nodeInfoTab: xmlParserNodeInfo,   // xmlParserNodeInfo
                input_id: number,   // int
                sizeentcopy: number,   // unsigned long

getCPtr: {
                (): number,
            }}
    type xmlParserErrors = {}
    type xmlParserInput = {}
    type xmlParserInputBuffer = {}
    type xmlParserInputBufferCreateFilenameFunc = {}
    export type xmlParserInputBufferPtr = {
                context: any,   // void
                readcallback: xmlInputReadCallback,   // xmlInputReadCallback
                closecallback: xmlInputCloseCallback,   // xmlInputCloseCallback
                encoder: xmlCharEncodingHandlerPtr,   // xmlCharEncodingHandlerPtr
                buffer: xmlBufPtr,   // xmlBufPtr
                raw: xmlBufPtr,   // xmlBufPtr
                compressed: number,   // int
                error: number,   // int
                rawconsumed: number,   // unsigned long

getCPtr: {
                (): number,
            }}
    type xmlParserInputDeallocate = {}
    export type xmlParserInputPtr = {
                buf: xmlParserInputBufferPtr,   // xmlParserInputBufferPtr
                filename: string,   // q(const).char
                directory: string,   // q(const).char
                base: string,   // q(const).xmlChar
                cur: string,   // q(const).xmlChar
                end: string,   // q(const).xmlChar
                length: number,   // int
                line: number,   // int
                col: number,   // int
                consumed: number,   // unsigned long
                free: xmlParserInputDeallocate,   // xmlParserInputDeallocate
                encoding: string,   // q(const).xmlChar
                version: string,   // q(const).xmlChar
                standalone: number,   // int
                id: number,   // int

getCPtr: {
                (): number,
            }}
    type xmlParserInputState = {}
    type xmlParserMode = {}
    type xmlParserNodeInfo = {}
    export type xmlParserNodeInfoPtr = {
                node: undefined,   // q(const)._xmlNode
                begin_pos: number,   // unsigned long
                begin_line: number,   // unsigned long
                end_pos: number,   // unsigned long
                end_line: number,   // unsigned long

getCPtr: {
                (): number,
            }}
    type xmlParserNodeInfoSeq = {}
    export type xmlParserNodeInfoSeqPtr = {
                maximum: number,   // unsigned long
                length: number,   // unsigned long
                buffer: xmlParserNodeInfo,   // xmlParserNodeInfo

getCPtr: {
                (): number,
            }}
    type xmlParserOption = {}
    type xmlParserSeverities = {}
    type xmlPattern = {}
    type xmlPatternFlags = {}
    export type xmlPatternPtr = {}
    type xmlRMutex = {}
    export type xmlRMutexPtr = {}
    type xmlReallocFunc = {}
    type xmlRef = {}
    export type xmlRefPtr = {
                next: xmlRefPtr,   // _xmlRef
                value: string,   // q(const).xmlChar
                attr: xmlAttrPtr | null,   // xmlAttrPtr
                name: string,   // q(const).xmlChar
                lineno: number,   // int

getCPtr: {
                (): number,
            }}
    type xmlRefTable = {}
    export type xmlRefTablePtr = {}
    type xmlRegExecCallbacks = {}
    type xmlRegExecCtxt = {}
    export type xmlRegExecCtxtPtr = {}
    type xmlRegexp = {}
    export type xmlRegexpPtr = {}
    type xmlRegisterNodeFunc = {}
    type xmlRelaxNG = {}
    type xmlRelaxNGParserCtxt = {}
    export type xmlRelaxNGParserCtxtPtr = {}
    type xmlRelaxNGParserFlag = {}
    export type xmlRelaxNGPtr = {}
    type xmlRelaxNGValidCtxt = {}
    export type xmlRelaxNGValidCtxtPtr = {}
    type xmlRelaxNGValidErr = {}
    type xmlRelaxNGValidityErrorFunc = {}
    type xmlRelaxNGValidityWarningFunc = {}
    type xmlSAXHandler = {}
    export type xmlSAXHandlerPtr = {
                internalSubset: internalSubsetSAXFunc,   // internalSubsetSAXFunc
                isStandalone: isStandaloneSAXFunc,   // isStandaloneSAXFunc
                hasInternalSubset: hasInternalSubsetSAXFunc,   // hasInternalSubsetSAXFunc
                hasExternalSubset: hasExternalSubsetSAXFunc,   // hasExternalSubsetSAXFunc
                resolveEntity: resolveEntitySAXFunc,   // resolveEntitySAXFunc
                getEntity: getEntitySAXFunc,   // getEntitySAXFunc
                entityDecl: entityDeclSAXFunc,   // entityDeclSAXFunc
                notationDecl: notationDeclSAXFunc,   // notationDeclSAXFunc
                attributeDecl: attributeDeclSAXFunc,   // attributeDeclSAXFunc
                elementDecl: elementDeclSAXFunc,   // elementDeclSAXFunc
                unparsedEntityDecl: unparsedEntityDeclSAXFunc,   // unparsedEntityDeclSAXFunc
                setDocumentLocator: setDocumentLocatorSAXFunc,   // setDocumentLocatorSAXFunc
                startDocument: startDocumentSAXFunc,   // startDocumentSAXFunc
                endDocument: endDocumentSAXFunc,   // endDocumentSAXFunc
                startElement: startElementSAXFunc,   // startElementSAXFunc
                endElement: endElementSAXFunc,   // endElementSAXFunc
                reference: referenceSAXFunc,   // referenceSAXFunc
                characters: charactersSAXFunc,   // charactersSAXFunc
                ignorableWhitespace: ignorableWhitespaceSAXFunc,   // ignorableWhitespaceSAXFunc
                processingInstruction: processingInstructionSAXFunc,   // processingInstructionSAXFunc
                comment: commentSAXFunc,   // commentSAXFunc
                warning: warningSAXFunc,   // warningSAXFunc
                error: errorSAXFunc,   // errorSAXFunc
                fatalError: fatalErrorSAXFunc,   // fatalErrorSAXFunc
                getParameterEntity: getParameterEntitySAXFunc,   // getParameterEntitySAXFunc
                cdataBlock: cdataBlockSAXFunc,   // cdataBlockSAXFunc
                externalSubset: externalSubsetSAXFunc,   // externalSubsetSAXFunc
                initialized: number,   // unsigned int
                _private: any,   // void
                startElementNs: startElementNsSAX2Func,   // startElementNsSAX2Func
                endElementNs: endElementNsSAX2Func,   // endElementNsSAX2Func
                serror: xmlStructuredErrorFunc,   // xmlStructuredErrorFunc

getCPtr: {
                (): number,
            }}
    type xmlSAXHandlerV1 = {}
    export type xmlSAXHandlerV1Ptr = {
                internalSubset: internalSubsetSAXFunc,   // internalSubsetSAXFunc
                isStandalone: isStandaloneSAXFunc,   // isStandaloneSAXFunc
                hasInternalSubset: hasInternalSubsetSAXFunc,   // hasInternalSubsetSAXFunc
                hasExternalSubset: hasExternalSubsetSAXFunc,   // hasExternalSubsetSAXFunc
                resolveEntity: resolveEntitySAXFunc,   // resolveEntitySAXFunc
                getEntity: getEntitySAXFunc,   // getEntitySAXFunc
                entityDecl: entityDeclSAXFunc,   // entityDeclSAXFunc
                notationDecl: notationDeclSAXFunc,   // notationDeclSAXFunc
                attributeDecl: attributeDeclSAXFunc,   // attributeDeclSAXFunc
                elementDecl: elementDeclSAXFunc,   // elementDeclSAXFunc
                unparsedEntityDecl: unparsedEntityDeclSAXFunc,   // unparsedEntityDeclSAXFunc
                setDocumentLocator: setDocumentLocatorSAXFunc,   // setDocumentLocatorSAXFunc
                startDocument: startDocumentSAXFunc,   // startDocumentSAXFunc
                endDocument: endDocumentSAXFunc,   // endDocumentSAXFunc
                startElement: startElementSAXFunc,   // startElementSAXFunc
                endElement: endElementSAXFunc,   // endElementSAXFunc
                reference: referenceSAXFunc,   // referenceSAXFunc
                characters: charactersSAXFunc,   // charactersSAXFunc
                ignorableWhitespace: ignorableWhitespaceSAXFunc,   // ignorableWhitespaceSAXFunc
                processingInstruction: processingInstructionSAXFunc,   // processingInstructionSAXFunc
                comment: commentSAXFunc,   // commentSAXFunc
                warning: warningSAXFunc,   // warningSAXFunc
                error: errorSAXFunc,   // errorSAXFunc
                fatalError: fatalErrorSAXFunc,   // fatalErrorSAXFunc
                getParameterEntity: getParameterEntitySAXFunc,   // getParameterEntitySAXFunc
                cdataBlock: cdataBlockSAXFunc,   // cdataBlockSAXFunc
                externalSubset: externalSubsetSAXFunc,   // externalSubsetSAXFunc
                initialized: number,   // unsigned int

getCPtr: {
                (): number,
            }}
    type xmlSAXLocator = {}
    export type xmlSAXLocatorPtr = {
                getPublicId: string,   // q(const).xmlChar
                getSystemId: string,   // q(const).xmlChar
                getLineNumber: number,   // int
                getColumnNumber: number,   // int

getCPtr: {
                (): number,
            }}
    type xmlSaveCtxt = {}
    export type xmlSaveCtxtPtr = {}
    type xmlSaveOption = {}
    type xmlSchema = {}
    type xmlSchemaAnnot = {}
    export type xmlSchemaAnnotPtr = {
                next: xmlSchemaAnnotPtr,   // _xmlSchemaAnnot
                content: xmlNodePtr | null,   // xmlNodePtr

getCPtr: {
                (): number,
            }}
    type xmlSchemaAttribute = {}
    type xmlSchemaAttributeGroup = {}
    export type xmlSchemaAttributeGroupPtr = {
                type: xmlSchemaTypeType,   // xmlSchemaTypeType
                next: xmlSchemaAttributePtr,   // _xmlSchemaAttribute
                name: string,   // q(const).xmlChar
                id: string,   // q(const).xmlChar
                ref: string,   // q(const).xmlChar
                refNs: string,   // q(const).xmlChar
                annot: xmlSchemaAnnotPtr,   // xmlSchemaAnnotPtr
                attributes: xmlSchemaAttributePtr,   // xmlSchemaAttributePtr
                node: xmlNodePtr | null,   // xmlNodePtr
                flags: number,   // int
                attributeWildcard: xmlSchemaWildcardPtr,   // xmlSchemaWildcardPtr
                refPrefix: string,   // q(const).xmlChar
                refItem: xmlSchemaAttributeGroupPtr,   // xmlSchemaAttributeGroupPtr
                targetNamespace: string,   // q(const).xmlChar
                attrUses: any,   // void

getCPtr: {
                (): number,
            }}
    type xmlSchemaAttributeLink = {}
    export type xmlSchemaAttributeLinkPtr = {
                next: xmlSchemaAttributeLinkPtr,   // _xmlSchemaAttributeLink
                attr: xmlSchemaAttributePtr,   // _xmlSchemaAttribute

getCPtr: {
                (): number,
            }}
    export type xmlSchemaAttributePtr = {
                type: xmlSchemaTypeType,   // xmlSchemaTypeType
                next: xmlSchemaAttributePtr,   // _xmlSchemaAttribute
                name: string,   // q(const).xmlChar
                id: string,   // q(const).xmlChar
                ref: string,   // q(const).xmlChar
                refNs: string,   // q(const).xmlChar
                typeName: string,   // q(const).xmlChar
                typeNs: string,   // q(const).xmlChar
                annot: xmlSchemaAnnotPtr,   // xmlSchemaAnnotPtr
                base: xmlSchemaTypePtr,   // xmlSchemaTypePtr
                occurs: number,   // int
                defValue: string,   // q(const).xmlChar
                subtypes: xmlSchemaTypePtr,   // xmlSchemaTypePtr
                node: xmlNodePtr | null,   // xmlNodePtr
                targetNamespace: string,   // q(const).xmlChar
                flags: number,   // int
                refPrefix: string,   // q(const).xmlChar
                defVal: xmlSchemaValPtr,   // xmlSchemaValPtr
                refDecl: xmlSchemaAttributePtr,   // xmlSchemaAttributePtr

getCPtr: {
                (): number,
            }}
    type xmlSchemaContentType = {}
    type xmlSchemaElement = {}
    export type xmlSchemaElementPtr = {
                type: xmlSchemaTypeType,   // xmlSchemaTypeType
                next: xmlSchemaTypePtr,   // _xmlSchemaType
                name: string,   // q(const).xmlChar
                id: string,   // q(const).xmlChar
                ref: string,   // q(const).xmlChar
                refNs: string,   // q(const).xmlChar
                annot: xmlSchemaAnnotPtr,   // xmlSchemaAnnotPtr
                subtypes: xmlSchemaTypePtr,   // xmlSchemaTypePtr
                attributes: xmlSchemaAttributePtr,   // xmlSchemaAttributePtr
                node: xmlNodePtr | null,   // xmlNodePtr
                minOccurs: number,   // int
                maxOccurs: number,   // int
                flags: number,   // int
                targetNamespace: string,   // q(const).xmlChar
                namedType: string,   // q(const).xmlChar
                namedTypeNs: string,   // q(const).xmlChar
                substGroup: string,   // q(const).xmlChar
                substGroupNs: string,   // q(const).xmlChar
                scope: string,   // q(const).xmlChar
                value: string,   // q(const).xmlChar
                refDecl: xmlSchemaElementPtr | null,   // _xmlSchemaElement
                contModel: xmlRegexpPtr,   // xmlRegexpPtr
                contentType: xmlSchemaContentType,   // xmlSchemaContentType
                refPrefix: string,   // q(const).xmlChar
                defVal: xmlSchemaValPtr,   // xmlSchemaValPtr
                idcs: any,   // void

getCPtr: {
                (): number,
            }}
    type xmlSchemaFacet = {}
    type xmlSchemaFacetLink = {}
    export type xmlSchemaFacetLinkPtr = {
                next: xmlSchemaFacetLinkPtr,   // _xmlSchemaFacetLink
                facet: xmlSchemaFacetPtr,   // xmlSchemaFacetPtr

getCPtr: {
                (): number,
            }}
    export type xmlSchemaFacetPtr = {
                type: xmlSchemaTypeType,   // xmlSchemaTypeType
                next: xmlSchemaFacetPtr,   // _xmlSchemaFacet
                value: string,   // q(const).xmlChar
                id: string,   // q(const).xmlChar
                annot: xmlSchemaAnnotPtr,   // xmlSchemaAnnotPtr
                node: xmlNodePtr | null,   // xmlNodePtr
                fixed: number,   // int
                whitespace: number,   // int
                val: xmlSchemaValPtr,   // xmlSchemaValPtr
                regexp: xmlRegexpPtr,   // xmlRegexpPtr

getCPtr: {
                (): number,
            }}
    type xmlSchemaNotation = {}
    export type xmlSchemaNotationPtr = {
                type: xmlSchemaTypeType,   // xmlSchemaTypeType
                name: string,   // q(const).xmlChar
                annot: xmlSchemaAnnotPtr,   // xmlSchemaAnnotPtr
                identifier: string,   // q(const).xmlChar
                targetNamespace: string,   // q(const).xmlChar

getCPtr: {
                (): number,
            }}
    type xmlSchemaParserCtxt = {}
    export type xmlSchemaParserCtxtPtr = {}
    export type xmlSchemaPtr = {
                name: string,   // q(const).xmlChar
                targetNamespace: string,   // q(const).xmlChar
                version: string,   // q(const).xmlChar
                id: string,   // q(const).xmlChar
                doc: xmlDocPtr | null,   // xmlDocPtr
                annot: xmlSchemaAnnotPtr,   // xmlSchemaAnnotPtr
                flags: number,   // int
                typeDecl: xmlHashTablePtr,   // xmlHashTablePtr
                attrDecl: xmlHashTablePtr,   // xmlHashTablePtr
                attrgrpDecl: xmlHashTablePtr,   // xmlHashTablePtr
                elemDecl: xmlHashTablePtr,   // xmlHashTablePtr
                notaDecl: xmlHashTablePtr,   // xmlHashTablePtr
                schemasImports: xmlHashTablePtr,   // xmlHashTablePtr
                _private: any,   // void
                groupDecl: xmlHashTablePtr,   // xmlHashTablePtr
                dict: xmlDictPtr,   // xmlDictPtr
                includes: any,   // void
                preserve: number,   // int
                counter: number,   // int
                idcDef: xmlHashTablePtr,   // xmlHashTablePtr
                volatiles: any,   // void

getCPtr: {
                (): number,
            }}
    export type xmlSchemaSAXPlugPtr = {}
    type xmlSchemaSAXPlugStruct = {}
    type xmlSchemaType = {}
    type xmlSchemaTypeLink = {}
    export type xmlSchemaTypeLinkPtr = {
                next: xmlSchemaTypeLinkPtr,   // _xmlSchemaTypeLink
                type: xmlSchemaTypePtr,   // xmlSchemaTypePtr

getCPtr: {
                (): number,
            }}
    export type xmlSchemaTypePtr = {
                type: xmlSchemaTypeType,   // xmlSchemaTypeType
                next: xmlSchemaTypePtr,   // _xmlSchemaType
                name: string,   // q(const).xmlChar
                id: string,   // q(const).xmlChar
                ref: string,   // q(const).xmlChar
                refNs: string,   // q(const).xmlChar
                annot: xmlSchemaAnnotPtr,   // xmlSchemaAnnotPtr
                subtypes: xmlSchemaTypePtr,   // xmlSchemaTypePtr
                attributes: xmlSchemaAttributePtr,   // xmlSchemaAttributePtr
                node: xmlNodePtr | null,   // xmlNodePtr
                minOccurs: number,   // int
                maxOccurs: number,   // int
                flags: number,   // int
                contentType: xmlSchemaContentType,   // xmlSchemaContentType
                base: string,   // q(const).xmlChar
                baseNs: string,   // q(const).xmlChar
                baseType: xmlSchemaTypePtr,   // xmlSchemaTypePtr
                facets: xmlSchemaFacetPtr,   // xmlSchemaFacetPtr
                redef: xmlSchemaTypePtr,   // _xmlSchemaType
                recurse: number,   // int
                attributeUses: xmlSchemaAttributeLinkPtr,   // xmlSchemaAttributeLinkPtr
                attributeWildcard: xmlSchemaWildcardPtr,   // xmlSchemaWildcardPtr
                builtInType: number,   // int
                memberTypes: xmlSchemaTypeLinkPtr,   // xmlSchemaTypeLinkPtr
                facetSet: xmlSchemaFacetLinkPtr,   // xmlSchemaFacetLinkPtr
                refPrefix: string,   // q(const).xmlChar
                contentTypeDef: xmlSchemaTypePtr,   // xmlSchemaTypePtr
                contModel: xmlRegexpPtr,   // xmlRegexpPtr
                targetNamespace: string,   // q(const).xmlChar
                attrUses: any,   // void

getCPtr: {
                (): number,
            }}
    type xmlSchemaTypeType = {}
    type xmlSchemaVal = {}
    export type xmlSchemaValPtr = {}
    type xmlSchemaValType = {}
    type xmlSchemaValidCtxt = {}
    export type xmlSchemaValidCtxtPtr = {}
    type xmlSchemaValidError = {}
    type xmlSchemaValidOption = {}
    type xmlSchemaValidityErrorFunc = {}
    type xmlSchemaValidityLocatorFunc = {}
    type xmlSchemaValidityWarningFunc = {}
    type xmlSchemaWhitespaceValueType = {}
    type xmlSchemaWildcard = {}
    type xmlSchemaWildcardNs = {}
    export type xmlSchemaWildcardNsPtr = {
                next: xmlSchemaWildcardNsPtr | null,   // _xmlSchemaWildcardNs
                value: string,   // q(const).xmlChar

getCPtr: {
                (): number,
            }}
    export type xmlSchemaWildcardPtr = {
                type: xmlSchemaTypeType,   // xmlSchemaTypeType
                id: string,   // q(const).xmlChar
                annot: xmlSchemaAnnotPtr,   // xmlSchemaAnnotPtr
                node: xmlNodePtr | null,   // xmlNodePtr
                minOccurs: number,   // int
                maxOccurs: number,   // int
                processContents: number,   // int
                any: number,   // int
                nsSet: xmlSchemaWildcardNsPtr | null,   // xmlSchemaWildcardNsPtr
                negNsSet: xmlSchemaWildcardNsPtr | null,   // xmlSchemaWildcardNsPtr
                flags: number,   // int

getCPtr: {
                (): number,
            }}
    type xmlStartTag = {}
    type xmlStrdupFunc = {}
    type xmlStreamCtxt = {}
    export type xmlStreamCtxtPtr = {}
    type xmlStructuredErrorFunc = {}
    type xmlURI = {}
    export type xmlURIPtr = {
                scheme: string,   // char
                opaque: string,   // char
                authority: string,   // char
                server: string,   // char
                user: string,   // char
                port: number,   // int
                path: string,   // char
                query: string,   // char
                fragment: string,   // char
                cleanup: number,   // int
                query_raw: string,   // char

getCPtr: {
                (): number,
            }}
    type xmlValidCtxt = {}
    export type xmlValidCtxtPtr = {
                userData: any,   // void
                error: xmlValidityErrorFunc,   // xmlValidityErrorFunc
                warning: xmlValidityWarningFunc,   // xmlValidityWarningFunc
                node: xmlNodePtr | null,   // xmlNodePtr
                nodeNr: number,   // int
                nodeMax: number,   // int
                nodeTab: xmlNodePtr | null,   // xmlNodePtr
                finishDtd: number,   // unsigned int
                doc: xmlDocPtr | null,   // xmlDocPtr
                valid: number,   // int
                vstate: xmlValidState,   // xmlValidState
                vstateNr: number,   // int
                vstateMax: number,   // int
                vstateTab: xmlValidState,   // xmlValidState
                am: xmlAutomataPtr,   // xmlAutomataPtr
                state: xmlAutomataStatePtr,   // xmlAutomataStatePtr

getCPtr: {
                (): number,
            }}
    type xmlValidState = {}
    export type xmlValidStatePtr = {}
    type xmlValidityErrorFunc = {}
    type xmlValidityWarningFunc = {}
    type xmlXPathAxis = {}
    type xmlXPathAxisFunc = {}
    export type xmlXPathAxisPtr = {
                name: string,   // q(const).xmlChar
                func: xmlXPathAxisFunc,   // xmlXPathAxisFunc

getCPtr: {
                (): number,
            }}
    type xmlXPathCompExpr = {}
    export type xmlXPathCompExprPtr = {}
    type xmlXPathContext = {}
    export type xmlXPathContextPtr = {
                doc: xmlDocPtr | null,   // xmlDocPtr
                node: xmlNodePtr | null,   // xmlNodePtr
                nb_variables_unused: number,   // int
                max_variables_unused: number,   // int
                varHash: xmlHashTablePtr,   // xmlHashTablePtr
                nb_types: number,   // int
                max_types: number,   // int
                types: xmlXPathTypePtr,   // xmlXPathTypePtr
                nb_funcs_unused: number,   // int
                max_funcs_unused: number,   // int
                funcHash: xmlHashTablePtr,   // xmlHashTablePtr
                nb_axis: number,   // int
                max_axis: number,   // int
                axis: xmlXPathAxisPtr,   // xmlXPathAxisPtr
                namespaces: xmlNsPtr | null,   // xmlNsPtr
                nsNr: number,   // int
                user: any,   // void
                contextSize: number,   // int
                proximityPosition: number,   // int
                xptr: number,   // int
                here: xmlNodePtr | null,   // xmlNodePtr
                origin: xmlNodePtr | null,   // xmlNodePtr
                nsHash: xmlHashTablePtr,   // xmlHashTablePtr
                varLookupFunc: xmlXPathVariableLookupFunc,   // xmlXPathVariableLookupFunc
                varLookupData: any,   // void
                extra: any,   // void
                function: string,   // q(const).xmlChar
                functionURI: string,   // q(const).xmlChar
                funcLookupFunc: xmlXPathFuncLookupFunc,   // xmlXPathFuncLookupFunc
                funcLookupData: any,   // void
                tmpNsList: xmlNsPtr | null,   // xmlNsPtr
                tmpNsNr: number,   // int
                userData: any,   // void
                error: xmlStructuredErrorFunc,   // xmlStructuredErrorFunc
                lastError: xmlError,   // xmlError
                debugNode: xmlNodePtr | null,   // xmlNodePtr
                dict: xmlDictPtr,   // xmlDictPtr
                flags: number,   // int
                cache: any,   // void
                opLimit: number,   // unsigned long
                opCount: number,   // unsigned long
                depth: number,   // int

getCPtr: {
                (): number,
            }}
    type xmlXPathConvertFunc = {}
    type xmlXPathError = {}
    type xmlXPathEvalFunc = {}
    type xmlXPathFuncLookupFunc = {}
    export type xmlXPathFuncPtr = {}
    type xmlXPathFunct = {}
    type xmlXPathFunction = {}
    type xmlXPathObject = {}
    export type xmlXPathObjectPtr = {
                type: xmlXPathObjectType,   // xmlXPathObjectType
                nodesetval: xmlNodePtr[],   // xmlNodeSetPtr
                boolval: number,   // int
                floatval: number,   // double
                stringval: string,   // xmlChar
                user: any,   // void
                index: number,   // int
                user2: any,   // void
                index2: number,   // int

getCPtr: {
                (): number,
            }}
    type xmlXPathObjectType = {}
    type xmlXPathParserContext = {}
    export type xmlXPathParserContextPtr = {
                cur: string,   // q(const).xmlChar
                base: string,   // q(const).xmlChar
                error: number,   // int
                context: xmlXPathContextPtr,   // xmlXPathContextPtr
                value: xmlXPathObjectPtr,   // xmlXPathObjectPtr
                valueNr: number,   // int
                valueMax: number,   // int
                valueTab: xmlXPathObjectPtr,   // xmlXPathObjectPtr
                comp: xmlXPathCompExprPtr,   // xmlXPathCompExprPtr
                xptr: number,   // int
                ancestor: xmlNodePtr | null,   // xmlNodePtr
                valueFrame: number,   // int

getCPtr: {
                (): number,
            }}
    type xmlXPathType = {}
    export type xmlXPathTypePtr = {
                name: string,   // q(const).xmlChar
                func: xmlXPathConvertFunc,   // xmlXPathConvertFunc

getCPtr: {
                (): number,
            }}
    type xmlXPathVariable = {}
    type xmlXPathVariableLookupFunc = {}
    export type xmlXPathVariablePtr = {
                name: string,   // q(const).xmlChar
                value: xmlXPathObjectPtr,   // xmlXPathObjectPtr

getCPtr: {
                (): number,
            }}

    export interface NativeBindings {
        /* Constants */
    
        
                ATTRIBUTE_DESTRUCTOR: number
                BASE_BUFFER_SIZE: number
                HAVE_ARPA_INET_H: number
                HAVE_ARPA_NAMESER_H: number
                HAVE_CTYPE_H: number
                HAVE_DIRENT_H: number
                HAVE_DLFCN_H: number
                HAVE_ERRNO_H: number
                HAVE_FCNTL_H: number
                HAVE_FLOAT_H: number
                HAVE_FPRINTF: number
                HAVE_FTIME: number
                HAVE_GETTIMEOFDAY: number
                HAVE_INTTYPES_H: number
                HAVE_ISASCII: number
                HAVE_LIMITS_H: number
                HAVE_LOCALTIME: number
                HAVE_MATH_H: number
                HAVE_MEMORY_H: number
                HAVE_MMAP: number
                HAVE_MUNMAP: number
                HAVE_NETDB_H: number
                HAVE_NETINET_IN_H: number
                HAVE_POLL_H: number
                HAVE_PRINTF: number
                HAVE_PUTENV: number
                HAVE_RAND: number
                HAVE_RESOLV_H: number
                HAVE_SIGNAL: number
                HAVE_SIGNAL_H: number
                HAVE_SNPRINTF: number
                HAVE_SPRINTF: number
                HAVE_SRAND: number
                HAVE_SSCANF: number
                HAVE_STAT: number
                HAVE_STDARG_H: number
                HAVE_STDINT_H: number
                HAVE_STDLIB_H: number
                HAVE_STRFTIME: number
                HAVE_STRINGS_H: number
                HAVE_STRING_H: number
                HAVE_SYS_MMAN_H: number
                HAVE_SYS_SELECT_H: number
                HAVE_SYS_SOCKET_H: number
                HAVE_SYS_STAT_H: number
                HAVE_SYS_TIMEB_H: number
                HAVE_SYS_TIME_H: number
                HAVE_SYS_TYPES_H: number
                HAVE_TIME: number
                HAVE_TIME_H: number
                HAVE_VFPRINTF: number
                HAVE_VSNPRINTF: number
                HAVE_VSPRINTF: number
                HTML_DEPRECATED: number
                HTML_INVALID: number
                HTML_NA: number
                HTML_PARSE_COMPACT: number
                HTML_PARSE_IGNORE_ENC: number
                HTML_PARSE_NOBLANKS: number
                HTML_PARSE_NODEFDTD: number
                HTML_PARSE_NOERROR: number
                HTML_PARSE_NOIMPLIED: number
                HTML_PARSE_NONET: number
                HTML_PARSE_NOWARNING: number
                HTML_PARSE_PEDANTIC: number
                HTML_PARSE_RECOVER: number
                HTML_REQUIRED: number
                HTML_VALID: number
                INPUT_CHUNK: number
                LIBXML_DOTTED_VERSION: string
                LIBXML_MODULE_EXTENSION: string
                LIBXML_VERSION: number
                LIBXML_VERSION_EXTRA: string
                LIBXML_VERSION_STRING: string
                LT_OBJDIR: string
                PACKAGE: string
                PACKAGE_BUGREPORT: string
                PACKAGE_NAME: string
                PACKAGE_STRING: string
                PACKAGE_TARNAME: string
                PACKAGE_URL: string
                PACKAGE_VERSION: string
                STDC_HEADERS: number
                VA_LIST_IS_ARRAY: number
                VERSION: string
                XLINK_ACTUATE_AUTO: number
                XLINK_ACTUATE_NONE: number
                XLINK_ACTUATE_ONREQUEST: number
                XLINK_SHOW_EMBED: number
                XLINK_SHOW_NEW: number
                XLINK_SHOW_NONE: number
                XLINK_SHOW_REPLACE: number
                XLINK_TYPE_EXTENDED: number
                XLINK_TYPE_EXTENDED_SET: number
                XLINK_TYPE_NONE: number
                XLINK_TYPE_SIMPLE: number
                XML_ATTRIBUTE_CDATA: number
                XML_ATTRIBUTE_DECL: number
                XML_ATTRIBUTE_ENTITIES: number
                XML_ATTRIBUTE_ENTITY: number
                XML_ATTRIBUTE_ENUMERATION: number
                XML_ATTRIBUTE_FIXED: number
                XML_ATTRIBUTE_ID: number
                XML_ATTRIBUTE_IDREF: number
                XML_ATTRIBUTE_IDREFS: number
                XML_ATTRIBUTE_IMPLIED: number
                XML_ATTRIBUTE_NMTOKEN: number
                XML_ATTRIBUTE_NMTOKENS: number
                XML_ATTRIBUTE_NODE: number
                XML_ATTRIBUTE_NONE: number
                XML_ATTRIBUTE_NOTATION: number
                XML_ATTRIBUTE_REQUIRED: number
                XML_BUFFER_ALLOC_BOUNDED: number
                XML_BUFFER_ALLOC_DOUBLEIT: number
                XML_BUFFER_ALLOC_EXACT: number
                XML_BUFFER_ALLOC_HYBRID: number
                XML_BUFFER_ALLOC_IMMUTABLE: number
                XML_BUFFER_ALLOC_IO: number
                XML_BUF_OVERFLOW: number
                XML_C14N_CREATE_CTXT: number
                XML_C14N_CREATE_STACK: number
                XML_C14N_INVALID_NODE: number
                XML_C14N_RELATIVE_NAMESPACE: number
                XML_C14N_REQUIRES_UTF8: number
                XML_C14N_UNKNOW_NODE: number
                XML_CATALOG_ENTRY_BROKEN: number
                XML_CATALOG_MISSING_ATTR: number
                XML_CATALOG_NOT_CATALOG: number
                XML_CATALOG_PREFER_VALUE: number
                XML_CATALOG_RECURSION: number
                XML_CATA_ALLOW_ALL: number
                XML_CATA_ALLOW_DOCUMENT: number
                XML_CATA_ALLOW_GLOBAL: number
                XML_CATA_ALLOW_NONE: number
                XML_CATA_PREFER_NONE: number
                XML_CATA_PREFER_PUBLIC: number
                XML_CATA_PREFER_SYSTEM: number
                XML_CDATA_SECTION_NODE: number
                XML_CHAR_ENCODING_2022_JP: number
                XML_CHAR_ENCODING_8859_1: number
                XML_CHAR_ENCODING_8859_2: number
                XML_CHAR_ENCODING_8859_3: number
                XML_CHAR_ENCODING_8859_4: number
                XML_CHAR_ENCODING_8859_5: number
                XML_CHAR_ENCODING_8859_6: number
                XML_CHAR_ENCODING_8859_7: number
                XML_CHAR_ENCODING_8859_8: number
                XML_CHAR_ENCODING_8859_9: number
                XML_CHAR_ENCODING_ASCII: number
                XML_CHAR_ENCODING_EBCDIC: number
                XML_CHAR_ENCODING_ERROR: number
                XML_CHAR_ENCODING_EUC_JP: number
                XML_CHAR_ENCODING_NONE: number
                XML_CHAR_ENCODING_SHIFT_JIS: number
                XML_CHAR_ENCODING_UCS2: number
                XML_CHAR_ENCODING_UCS4BE: number
                XML_CHAR_ENCODING_UCS4LE: number
                XML_CHAR_ENCODING_UCS4_2143: number
                XML_CHAR_ENCODING_UCS4_3412: number
                XML_CHAR_ENCODING_UTF16BE: number
                XML_CHAR_ENCODING_UTF16LE: number
                XML_CHAR_ENCODING_UTF8: number
                XML_CHECK_ENTITY_TYPE: number
                XML_CHECK_FOUND_ATTRIBUTE: number
                XML_CHECK_FOUND_CDATA: number
                XML_CHECK_FOUND_COMMENT: number
                XML_CHECK_FOUND_DOCTYPE: number
                XML_CHECK_FOUND_ELEMENT: number
                XML_CHECK_FOUND_ENTITY: number
                XML_CHECK_FOUND_ENTITYREF: number
                XML_CHECK_FOUND_FRAGMENT: number
                XML_CHECK_FOUND_NOTATION: number
                XML_CHECK_FOUND_PI: number
                XML_CHECK_FOUND_TEXT: number
                XML_CHECK_NAME_NOT_NULL: number
                XML_CHECK_NOT_ATTR: number
                XML_CHECK_NOT_ATTR_DECL: number
                XML_CHECK_NOT_DTD: number
                XML_CHECK_NOT_ELEM_DECL: number
                XML_CHECK_NOT_ENTITY_DECL: number
                XML_CHECK_NOT_NCNAME: number
                XML_CHECK_NOT_NS_DECL: number
                XML_CHECK_NOT_UTF8: number
                XML_CHECK_NO_DICT: number
                XML_CHECK_NO_DOC: number
                XML_CHECK_NO_ELEM: number
                XML_CHECK_NO_HREF: number
                XML_CHECK_NO_NAME: number
                XML_CHECK_NO_NEXT: number
                XML_CHECK_NO_PARENT: number
                XML_CHECK_NO_PREV: number
                XML_CHECK_NS_ANCESTOR: number
                XML_CHECK_NS_SCOPE: number
                XML_CHECK_OUTSIDE_DICT: number
                XML_CHECK_UNKNOWN_NODE: number
                XML_CHECK_WRONG_DOC: number
                XML_CHECK_WRONG_NAME: number
                XML_CHECK_WRONG_NEXT: number
                XML_CHECK_WRONG_PARENT: number
                XML_CHECK_WRONG_PREV: number
                XML_COMMENT_NODE: number
                XML_COMPLETE_ATTRS: number
                XML_DEFAULT_VERSION: string
                XML_DETECT_IDS: number
                XML_DOCB_DOCUMENT_NODE: number
                XML_DOCUMENT_FRAG_NODE: number
                XML_DOCUMENT_NODE: number
                XML_DOCUMENT_TYPE_NODE: number
                XML_DOC_DTDVALID: number
                XML_DOC_HTML: number
                XML_DOC_INTERNAL: number
                XML_DOC_NSVALID: number
                XML_DOC_OLD10: number
                XML_DOC_USERBUILT: number
                XML_DOC_WELLFORMED: number
                XML_DOC_XINCLUDE: number
                XML_DTD_ATTRIBUTE_DEFAULT: number
                XML_DTD_ATTRIBUTE_REDEFINED: number
                XML_DTD_ATTRIBUTE_VALUE: number
                XML_DTD_CONTENT_ERROR: number
                XML_DTD_CONTENT_MODEL: number
                XML_DTD_CONTENT_NOT_DETERMINIST: number
                XML_DTD_DIFFERENT_PREFIX: number
                XML_DTD_DUP_TOKEN: number
                XML_DTD_ELEM_DEFAULT_NAMESPACE: number
                XML_DTD_ELEM_NAMESPACE: number
                XML_DTD_ELEM_REDEFINED: number
                XML_DTD_EMPTY_NOTATION: number
                XML_DTD_ENTITY_TYPE: number
                XML_DTD_ID_FIXED: number
                XML_DTD_ID_REDEFINED: number
                XML_DTD_ID_SUBSET: number
                XML_DTD_INVALID_CHILD: number
                XML_DTD_INVALID_DEFAULT: number
                XML_DTD_LOAD_ERROR: number
                XML_DTD_MISSING_ATTRIBUTE: number
                XML_DTD_MIXED_CORRUPT: number
                XML_DTD_MULTIPLE_ID: number
                XML_DTD_NODE: number
                XML_DTD_NOTATION_REDEFINED: number
                XML_DTD_NOTATION_VALUE: number
                XML_DTD_NOT_EMPTY: number
                XML_DTD_NOT_PCDATA: number
                XML_DTD_NOT_STANDALONE: number
                XML_DTD_NO_DOC: number
                XML_DTD_NO_DTD: number
                XML_DTD_NO_ELEM_NAME: number
                XML_DTD_NO_PREFIX: number
                XML_DTD_NO_ROOT: number
                XML_DTD_ROOT_NAME: number
                XML_DTD_STANDALONE_DEFAULTED: number
                XML_DTD_STANDALONE_WHITE_SPACE: number
                XML_DTD_UNKNOWN_ATTRIBUTE: number
                XML_DTD_UNKNOWN_ELEM: number
                XML_DTD_UNKNOWN_ENTITY: number
                XML_DTD_UNKNOWN_ID: number
                XML_DTD_UNKNOWN_NOTATION: number
                XML_DTD_XMLID_TYPE: number
                XML_DTD_XMLID_VALUE: number
                XML_ELEMENT_CONTENT_ELEMENT: number
                XML_ELEMENT_CONTENT_MULT: number
                XML_ELEMENT_CONTENT_ONCE: number
                XML_ELEMENT_CONTENT_OPT: number
                XML_ELEMENT_CONTENT_OR: number
                XML_ELEMENT_CONTENT_PCDATA: number
                XML_ELEMENT_CONTENT_PLUS: number
                XML_ELEMENT_CONTENT_SEQ: number
                XML_ELEMENT_DECL: number
                XML_ELEMENT_NODE: number
                XML_ELEMENT_TYPE_ANY: number
                XML_ELEMENT_TYPE_ELEMENT: number
                XML_ELEMENT_TYPE_EMPTY: number
                XML_ELEMENT_TYPE_MIXED: number
                XML_ELEMENT_TYPE_UNDEFINED: number
                XML_ENTITY_DECL: number
                XML_ENTITY_NODE: number
                XML_ENTITY_REF_NODE: number
                XML_ERR_ATTLIST_NOT_FINISHED: number
                XML_ERR_ATTLIST_NOT_STARTED: number
                XML_ERR_ATTRIBUTE_NOT_FINISHED: number
                XML_ERR_ATTRIBUTE_NOT_STARTED: number
                XML_ERR_ATTRIBUTE_REDEFINED: number
                XML_ERR_ATTRIBUTE_WITHOUT_VALUE: number
                XML_ERR_CDATA_NOT_FINISHED: number
                XML_ERR_CHARREF_AT_EOF: number
                XML_ERR_CHARREF_IN_DTD: number
                XML_ERR_CHARREF_IN_EPILOG: number
                XML_ERR_CHARREF_IN_PROLOG: number
                XML_ERR_COMMENT_NOT_FINISHED: number
                XML_ERR_CONDSEC_INVALID: number
                XML_ERR_CONDSEC_INVALID_KEYWORD: number
                XML_ERR_CONDSEC_NOT_FINISHED: number
                XML_ERR_CONDSEC_NOT_STARTED: number
                XML_ERR_DOCTYPE_NOT_FINISHED: number
                XML_ERR_DOCUMENT_EMPTY: number
                XML_ERR_DOCUMENT_END: number
                XML_ERR_DOCUMENT_START: number
                XML_ERR_ELEMCONTENT_NOT_FINISHED: number
                XML_ERR_ELEMCONTENT_NOT_STARTED: number
                XML_ERR_ENCODING_NAME: number
                XML_ERR_ENTITYREF_AT_EOF: number
                XML_ERR_ENTITYREF_IN_DTD: number
                XML_ERR_ENTITYREF_IN_EPILOG: number
                XML_ERR_ENTITYREF_IN_PROLOG: number
                XML_ERR_ENTITYREF_NO_NAME: number
                XML_ERR_ENTITYREF_SEMICOL_MISSING: number
                XML_ERR_ENTITY_BOUNDARY: number
                XML_ERR_ENTITY_CHAR_ERROR: number
                XML_ERR_ENTITY_IS_EXTERNAL: number
                XML_ERR_ENTITY_IS_PARAMETER: number
                XML_ERR_ENTITY_LOOP: number
                XML_ERR_ENTITY_NOT_FINISHED: number
                XML_ERR_ENTITY_NOT_STARTED: number
                XML_ERR_ENTITY_PE_INTERNAL: number
                XML_ERR_ENTITY_PROCESSING: number
                XML_ERR_EQUAL_REQUIRED: number
                XML_ERR_ERROR: number
                XML_ERR_EXTRA_CONTENT: number
                XML_ERR_EXT_ENTITY_STANDALONE: number
                XML_ERR_EXT_SUBSET_NOT_FINISHED: number
                XML_ERR_FATAL: number
                XML_ERR_GT_REQUIRED: number
                XML_ERR_HYPHEN_IN_COMMENT: number
                XML_ERR_INTERNAL_ERROR: number
                XML_ERR_INVALID_CHAR: number
                XML_ERR_INVALID_CHARREF: number
                XML_ERR_INVALID_DEC_CHARREF: number
                XML_ERR_INVALID_ENCODING: number
                XML_ERR_INVALID_HEX_CHARREF: number
                XML_ERR_INVALID_URI: number
                XML_ERR_LITERAL_NOT_FINISHED: number
                XML_ERR_LITERAL_NOT_STARTED: number
                XML_ERR_LTSLASH_REQUIRED: number
                XML_ERR_LT_IN_ATTRIBUTE: number
                XML_ERR_LT_REQUIRED: number
                XML_ERR_MISPLACED_CDATA_END: number
                XML_ERR_MISSING_ENCODING: number
                XML_ERR_MIXED_NOT_FINISHED: number
                XML_ERR_MIXED_NOT_STARTED: number
                XML_ERR_NAME_REQUIRED: number
                XML_ERR_NAME_TOO_LONG: number
                XML_ERR_NMTOKEN_REQUIRED: number
                XML_ERR_NONE: number
                XML_ERR_NOTATION_NOT_FINISHED: number
                XML_ERR_NOTATION_NOT_STARTED: number
                XML_ERR_NOTATION_PROCESSING: number
                XML_ERR_NOT_STANDALONE: number
                XML_ERR_NOT_WELL_BALANCED: number
                XML_ERR_NO_DTD: number
                XML_ERR_NO_MEMORY: number
                XML_ERR_NS_DECL_ERROR: number
                XML_ERR_OK: number
                XML_ERR_PCDATA_REQUIRED: number
                XML_ERR_PEREF_AT_EOF: number
                XML_ERR_PEREF_IN_EPILOG: number
                XML_ERR_PEREF_IN_INT_SUBSET: number
                XML_ERR_PEREF_IN_PROLOG: number
                XML_ERR_PEREF_NO_NAME: number
                XML_ERR_PEREF_SEMICOL_MISSING: number
                XML_ERR_PI_NOT_FINISHED: number
                XML_ERR_PI_NOT_STARTED: number
                XML_ERR_PUBID_REQUIRED: number
                XML_ERR_RESERVED_XML_NAME: number
                XML_ERR_SEPARATOR_REQUIRED: number
                XML_ERR_SPACE_REQUIRED: number
                XML_ERR_STANDALONE_VALUE: number
                XML_ERR_STRING_NOT_CLOSED: number
                XML_ERR_STRING_NOT_STARTED: number
                XML_ERR_TAG_NAME_MISMATCH: number
                XML_ERR_TAG_NOT_FINISHED: number
                XML_ERR_UNDECLARED_ENTITY: number
                XML_ERR_UNKNOWN_ENCODING: number
                XML_ERR_UNKNOWN_VERSION: number
                XML_ERR_UNPARSED_ENTITY: number
                XML_ERR_UNSUPPORTED_ENCODING: number
                XML_ERR_URI_FRAGMENT: number
                XML_ERR_URI_REQUIRED: number
                XML_ERR_USER_STOP: number
                XML_ERR_VALUE_REQUIRED: number
                XML_ERR_VERSION_MISMATCH: number
                XML_ERR_VERSION_MISSING: number
                XML_ERR_WARNING: number
                XML_ERR_XMLDECL_NOT_FINISHED: number
                XML_ERR_XMLDECL_NOT_STARTED: number
                XML_EXP_ATOM: number
                XML_EXP_COUNT: number
                XML_EXP_EMPTY: number
                XML_EXP_FORBID: number
                XML_EXP_OR: number
                XML_EXP_SEQ: number
                XML_EXTERNAL_GENERAL_PARSED_ENTITY: number
                XML_EXTERNAL_GENERAL_UNPARSED_ENTITY: number
                XML_EXTERNAL_PARAMETER_ENTITY: number
                XML_FROM_BUFFER: number
                XML_FROM_C14N: number
                XML_FROM_CATALOG: number
                XML_FROM_CHECK: number
                XML_FROM_DATATYPE: number
                XML_FROM_DTD: number
                XML_FROM_FTP: number
                XML_FROM_HTML: number
                XML_FROM_HTTP: number
                XML_FROM_I18N: number
                XML_FROM_IO: number
                XML_FROM_MEMORY: number
                XML_FROM_MODULE: number
                XML_FROM_NAMESPACE: number
                XML_FROM_NONE: number
                XML_FROM_OUTPUT: number
                XML_FROM_PARSER: number
                XML_FROM_REGEXP: number
                XML_FROM_RELAXNGP: number
                XML_FROM_RELAXNGV: number
                XML_FROM_SCHEMASP: number
                XML_FROM_SCHEMASV: number
                XML_FROM_SCHEMATRONV: number
                XML_FROM_TREE: number
                XML_FROM_URI: number
                XML_FROM_VALID: number
                XML_FROM_WRITER: number
                XML_FROM_XINCLUDE: number
                XML_FROM_XPATH: number
                XML_FROM_XPOINTER: number
                XML_FROM_XSLT: number
                XML_FTP_ACCNT: number
                XML_FTP_EPSV_ANSWER: number
                XML_FTP_PASV_ANSWER: number
                XML_FTP_URL_SYNTAX: number
                XML_HTML_DOCUMENT_NODE: number
                XML_HTML_STRUCURE_ERROR: number
                XML_HTML_UNKNOWN_TAG: number
                XML_HTTP_UNKNOWN_HOST: number
                XML_HTTP_URL_SYNTAX: number
                XML_HTTP_USE_IP: number
                XML_I18N_CONV_FAILED: number
                XML_I18N_EXCESS_HANDLER: number
                XML_I18N_NO_HANDLER: number
                XML_I18N_NO_NAME: number
                XML_I18N_NO_OUTPUT: number
                XML_INTERNAL_GENERAL_ENTITY: number
                XML_INTERNAL_PARAMETER_ENTITY: number
                XML_INTERNAL_PREDEFINED_ENTITY: number
                XML_IO_BUFFER_FULL: number
                XML_IO_EACCES: number
                XML_IO_EADDRINUSE: number
                XML_IO_EAFNOSUPPORT: number
                XML_IO_EAGAIN: number
                XML_IO_EALREADY: number
                XML_IO_EBADF: number
                XML_IO_EBADMSG: number
                XML_IO_EBUSY: number
                XML_IO_ECANCELED: number
                XML_IO_ECHILD: number
                XML_IO_ECONNREFUSED: number
                XML_IO_EDEADLK: number
                XML_IO_EDOM: number
                XML_IO_EEXIST: number
                XML_IO_EFAULT: number
                XML_IO_EFBIG: number
                XML_IO_EINPROGRESS: number
                XML_IO_EINTR: number
                XML_IO_EINVAL: number
                XML_IO_EIO: number
                XML_IO_EISCONN: number
                XML_IO_EISDIR: number
                XML_IO_EMFILE: number
                XML_IO_EMLINK: number
                XML_IO_EMSGSIZE: number
                XML_IO_ENAMETOOLONG: number
                XML_IO_ENCODER: number
                XML_IO_ENETUNREACH: number
                XML_IO_ENFILE: number
                XML_IO_ENODEV: number
                XML_IO_ENOENT: number
                XML_IO_ENOEXEC: number
                XML_IO_ENOLCK: number
                XML_IO_ENOMEM: number
                XML_IO_ENOSPC: number
                XML_IO_ENOSYS: number
                XML_IO_ENOTDIR: number
                XML_IO_ENOTEMPTY: number
                XML_IO_ENOTSOCK: number
                XML_IO_ENOTSUP: number
                XML_IO_ENOTTY: number
                XML_IO_ENXIO: number
                XML_IO_EPERM: number
                XML_IO_EPIPE: number
                XML_IO_ERANGE: number
                XML_IO_EROFS: number
                XML_IO_ESPIPE: number
                XML_IO_ESRCH: number
                XML_IO_ETIMEDOUT: number
                XML_IO_EXDEV: number
                XML_IO_FLUSH: number
                XML_IO_LOAD_ERROR: number
                XML_IO_NETWORK_ATTEMPT: number
                XML_IO_NO_INPUT: number
                XML_IO_UNKNOWN: number
                XML_IO_WRITE: number
                XML_MAX_DICTIONARY_LIMIT: number
                XML_MAX_LOOKUP_LIMIT: number
                XML_MAX_NAMELEN: number
                XML_MAX_NAME_LENGTH: number
                XML_MAX_TEXT_LENGTH: number
                XML_MODULE_CLOSE: number
                XML_MODULE_LAZY: number
                XML_MODULE_LOCAL: number
                XML_MODULE_OPEN: number
                XML_NAMESPACE_DECL: number
                XML_NOTATION_NODE: number
                XML_NS_ERR_ATTRIBUTE_REDEFINED: number
                XML_NS_ERR_COLON: number
                XML_NS_ERR_EMPTY: number
                XML_NS_ERR_QNAME: number
                XML_NS_ERR_UNDEFINED_NAMESPACE: number
                XML_NS_ERR_XML_NAMESPACE: number
                XML_PARSER_ATTRIBUTE_VALUE: number
                XML_PARSER_CDATA_SECTION: number
                XML_PARSER_COMMENT: number
                XML_PARSER_CONTENT: number
                XML_PARSER_DTD: number
                XML_PARSER_END_TAG: number
                XML_PARSER_ENTITY_DECL: number
                XML_PARSER_ENTITY_VALUE: number
                XML_PARSER_EOF: number
                XML_PARSER_EPILOG: number
                XML_PARSER_IGNORE: number
                XML_PARSER_MISC: number
                XML_PARSER_PI: number
                XML_PARSER_PROLOG: number
                XML_PARSER_PUBLIC_LITERAL: number
                XML_PARSER_SEVERITY_ERROR: number
                XML_PARSER_SEVERITY_VALIDITY_ERROR: number
                XML_PARSER_SEVERITY_VALIDITY_WARNING: number
                XML_PARSER_SEVERITY_WARNING: number
                XML_PARSER_START: number
                XML_PARSER_START_TAG: number
                XML_PARSER_SYSTEM_LITERAL: number
                XML_PARSE_BIG_LINES: number
                XML_PARSE_COMPACT: number
                XML_PARSE_DOM: number
                XML_PARSE_DTDATTR: number
                XML_PARSE_DTDLOAD: number
                XML_PARSE_DTDVALID: number
                XML_PARSE_HUGE: number
                XML_PARSE_IGNORE_ENC: number
                XML_PARSE_NOBASEFIX: number
                XML_PARSE_NOBLANKS: number
                XML_PARSE_NOCDATA: number
                XML_PARSE_NODICT: number
                XML_PARSE_NOENT: number
                XML_PARSE_NOERROR: number
                XML_PARSE_NONET: number
                XML_PARSE_NOWARNING: number
                XML_PARSE_NOXINCNODE: number
                XML_PARSE_NSCLEAN: number
                XML_PARSE_OLD10: number
                XML_PARSE_OLDSAX: number
                XML_PARSE_PEDANTIC: number
                XML_PARSE_PUSH_DOM: number
                XML_PARSE_PUSH_SAX: number
                XML_PARSE_READER: number
                XML_PARSE_RECOVER: number
                XML_PARSE_SAX: number
                XML_PARSE_SAX1: number
                XML_PARSE_UNKNOWN: number
                XML_PARSE_XINCLUDE: number
                XML_PATTERN_DEFAULT: number
                XML_PATTERN_XPATH: number
                XML_PATTERN_XSFIELD: number
                XML_PATTERN_XSSEL: number
                XML_PI_NODE: number
                XML_REGEXP_COMPILE_ERROR: number
                XML_RELAXNGP_CRNG: number
                XML_RELAXNGP_FREE_DOC: number
                XML_RELAXNGP_NONE: number
                XML_RELAXNG_ERR_ATTREXTRANS: number
                XML_RELAXNG_ERR_ATTRNAME: number
                XML_RELAXNG_ERR_ATTRNONS: number
                XML_RELAXNG_ERR_ATTRVALID: number
                XML_RELAXNG_ERR_ATTRWRONGNS: number
                XML_RELAXNG_ERR_CONTENTVALID: number
                XML_RELAXNG_ERR_DATAELEM: number
                XML_RELAXNG_ERR_DATATYPE: number
                XML_RELAXNG_ERR_DUPID: number
                XML_RELAXNG_ERR_ELEMEXTRANS: number
                XML_RELAXNG_ERR_ELEMNAME: number
                XML_RELAXNG_ERR_ELEMNONS: number
                XML_RELAXNG_ERR_ELEMNOTEMPTY: number
                XML_RELAXNG_ERR_ELEMWRONG: number
                XML_RELAXNG_ERR_ELEMWRONGNS: number
                XML_RELAXNG_ERR_EXTRACONTENT: number
                XML_RELAXNG_ERR_EXTRADATA: number
                XML_RELAXNG_ERR_INTEREXTRA: number
                XML_RELAXNG_ERR_INTERNAL: number
                XML_RELAXNG_ERR_INTERNODATA: number
                XML_RELAXNG_ERR_INTERSEQ: number
                XML_RELAXNG_ERR_INVALIDATTR: number
                XML_RELAXNG_ERR_LACKDATA: number
                XML_RELAXNG_ERR_LIST: number
                XML_RELAXNG_ERR_LISTELEM: number
                XML_RELAXNG_ERR_LISTEMPTY: number
                XML_RELAXNG_ERR_LISTEXTRA: number
                XML_RELAXNG_ERR_MEMORY: number
                XML_RELAXNG_ERR_NODEFINE: number
                XML_RELAXNG_ERR_NOELEM: number
                XML_RELAXNG_ERR_NOGRAMMAR: number
                XML_RELAXNG_ERR_NOSTATE: number
                XML_RELAXNG_ERR_NOTELEM: number
                XML_RELAXNG_ERR_TEXTWRONG: number
                XML_RELAXNG_ERR_TYPE: number
                XML_RELAXNG_ERR_TYPECMP: number
                XML_RELAXNG_ERR_TYPEVAL: number
                XML_RELAXNG_ERR_VALELEM: number
                XML_RELAXNG_ERR_VALUE: number
                XML_RELAXNG_OK: number
                XML_RNGP_ANYNAME_ATTR_ANCESTOR: number
                XML_RNGP_ATTRIBUTE_CHILDREN: number
                XML_RNGP_ATTRIBUTE_CONTENT: number
                XML_RNGP_ATTRIBUTE_EMPTY: number
                XML_RNGP_ATTRIBUTE_NOOP: number
                XML_RNGP_ATTR_CONFLICT: number
                XML_RNGP_CHOICE_CONTENT: number
                XML_RNGP_CHOICE_EMPTY: number
                XML_RNGP_CREATE_FAILURE: number
                XML_RNGP_DATA_CONTENT: number
                XML_RNGP_DEFINE_CREATE_FAILED: number
                XML_RNGP_DEFINE_EMPTY: number
                XML_RNGP_DEFINE_MISSING: number
                XML_RNGP_DEFINE_NAME_MISSING: number
                XML_RNGP_DEF_CHOICE_AND_INTERLEAVE: number
                XML_RNGP_ELEMENT_CONTENT: number
                XML_RNGP_ELEMENT_EMPTY: number
                XML_RNGP_ELEMENT_NAME: number
                XML_RNGP_ELEMENT_NO_CONTENT: number
                XML_RNGP_ELEM_CONTENT_EMPTY: number
                XML_RNGP_ELEM_CONTENT_ERROR: number
                XML_RNGP_ELEM_TEXT_CONFLICT: number
                XML_RNGP_EMPTY: number
                XML_RNGP_EMPTY_CONSTRUCT: number
                XML_RNGP_EMPTY_CONTENT: number
                XML_RNGP_EMPTY_NOT_EMPTY: number
                XML_RNGP_ERROR_TYPE_LIB: number
                XML_RNGP_EXCEPT_EMPTY: number
                XML_RNGP_EXCEPT_MISSING: number
                XML_RNGP_EXCEPT_MULTIPLE: number
                XML_RNGP_EXCEPT_NO_CONTENT: number
                XML_RNGP_EXTERNALREF_EMTPY: number
                XML_RNGP_EXTERNALREF_RECURSE: number
                XML_RNGP_EXTERNAL_REF_FAILURE: number
                XML_RNGP_FORBIDDEN_ATTRIBUTE: number
                XML_RNGP_FOREIGN_ELEMENT: number
                XML_RNGP_GRAMMAR_CONTENT: number
                XML_RNGP_GRAMMAR_EMPTY: number
                XML_RNGP_GRAMMAR_MISSING: number
                XML_RNGP_GRAMMAR_NO_START: number
                XML_RNGP_GROUP_ATTR_CONFLICT: number
                XML_RNGP_HREF_ERROR: number
                XML_RNGP_INCLUDE_EMPTY: number
                XML_RNGP_INCLUDE_FAILURE: number
                XML_RNGP_INCLUDE_RECURSE: number
                XML_RNGP_INTERLEAVE_ADD: number
                XML_RNGP_INTERLEAVE_CREATE_FAILED: number
                XML_RNGP_INTERLEAVE_EMPTY: number
                XML_RNGP_INTERLEAVE_NO_CONTENT: number
                XML_RNGP_INVALID_DEFINE_NAME: number
                XML_RNGP_INVALID_URI: number
                XML_RNGP_INVALID_VALUE: number
                XML_RNGP_MISSING_HREF: number
                XML_RNGP_NAME_MISSING: number
                XML_RNGP_NEED_COMBINE: number
                XML_RNGP_NOTALLOWED_NOT_EMPTY: number
                XML_RNGP_NSNAME_ATTR_ANCESTOR: number
                XML_RNGP_NSNAME_NO_NS: number
                XML_RNGP_PARAM_FORBIDDEN: number
                XML_RNGP_PARAM_NAME_MISSING: number
                XML_RNGP_PARENTREF_CREATE_FAILED: number
                XML_RNGP_PARENTREF_NAME_INVALID: number
                XML_RNGP_PARENTREF_NOT_EMPTY: number
                XML_RNGP_PARENTREF_NO_NAME: number
                XML_RNGP_PARENTREF_NO_PARENT: number
                XML_RNGP_PARSE_ERROR: number
                XML_RNGP_PAT_ANYNAME_EXCEPT_ANYNAME: number
                XML_RNGP_PAT_ATTR_ATTR: number
                XML_RNGP_PAT_ATTR_ELEM: number
                XML_RNGP_PAT_DATA_EXCEPT_ATTR: number
                XML_RNGP_PAT_DATA_EXCEPT_ELEM: number
                XML_RNGP_PAT_DATA_EXCEPT_EMPTY: number
                XML_RNGP_PAT_DATA_EXCEPT_GROUP: number
                XML_RNGP_PAT_DATA_EXCEPT_INTERLEAVE: number
                XML_RNGP_PAT_DATA_EXCEPT_LIST: number
                XML_RNGP_PAT_DATA_EXCEPT_ONEMORE: number
                XML_RNGP_PAT_DATA_EXCEPT_REF: number
                XML_RNGP_PAT_DATA_EXCEPT_TEXT: number
                XML_RNGP_PAT_LIST_ATTR: number
                XML_RNGP_PAT_LIST_ELEM: number
                XML_RNGP_PAT_LIST_INTERLEAVE: number
                XML_RNGP_PAT_LIST_LIST: number
                XML_RNGP_PAT_LIST_REF: number
                XML_RNGP_PAT_LIST_TEXT: number
                XML_RNGP_PAT_NSNAME_EXCEPT_ANYNAME: number
                XML_RNGP_PAT_NSNAME_EXCEPT_NSNAME: number
                XML_RNGP_PAT_ONEMORE_GROUP_ATTR: number
                XML_RNGP_PAT_ONEMORE_INTERLEAVE_ATTR: number
                XML_RNGP_PAT_START_ATTR: number
                XML_RNGP_PAT_START_DATA: number
                XML_RNGP_PAT_START_EMPTY: number
                XML_RNGP_PAT_START_GROUP: number
                XML_RNGP_PAT_START_INTERLEAVE: number
                XML_RNGP_PAT_START_LIST: number
                XML_RNGP_PAT_START_ONEMORE: number
                XML_RNGP_PAT_START_TEXT: number
                XML_RNGP_PAT_START_VALUE: number
                XML_RNGP_PREFIX_UNDEFINED: number
                XML_RNGP_REF_CREATE_FAILED: number
                XML_RNGP_REF_CYCLE: number
                XML_RNGP_REF_NAME_INVALID: number
                XML_RNGP_REF_NOT_EMPTY: number
                XML_RNGP_REF_NO_DEF: number
                XML_RNGP_REF_NO_NAME: number
                XML_RNGP_START_CHOICE_AND_INTERLEAVE: number
                XML_RNGP_START_CONTENT: number
                XML_RNGP_START_EMPTY: number
                XML_RNGP_START_MISSING: number
                XML_RNGP_TEXT_EXPECTED: number
                XML_RNGP_TEXT_HAS_CHILD: number
                XML_RNGP_TYPE_MISSING: number
                XML_RNGP_TYPE_NOT_FOUND: number
                XML_RNGP_TYPE_VALUE: number
                XML_RNGP_UNKNOWN_ATTRIBUTE: number
                XML_RNGP_UNKNOWN_COMBINE: number
                XML_RNGP_UNKNOWN_CONSTRUCT: number
                XML_RNGP_UNKNOWN_TYPE_LIB: number
                XML_RNGP_URI_FRAGMENT: number
                XML_RNGP_URI_NOT_ABSOLUTE: number
                XML_RNGP_VALUE_EMPTY: number
                XML_RNGP_VALUE_NO_CONTENT: number
                XML_RNGP_XMLNS_NAME: number
                XML_RNGP_XML_NS: number
                XML_SAVE_AS_HTML: number
                XML_SAVE_AS_XML: number
                XML_SAVE_CHAR_INVALID: number
                XML_SAVE_FORMAT: number
                XML_SAVE_NOT_UTF8: number
                XML_SAVE_NO_DECL: number
                XML_SAVE_NO_DOCTYPE: number
                XML_SAVE_NO_EMPTY: number
                XML_SAVE_NO_XHTML: number
                XML_SAVE_UNKNOWN_ENCODING: number
                XML_SAVE_WSNONSIG: number
                XML_SAVE_XHTML: number
                XML_SAX2_MAGIC: number
                XML_SCHEMAP_AG_PROPS_CORRECT: number
                XML_SCHEMAP_ATTRFORMDEFAULT_VALUE: number
                XML_SCHEMAP_ATTRGRP_NONAME_NOREF: number
                XML_SCHEMAP_ATTR_NONAME_NOREF: number
                XML_SCHEMAP_AU_PROPS_CORRECT: number
                XML_SCHEMAP_AU_PROPS_CORRECT_2: number
                XML_SCHEMAP_A_PROPS_CORRECT_2: number
                XML_SCHEMAP_A_PROPS_CORRECT_3: number
                XML_SCHEMAP_COMPLEXTYPE_NONAME_NOREF: number
                XML_SCHEMAP_COS_ALL_LIMITED: number
                XML_SCHEMAP_COS_CT_EXTENDS_1_1: number
                XML_SCHEMAP_COS_CT_EXTENDS_1_2: number
                XML_SCHEMAP_COS_CT_EXTENDS_1_3: number
                XML_SCHEMAP_COS_ST_DERIVED_OK_2_1: number
                XML_SCHEMAP_COS_ST_DERIVED_OK_2_2: number
                XML_SCHEMAP_COS_ST_RESTRICTS_1_1: number
                XML_SCHEMAP_COS_ST_RESTRICTS_1_2: number
                XML_SCHEMAP_COS_ST_RESTRICTS_1_3_1: number
                XML_SCHEMAP_COS_ST_RESTRICTS_1_3_2: number
                XML_SCHEMAP_COS_ST_RESTRICTS_2_1: number
                XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_1: number
                XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_2: number
                XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_1: number
                XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_2: number
                XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_3: number
                XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_4: number
                XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_5: number
                XML_SCHEMAP_COS_ST_RESTRICTS_3_1: number
                XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1: number
                XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1_2: number
                XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_1: number
                XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_2: number
                XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_3: number
                XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_4: number
                XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_5: number
                XML_SCHEMAP_COS_VALID_DEFAULT_1: number
                XML_SCHEMAP_COS_VALID_DEFAULT_2_1: number
                XML_SCHEMAP_COS_VALID_DEFAULT_2_2_1: number
                XML_SCHEMAP_COS_VALID_DEFAULT_2_2_2: number
                XML_SCHEMAP_CT_PROPS_CORRECT_1: number
                XML_SCHEMAP_CT_PROPS_CORRECT_2: number
                XML_SCHEMAP_CT_PROPS_CORRECT_3: number
                XML_SCHEMAP_CT_PROPS_CORRECT_4: number
                XML_SCHEMAP_CT_PROPS_CORRECT_5: number
                XML_SCHEMAP_CVC_SIMPLE_TYPE: number
                XML_SCHEMAP_C_PROPS_CORRECT: number
                XML_SCHEMAP_DEF_AND_PREFIX: number
                XML_SCHEMAP_DERIVATION_OK_RESTRICTION_1: number
                XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_1: number
                XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_2: number
                XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_3: number
                XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_2: number
                XML_SCHEMAP_DERIVATION_OK_RESTRICTION_3: number
                XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_1: number
                XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_2: number
                XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_3: number
                XML_SCHEMAP_ELEMFORMDEFAULT_VALUE: number
                XML_SCHEMAP_ELEM_DEFAULT_FIXED: number
                XML_SCHEMAP_ELEM_NONAME_NOREF: number
                XML_SCHEMAP_EXTENSION_NO_BASE: number
                XML_SCHEMAP_E_PROPS_CORRECT_2: number
                XML_SCHEMAP_E_PROPS_CORRECT_3: number
                XML_SCHEMAP_E_PROPS_CORRECT_4: number
                XML_SCHEMAP_E_PROPS_CORRECT_5: number
                XML_SCHEMAP_E_PROPS_CORRECT_6: number
                XML_SCHEMAP_FACET_NO_VALUE: number
                XML_SCHEMAP_FAILED_BUILD_IMPORT: number
                XML_SCHEMAP_FAILED_LOAD: number
                XML_SCHEMAP_FAILED_PARSE: number
                XML_SCHEMAP_GROUP_NONAME_NOREF: number
                XML_SCHEMAP_IMPORT_NAMESPACE_NOT_URI: number
                XML_SCHEMAP_IMPORT_REDEFINE_NSNAME: number
                XML_SCHEMAP_IMPORT_SCHEMA_NOT_URI: number
                XML_SCHEMAP_INCLUDE_SCHEMA_NOT_URI: number
                XML_SCHEMAP_INCLUDE_SCHEMA_NO_URI: number
                XML_SCHEMAP_INTERNAL: number
                XML_SCHEMAP_INTERSECTION_NOT_EXPRESSIBLE: number
                XML_SCHEMAP_INVALID_ATTR_COMBINATION: number
                XML_SCHEMAP_INVALID_ATTR_INLINE_COMBINATION: number
                XML_SCHEMAP_INVALID_ATTR_NAME: number
                XML_SCHEMAP_INVALID_ATTR_USE: number
                XML_SCHEMAP_INVALID_BOOLEAN: number
                XML_SCHEMAP_INVALID_ENUM: number
                XML_SCHEMAP_INVALID_FACET: number
                XML_SCHEMAP_INVALID_FACET_VALUE: number
                XML_SCHEMAP_INVALID_MAXOCCURS: number
                XML_SCHEMAP_INVALID_MINOCCURS: number
                XML_SCHEMAP_INVALID_REF_AND_SUBTYPE: number
                XML_SCHEMAP_INVALID_WHITE_SPACE: number
                XML_SCHEMAP_MG_PROPS_CORRECT_1: number
                XML_SCHEMAP_MG_PROPS_CORRECT_2: number
                XML_SCHEMAP_MISSING_SIMPLETYPE_CHILD: number
                XML_SCHEMAP_NOATTR_NOREF: number
                XML_SCHEMAP_NOROOT: number
                XML_SCHEMAP_NOTATION_NO_NAME: number
                XML_SCHEMAP_NOTHING_TO_PARSE: number
                XML_SCHEMAP_NOTYPE_NOREF: number
                XML_SCHEMAP_NOT_DETERMINISTIC: number
                XML_SCHEMAP_NOT_SCHEMA: number
                XML_SCHEMAP_NO_XMLNS: number
                XML_SCHEMAP_NO_XSI: number
                XML_SCHEMAP_PREFIX_UNDEFINED: number
                XML_SCHEMAP_P_PROPS_CORRECT_1: number
                XML_SCHEMAP_P_PROPS_CORRECT_2_1: number
                XML_SCHEMAP_P_PROPS_CORRECT_2_2: number
                XML_SCHEMAP_RECURSIVE: number
                XML_SCHEMAP_REDEFINED_ATTR: number
                XML_SCHEMAP_REDEFINED_ATTRGROUP: number
                XML_SCHEMAP_REDEFINED_ELEMENT: number
                XML_SCHEMAP_REDEFINED_GROUP: number
                XML_SCHEMAP_REDEFINED_NOTATION: number
                XML_SCHEMAP_REDEFINED_TYPE: number
                XML_SCHEMAP_REF_AND_CONTENT: number
                XML_SCHEMAP_REF_AND_SUBTYPE: number
                XML_SCHEMAP_REGEXP_INVALID: number
                XML_SCHEMAP_RESTRICTION_NONAME_NOREF: number
                XML_SCHEMAP_S4S_ATTR_INVALID_VALUE: number
                XML_SCHEMAP_S4S_ATTR_MISSING: number
                XML_SCHEMAP_S4S_ATTR_NOT_ALLOWED: number
                XML_SCHEMAP_S4S_ELEM_MISSING: number
                XML_SCHEMAP_S4S_ELEM_NOT_ALLOWED: number
                XML_SCHEMAP_SIMPLETYPE_NONAME: number
                XML_SCHEMAP_SRC_ATTRIBUTE_1: number
                XML_SCHEMAP_SRC_ATTRIBUTE_2: number
                XML_SCHEMAP_SRC_ATTRIBUTE_3_1: number
                XML_SCHEMAP_SRC_ATTRIBUTE_3_2: number
                XML_SCHEMAP_SRC_ATTRIBUTE_4: number
                XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_1: number
                XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_2: number
                XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_3: number
                XML_SCHEMAP_SRC_CT_1: number
                XML_SCHEMAP_SRC_ELEMENT_1: number
                XML_SCHEMAP_SRC_ELEMENT_2_1: number
                XML_SCHEMAP_SRC_ELEMENT_2_2: number
                XML_SCHEMAP_SRC_ELEMENT_3: number
                XML_SCHEMAP_SRC_IMPORT: number
                XML_SCHEMAP_SRC_IMPORT_1_1: number
                XML_SCHEMAP_SRC_IMPORT_1_2: number
                XML_SCHEMAP_SRC_IMPORT_2: number
                XML_SCHEMAP_SRC_IMPORT_2_1: number
                XML_SCHEMAP_SRC_IMPORT_2_2: number
                XML_SCHEMAP_SRC_IMPORT_3_1: number
                XML_SCHEMAP_SRC_IMPORT_3_2: number
                XML_SCHEMAP_SRC_INCLUDE: number
                XML_SCHEMAP_SRC_LIST_ITEMTYPE_OR_SIMPLETYPE: number
                XML_SCHEMAP_SRC_REDEFINE: number
                XML_SCHEMAP_SRC_RESOLVE: number
                XML_SCHEMAP_SRC_RESTRICTION_BASE_OR_SIMPLETYPE: number
                XML_SCHEMAP_SRC_SIMPLE_TYPE_1: number
                XML_SCHEMAP_SRC_SIMPLE_TYPE_2: number
                XML_SCHEMAP_SRC_SIMPLE_TYPE_3: number
                XML_SCHEMAP_SRC_SIMPLE_TYPE_4: number
                XML_SCHEMAP_SRC_UNION_MEMBERTYPES_OR_SIMPLETYPES: number
                XML_SCHEMAP_ST_PROPS_CORRECT_1: number
                XML_SCHEMAP_ST_PROPS_CORRECT_2: number
                XML_SCHEMAP_ST_PROPS_CORRECT_3: number
                XML_SCHEMAP_SUPERNUMEROUS_LIST_ITEM_TYPE: number
                XML_SCHEMAP_TYPE_AND_SUBTYPE: number
                XML_SCHEMAP_UNION_NOT_EXPRESSIBLE: number
                XML_SCHEMAP_UNKNOWN_ALL_CHILD: number
                XML_SCHEMAP_UNKNOWN_ANYATTRIBUTE_CHILD: number
                XML_SCHEMAP_UNKNOWN_ATTRGRP_CHILD: number
                XML_SCHEMAP_UNKNOWN_ATTRIBUTE_GROUP: number
                XML_SCHEMAP_UNKNOWN_ATTR_CHILD: number
                XML_SCHEMAP_UNKNOWN_BASE_TYPE: number
                XML_SCHEMAP_UNKNOWN_CHOICE_CHILD: number
                XML_SCHEMAP_UNKNOWN_COMPLEXCONTENT_CHILD: number
                XML_SCHEMAP_UNKNOWN_COMPLEXTYPE_CHILD: number
                XML_SCHEMAP_UNKNOWN_ELEM_CHILD: number
                XML_SCHEMAP_UNKNOWN_EXTENSION_CHILD: number
                XML_SCHEMAP_UNKNOWN_FACET_CHILD: number
                XML_SCHEMAP_UNKNOWN_FACET_TYPE: number
                XML_SCHEMAP_UNKNOWN_GROUP_CHILD: number
                XML_SCHEMAP_UNKNOWN_IMPORT_CHILD: number
                XML_SCHEMAP_UNKNOWN_INCLUDE_CHILD: number
                XML_SCHEMAP_UNKNOWN_LIST_CHILD: number
                XML_SCHEMAP_UNKNOWN_MEMBER_TYPE: number
                XML_SCHEMAP_UNKNOWN_NOTATION_CHILD: number
                XML_SCHEMAP_UNKNOWN_PREFIX: number
                XML_SCHEMAP_UNKNOWN_PROCESSCONTENT_CHILD: number
                XML_SCHEMAP_UNKNOWN_REF: number
                XML_SCHEMAP_UNKNOWN_RESTRICTION_CHILD: number
                XML_SCHEMAP_UNKNOWN_SCHEMAS_CHILD: number
                XML_SCHEMAP_UNKNOWN_SEQUENCE_CHILD: number
                XML_SCHEMAP_UNKNOWN_SIMPLECONTENT_CHILD: number
                XML_SCHEMAP_UNKNOWN_SIMPLETYPE_CHILD: number
                XML_SCHEMAP_UNKNOWN_TYPE: number
                XML_SCHEMAP_UNKNOWN_UNION_CHILD: number
                XML_SCHEMAP_WARN_ATTR_POINTLESS_PROH: number
                XML_SCHEMAP_WARN_ATTR_REDECL_PROH: number
                XML_SCHEMAP_WARN_SKIP_SCHEMA: number
                XML_SCHEMAP_WARN_UNLOCATED_SCHEMA: number
                XML_SCHEMAP_WILDCARD_INVALID_NS_MEMBER: number
                XML_SCHEMAS_ANYATTR_LAX: number
                XML_SCHEMAS_ANYATTR_SKIP: number
                XML_SCHEMAS_ANYATTR_STRICT: number
                XML_SCHEMAS_ANYSIMPLETYPE: number
                XML_SCHEMAS_ANYTYPE: number
                XML_SCHEMAS_ANYURI: number
                XML_SCHEMAS_ANY_LAX: number
                XML_SCHEMAS_ANY_SKIP: number
                XML_SCHEMAS_ANY_STRICT: number
                XML_SCHEMAS_ATTRGROUP_GLOBAL: number
                XML_SCHEMAS_ATTRGROUP_HAS_REFS: number
                XML_SCHEMAS_ATTRGROUP_MARKED: number
                XML_SCHEMAS_ATTRGROUP_REDEFINED: number
                XML_SCHEMAS_ATTRGROUP_WILDCARD_BUILDED: number
                XML_SCHEMAS_ATTR_FIXED: number
                XML_SCHEMAS_ATTR_GLOBAL: number
                XML_SCHEMAS_ATTR_INTERNAL_RESOLVED: number
                XML_SCHEMAS_ATTR_NSDEFAULT: number
                XML_SCHEMAS_ATTR_USE_OPTIONAL: number
                XML_SCHEMAS_ATTR_USE_PROHIBITED: number
                XML_SCHEMAS_ATTR_USE_REQUIRED: number
                XML_SCHEMAS_BASE64BINARY: number
                XML_SCHEMAS_BLOCK_DEFAULT_EXTENSION: number
                XML_SCHEMAS_BLOCK_DEFAULT_RESTRICTION: number
                XML_SCHEMAS_BLOCK_DEFAULT_SUBSTITUTION: number
                XML_SCHEMAS_BOOLEAN: number
                XML_SCHEMAS_BYTE: number
                XML_SCHEMAS_DATE: number
                XML_SCHEMAS_DATETIME: number
                XML_SCHEMAS_DECIMAL: number
                XML_SCHEMAS_DOUBLE: number
                XML_SCHEMAS_DURATION: number
                XML_SCHEMAS_ELEM_ABSTRACT: number
                XML_SCHEMAS_ELEM_BLOCK_ABSENT: number
                XML_SCHEMAS_ELEM_BLOCK_EXTENSION: number
                XML_SCHEMAS_ELEM_BLOCK_RESTRICTION: number
                XML_SCHEMAS_ELEM_BLOCK_SUBSTITUTION: number
                XML_SCHEMAS_ELEM_CIRCULAR: number
                XML_SCHEMAS_ELEM_DEFAULT: number
                XML_SCHEMAS_ELEM_FINAL_ABSENT: number
                XML_SCHEMAS_ELEM_FINAL_EXTENSION: number
                XML_SCHEMAS_ELEM_FINAL_RESTRICTION: number
                XML_SCHEMAS_ELEM_FIXED: number
                XML_SCHEMAS_ELEM_GLOBAL: number
                XML_SCHEMAS_ELEM_INTERNAL_CHECKED: number
                XML_SCHEMAS_ELEM_INTERNAL_RESOLVED: number
                XML_SCHEMAS_ELEM_NILLABLE: number
                XML_SCHEMAS_ELEM_NSDEFAULT: number
                XML_SCHEMAS_ELEM_REF: number
                XML_SCHEMAS_ELEM_SUBST_GROUP_HEAD: number
                XML_SCHEMAS_ELEM_TOPLEVEL: number
                XML_SCHEMAS_ENTITIES: number
                XML_SCHEMAS_ENTITY: number
                XML_SCHEMAS_ERR_: number
                XML_SCHEMAS_ERR_ATTRINVALID: number
                XML_SCHEMAS_ERR_ATTRUNKNOWN: number
                XML_SCHEMAS_ERR_CONSTRUCT: number
                XML_SCHEMAS_ERR_ELEMCONT: number
                XML_SCHEMAS_ERR_EXTRACONTENT: number
                XML_SCHEMAS_ERR_FACET: number
                XML_SCHEMAS_ERR_HAVEDEFAULT: number
                XML_SCHEMAS_ERR_INTERNAL: number
                XML_SCHEMAS_ERR_INVALIDATTR: number
                XML_SCHEMAS_ERR_INVALIDELEM: number
                XML_SCHEMAS_ERR_ISABSTRACT: number
                XML_SCHEMAS_ERR_MISSING: number
                XML_SCHEMAS_ERR_NOROLLBACK: number
                XML_SCHEMAS_ERR_NOROOT: number
                XML_SCHEMAS_ERR_NOTDETERMINIST: number
                XML_SCHEMAS_ERR_NOTEMPTY: number
                XML_SCHEMAS_ERR_NOTNILLABLE: number
                XML_SCHEMAS_ERR_NOTSIMPLE: number
                XML_SCHEMAS_ERR_NOTTOPLEVEL: number
                XML_SCHEMAS_ERR_NOTYPE: number
                XML_SCHEMAS_ERR_OK: number
                XML_SCHEMAS_ERR_UNDECLAREDELEM: number
                XML_SCHEMAS_ERR_VALUE: number
                XML_SCHEMAS_ERR_WRONGELEM: number
                XML_SCHEMAS_ERR_XXX: number
                XML_SCHEMAS_FACET_COLLAPSE: number
                XML_SCHEMAS_FACET_PRESERVE: number
                XML_SCHEMAS_FACET_REPLACE: number
                XML_SCHEMAS_FACET_UNKNOWN: number
                XML_SCHEMAS_FINAL_DEFAULT_EXTENSION: number
                XML_SCHEMAS_FINAL_DEFAULT_LIST: number
                XML_SCHEMAS_FINAL_DEFAULT_RESTRICTION: number
                XML_SCHEMAS_FINAL_DEFAULT_UNION: number
                XML_SCHEMAS_FLOAT: number
                XML_SCHEMAS_GDAY: number
                XML_SCHEMAS_GMONTH: number
                XML_SCHEMAS_GMONTHDAY: number
                XML_SCHEMAS_GYEAR: number
                XML_SCHEMAS_GYEARMONTH: number
                XML_SCHEMAS_HEXBINARY: number
                XML_SCHEMAS_ID: number
                XML_SCHEMAS_IDREF: number
                XML_SCHEMAS_IDREFS: number
                XML_SCHEMAS_INCLUDING_CONVERT_NS: number
                XML_SCHEMAS_INT: number
                XML_SCHEMAS_INTEGER: number
                XML_SCHEMAS_LANGUAGE: number
                XML_SCHEMAS_LONG: number
                XML_SCHEMAS_NAME: number
                XML_SCHEMAS_NCNAME: number
                XML_SCHEMAS_NINTEGER: number
                XML_SCHEMAS_NMTOKEN: number
                XML_SCHEMAS_NMTOKENS: number
                XML_SCHEMAS_NNINTEGER: number
                XML_SCHEMAS_NORMSTRING: number
                XML_SCHEMAS_NOTATION: number
                XML_SCHEMAS_NPINTEGER: number
                XML_SCHEMAS_PINTEGER: number
                XML_SCHEMAS_QNAME: number
                XML_SCHEMAS_QUALIF_ATTR: number
                XML_SCHEMAS_QUALIF_ELEM: number
                XML_SCHEMAS_SHORT: number
                XML_SCHEMAS_STRING: number
                XML_SCHEMAS_TIME: number
                XML_SCHEMAS_TOKEN: number
                XML_SCHEMAS_TYPE_ABSTRACT: number
                XML_SCHEMAS_TYPE_BLOCK_DEFAULT: number
                XML_SCHEMAS_TYPE_BLOCK_EXTENSION: number
                XML_SCHEMAS_TYPE_BLOCK_RESTRICTION: number
                XML_SCHEMAS_TYPE_BUILTIN_PRIMITIVE: number
                XML_SCHEMAS_TYPE_DERIVATION_METHOD_EXTENSION: number
                XML_SCHEMAS_TYPE_DERIVATION_METHOD_RESTRICTION: number
                XML_SCHEMAS_TYPE_FACETSNEEDVALUE: number
                XML_SCHEMAS_TYPE_FINAL_DEFAULT: number
                XML_SCHEMAS_TYPE_FINAL_EXTENSION: number
                XML_SCHEMAS_TYPE_FINAL_LIST: number
                XML_SCHEMAS_TYPE_FINAL_RESTRICTION: number
                XML_SCHEMAS_TYPE_FINAL_UNION: number
                XML_SCHEMAS_TYPE_FIXUP_1: number
                XML_SCHEMAS_TYPE_GLOBAL: number
                XML_SCHEMAS_TYPE_HAS_FACETS: number
                XML_SCHEMAS_TYPE_INTERNAL_INVALID: number
                XML_SCHEMAS_TYPE_INTERNAL_RESOLVED: number
                XML_SCHEMAS_TYPE_MARKED: number
                XML_SCHEMAS_TYPE_MIXED: number
                XML_SCHEMAS_TYPE_NORMVALUENEEDED: number
                XML_SCHEMAS_TYPE_OWNED_ATTR_WILDCARD: number
                XML_SCHEMAS_TYPE_REDEFINED: number
                XML_SCHEMAS_TYPE_VARIETY_ABSENT: number
                XML_SCHEMAS_TYPE_VARIETY_ATOMIC: number
                XML_SCHEMAS_TYPE_VARIETY_LIST: number
                XML_SCHEMAS_TYPE_VARIETY_UNION: number
                XML_SCHEMAS_TYPE_WHITESPACE_COLLAPSE: number
                XML_SCHEMAS_TYPE_WHITESPACE_PRESERVE: number
                XML_SCHEMAS_TYPE_WHITESPACE_REPLACE: number
                XML_SCHEMAS_UBYTE: number
                XML_SCHEMAS_UINT: number
                XML_SCHEMAS_ULONG: number
                XML_SCHEMAS_UNKNOWN: number
                XML_SCHEMAS_USHORT: number
                XML_SCHEMAS_WILDCARD_COMPLETE: number
                XML_SCHEMATRONV_ASSERT: number
                XML_SCHEMATRONV_REPORT: number
                XML_SCHEMAV_ATTRINVALID: number
                XML_SCHEMAV_ATTRUNKNOWN: number
                XML_SCHEMAV_CONSTRUCT: number
                XML_SCHEMAV_CVC_ATTRIBUTE_1: number
                XML_SCHEMAV_CVC_ATTRIBUTE_2: number
                XML_SCHEMAV_CVC_ATTRIBUTE_3: number
                XML_SCHEMAV_CVC_ATTRIBUTE_4: number
                XML_SCHEMAV_CVC_AU: number
                XML_SCHEMAV_CVC_COMPLEX_TYPE_1: number
                XML_SCHEMAV_CVC_COMPLEX_TYPE_2_1: number
                XML_SCHEMAV_CVC_COMPLEX_TYPE_2_2: number
                XML_SCHEMAV_CVC_COMPLEX_TYPE_2_3: number
                XML_SCHEMAV_CVC_COMPLEX_TYPE_2_4: number
                XML_SCHEMAV_CVC_COMPLEX_TYPE_3_1: number
                XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_1: number
                XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_2: number
                XML_SCHEMAV_CVC_COMPLEX_TYPE_4: number
                XML_SCHEMAV_CVC_COMPLEX_TYPE_5_1: number
                XML_SCHEMAV_CVC_COMPLEX_TYPE_5_2: number
                XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_1: number
                XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2: number
                XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_3: number
                XML_SCHEMAV_CVC_ELT_1: number
                XML_SCHEMAV_CVC_ELT_2: number
                XML_SCHEMAV_CVC_ELT_3_1: number
                XML_SCHEMAV_CVC_ELT_3_2_1: number
                XML_SCHEMAV_CVC_ELT_3_2_2: number
                XML_SCHEMAV_CVC_ELT_4_1: number
                XML_SCHEMAV_CVC_ELT_4_2: number
                XML_SCHEMAV_CVC_ELT_4_3: number
                XML_SCHEMAV_CVC_ELT_5_1_1: number
                XML_SCHEMAV_CVC_ELT_5_1_2: number
                XML_SCHEMAV_CVC_ELT_5_2_1: number
                XML_SCHEMAV_CVC_ELT_5_2_2_1: number
                XML_SCHEMAV_CVC_ELT_5_2_2_2_1: number
                XML_SCHEMAV_CVC_ELT_5_2_2_2_2: number
                XML_SCHEMAV_CVC_ELT_6: number
                XML_SCHEMAV_CVC_ELT_7: number
                XML_SCHEMAV_CVC_ENUMERATION_VALID: number
                XML_SCHEMAV_CVC_FACET_VALID: number
                XML_SCHEMAV_CVC_FRACTIONDIGITS_VALID: number
                XML_SCHEMAV_CVC_IDC: number
                XML_SCHEMAV_CVC_LENGTH_VALID: number
                XML_SCHEMAV_CVC_MAXEXCLUSIVE_VALID: number
                XML_SCHEMAV_CVC_MAXINCLUSIVE_VALID: number
                XML_SCHEMAV_CVC_MAXLENGTH_VALID: number
                XML_SCHEMAV_CVC_MINEXCLUSIVE_VALID: number
                XML_SCHEMAV_CVC_MININCLUSIVE_VALID: number
                XML_SCHEMAV_CVC_MINLENGTH_VALID: number
                XML_SCHEMAV_CVC_PATTERN_VALID: number
                XML_SCHEMAV_CVC_TOTALDIGITS_VALID: number
                XML_SCHEMAV_CVC_TYPE_1: number
                XML_SCHEMAV_CVC_TYPE_2: number
                XML_SCHEMAV_CVC_TYPE_3_1_1: number
                XML_SCHEMAV_CVC_TYPE_3_1_2: number
                XML_SCHEMAV_CVC_WILDCARD: number
                XML_SCHEMAV_DOCUMENT_ELEMENT_MISSING: number
                XML_SCHEMAV_ELEMCONT: number
                XML_SCHEMAV_ELEMENT_CONTENT: number
                XML_SCHEMAV_EXTRACONTENT: number
                XML_SCHEMAV_FACET: number
                XML_SCHEMAV_HAVEDEFAULT: number
                XML_SCHEMAV_INTERNAL: number
                XML_SCHEMAV_INVALIDATTR: number
                XML_SCHEMAV_INVALIDELEM: number
                XML_SCHEMAV_ISABSTRACT: number
                XML_SCHEMAV_MISC: number
                XML_SCHEMAV_MISSING: number
                XML_SCHEMAV_NOROLLBACK: number
                XML_SCHEMAV_NOROOT: number
                XML_SCHEMAV_NOTDETERMINIST: number
                XML_SCHEMAV_NOTEMPTY: number
                XML_SCHEMAV_NOTNILLABLE: number
                XML_SCHEMAV_NOTSIMPLE: number
                XML_SCHEMAV_NOTTOPLEVEL: number
                XML_SCHEMAV_NOTYPE: number
                XML_SCHEMAV_UNDECLAREDELEM: number
                XML_SCHEMAV_VALUE: number
                XML_SCHEMAV_WRONGELEM: number
                XML_SCHEMA_CONTENT_ANY: number
                XML_SCHEMA_CONTENT_BASIC: number
                XML_SCHEMA_CONTENT_ELEMENTS: number
                XML_SCHEMA_CONTENT_EMPTY: number
                XML_SCHEMA_CONTENT_MIXED: number
                XML_SCHEMA_CONTENT_MIXED_OR_ELEMENTS: number
                XML_SCHEMA_CONTENT_SIMPLE: number
                XML_SCHEMA_CONTENT_UNKNOWN: number
                XML_SCHEMA_EXTRA_ATTR_USE_PROHIB: number
                XML_SCHEMA_EXTRA_QNAMEREF: number
                XML_SCHEMA_FACET_ENUMERATION: number
                XML_SCHEMA_FACET_FRACTIONDIGITS: number
                XML_SCHEMA_FACET_LENGTH: number
                XML_SCHEMA_FACET_MAXEXCLUSIVE: number
                XML_SCHEMA_FACET_MAXINCLUSIVE: number
                XML_SCHEMA_FACET_MAXLENGTH: number
                XML_SCHEMA_FACET_MINEXCLUSIVE: number
                XML_SCHEMA_FACET_MININCLUSIVE: number
                XML_SCHEMA_FACET_MINLENGTH: number
                XML_SCHEMA_FACET_PATTERN: number
                XML_SCHEMA_FACET_TOTALDIGITS: number
                XML_SCHEMA_FACET_WHITESPACE: number
                XML_SCHEMA_TYPE_ALL: number
                XML_SCHEMA_TYPE_ANY: number
                XML_SCHEMA_TYPE_ANY_ATTRIBUTE: number
                XML_SCHEMA_TYPE_ATTRIBUTE: number
                XML_SCHEMA_TYPE_ATTRIBUTEGROUP: number
                XML_SCHEMA_TYPE_ATTRIBUTE_USE: number
                XML_SCHEMA_TYPE_BASIC: number
                XML_SCHEMA_TYPE_CHOICE: number
                XML_SCHEMA_TYPE_COMPLEX: number
                XML_SCHEMA_TYPE_COMPLEX_CONTENT: number
                XML_SCHEMA_TYPE_ELEMENT: number
                XML_SCHEMA_TYPE_EXTENSION: number
                XML_SCHEMA_TYPE_FACET: number
                XML_SCHEMA_TYPE_GROUP: number
                XML_SCHEMA_TYPE_IDC_KEY: number
                XML_SCHEMA_TYPE_IDC_KEYREF: number
                XML_SCHEMA_TYPE_IDC_UNIQUE: number
                XML_SCHEMA_TYPE_LIST: number
                XML_SCHEMA_TYPE_NOTATION: number
                XML_SCHEMA_TYPE_PARTICLE: number
                XML_SCHEMA_TYPE_RESTRICTION: number
                XML_SCHEMA_TYPE_SEQUENCE: number
                XML_SCHEMA_TYPE_SIMPLE: number
                XML_SCHEMA_TYPE_SIMPLE_CONTENT: number
                XML_SCHEMA_TYPE_UNION: number
                XML_SCHEMA_TYPE_UR: number
                XML_SCHEMA_VAL_VC_I_CREATE: number
                XML_SCHEMA_WHITESPACE_COLLAPSE: number
                XML_SCHEMA_WHITESPACE_PRESERVE: number
                XML_SCHEMA_WHITESPACE_REPLACE: number
                XML_SCHEMA_WHITESPACE_UNKNOWN: number
                XML_SKIP_IDS: number
                XML_SUBSTITUTE_BOTH: number
                XML_SUBSTITUTE_NONE: number
                XML_SUBSTITUTE_PEREF: number
                XML_SUBSTITUTE_REF: number
                XML_TEXT_NODE: number
                XML_TREE_INVALID_DEC: number
                XML_TREE_INVALID_HEX: number
                XML_TREE_NOT_UTF8: number
                XML_TREE_UNTERMINATED_ENTITY: number
                XML_WAR_CATALOG_PI: number
                XML_WAR_ENTITY_REDEFINED: number
                XML_WAR_LANG_VALUE: number
                XML_WAR_NS_COLUMN: number
                XML_WAR_NS_URI: number
                XML_WAR_NS_URI_RELATIVE: number
                XML_WAR_SPACE_VALUE: number
                XML_WAR_UNDECLARED_ENTITY: number
                XML_WAR_UNKNOWN_VERSION: number
                XML_WITH_AUTOMATA: number
                XML_WITH_C14N: number
                XML_WITH_CATALOG: number
                XML_WITH_DEBUG: number
                XML_WITH_DEBUG_MEM: number
                XML_WITH_DEBUG_RUN: number
                XML_WITH_EXPR: number
                XML_WITH_FTP: number
                XML_WITH_HTML: number
                XML_WITH_HTTP: number
                XML_WITH_ICONV: number
                XML_WITH_ICU: number
                XML_WITH_ISO8859X: number
                XML_WITH_LEGACY: number
                XML_WITH_LZMA: number
                XML_WITH_MODULES: number
                XML_WITH_NONE: number
                XML_WITH_OUTPUT: number
                XML_WITH_PATTERN: number
                XML_WITH_PUSH: number
                XML_WITH_READER: number
                XML_WITH_REGEXP: number
                XML_WITH_SAX1: number
                XML_WITH_SCHEMAS: number
                XML_WITH_SCHEMATRON: number
                XML_WITH_THREAD: number
                XML_WITH_TREE: number
                XML_WITH_UNICODE: number
                XML_WITH_VALID: number
                XML_WITH_WRITER: number
                XML_WITH_XINCLUDE: number
                XML_WITH_XPATH: number
                XML_WITH_XPTR: number
                XML_WITH_ZLIB: number
                XML_XINCLUDE_BUILD_FAILED: number
                XML_XINCLUDE_DEPRECATED_NS: number
                XML_XINCLUDE_END: number
                XML_XINCLUDE_ENTITY_DEF_MISMATCH: number
                XML_XINCLUDE_FALLBACKS_IN_INCLUDE: number
                XML_XINCLUDE_FALLBACK_NOT_IN_INCLUDE: number
                XML_XINCLUDE_FRAGMENT_ID: number
                XML_XINCLUDE_HREF_URI: number
                XML_XINCLUDE_INCLUDE_IN_INCLUDE: number
                XML_XINCLUDE_INVALID_CHAR: number
                XML_XINCLUDE_MULTIPLE_ROOT: number
                XML_XINCLUDE_NO_FALLBACK: number
                XML_XINCLUDE_NO_HREF: number
                XML_XINCLUDE_PARSE_VALUE: number
                XML_XINCLUDE_RECURSION: number
                XML_XINCLUDE_START: number
                XML_XINCLUDE_TEXT_DOCUMENT: number
                XML_XINCLUDE_TEXT_FRAGMENT: number
                XML_XINCLUDE_UNKNOWN_ENCODING: number
                XML_XINCLUDE_XPTR_FAILED: number
                XML_XINCLUDE_XPTR_RESULT: number
                XML_XPATH_CHECKNS: number
                XML_XPATH_ENCODING_ERROR: number
                XML_XPATH_EXPRESSION_OK: number
                XML_XPATH_EXPR_ERROR: number
                XML_XPATH_INVALID_ARITY: number
                XML_XPATH_INVALID_CHAR_ERROR: number
                XML_XPATH_INVALID_CTXT_POSITION: number
                XML_XPATH_INVALID_CTXT_SIZE: number
                XML_XPATH_INVALID_OPERAND: number
                XML_XPATH_INVALID_PREDICATE_ERROR: number
                XML_XPATH_INVALID_TYPE: number
                XML_XPATH_MEMORY_ERROR: number
                XML_XPATH_NOVAR: number
                XML_XPATH_NUMBER_ERROR: number
                XML_XPATH_START_LITERAL_ERROR: number
                XML_XPATH_UNCLOSED_ERROR: number
                XML_XPATH_UNDEF_PREFIX_ERROR: number
                XML_XPATH_UNDEF_VARIABLE_ERROR: number
                XML_XPATH_UNFINISHED_LITERAL_ERROR: number
                XML_XPATH_UNKNOWN_FUNC_ERROR: number
                XML_XPATH_VARIABLE_REF_ERROR: number
                XML_XPTR_CHILDSEQ_START: number
                XML_XPTR_EVAL_FAILED: number
                XML_XPTR_EXTRA_OBJECTS: number
                XML_XPTR_RESOURCE_ERROR: number
                XML_XPTR_SUB_RESOURCE_ERROR: number
                XML_XPTR_SYNTAX_ERROR: number
                XML_XPTR_UNKNOWN_SCHEME: number
                XPATH_BOOLEAN: number
                XPATH_ENCODING_ERROR: number
                XPATH_EXPRESSION_OK: number
                XPATH_EXPR_ERROR: number
                XPATH_FORBID_VARIABLE_ERROR: number
                XPATH_INVALID_ARITY: number
                XPATH_INVALID_CHAR_ERROR: number
                XPATH_INVALID_CTXT: number
                XPATH_INVALID_CTXT_POSITION: number
                XPATH_INVALID_CTXT_SIZE: number
                XPATH_INVALID_OPERAND: number
                XPATH_INVALID_PREDICATE_ERROR: number
                XPATH_INVALID_TYPE: number
                XPATH_LOCATIONSET: number
                XPATH_MEMORY_ERROR: number
                XPATH_NODESET: number
                XPATH_NUMBER: number
                XPATH_NUMBER_ERROR: number
                XPATH_OP_LIMIT_EXCEEDED: number
                XPATH_POINT: number
                XPATH_RANGE: number
                XPATH_RECURSION_LIMIT_EXCEEDED: number
                XPATH_STACK_ERROR: number
                XPATH_START_LITERAL_ERROR: number
                XPATH_STRING: number
                XPATH_UNCLOSED_ERROR: number
                XPATH_UNDEFINED: number
                XPATH_UNDEF_PREFIX_ERROR: number
                XPATH_UNDEF_VARIABLE_ERROR: number
                XPATH_UNFINISHED_LITERAL_ERROR: number
                XPATH_UNKNOWN_FUNC_ERROR: number
                XPATH_USERS: number
                XPATH_VARIABLE_REF_ERROR: number
                XPATH_XSLT_TREE: number
                XPTR_RESOURCE_ERROR: number
                XPTR_SUB_RESOURCE_ERROR: number
                XPTR_SYNTAX_ERROR: number
    
        /* Variables */
    
        
                docbDefaultSAXHandler: xmlSAXHandlerV1
                emptyExp: xmlExpNodePtr
                forbiddenExp: xmlExpNodePtr
                htmlDefaultSAXHandler: xmlSAXHandlerV1
                libxmljs_debug: number
                oldXMLWDcompatibility: number
                xmlBufferAllocScheme: xmlBufferAllocationScheme
                xmlDefaultBufferSize: number
                xmlDefaultSAXHandler: xmlSAXHandlerV1
                xmlDefaultSAXLocator: xmlSAXLocator
                xmlDeregisterNodeDefaultValue: xmlDeregisterNodeFunc
                xmlDoValidityCheckingDefaultValue: number
                xmlFree: xmlFreeFunc
                xmlGenericError: xmlGenericErrorFunc
                xmlGenericErrorContext: any
                xmlGetWarningsDefaultValue: number
                xmlIndentTreeOutput: number
                xmlIsBaseCharGroup: xmlChRangeGroup
                xmlIsCharGroup: xmlChRangeGroup
                xmlIsCombiningGroup: xmlChRangeGroup
                xmlIsDigitGroup: xmlChRangeGroup
                xmlIsExtenderGroup: xmlChRangeGroup
                xmlIsIdeographicGroup: xmlChRangeGroup
                xmlIsPubidChar_tab: string
                xmlKeepBlanksDefaultValue: number
                xmlLastError: xmlError
                xmlLineNumbersDefaultValue: number
                xmlLoadExtDtdDefaultValue: number
                xmlMalloc: xmlMallocFunc
                xmlMallocAtomic: xmlMallocFunc
                xmlMemStrdup: xmlStrdupFunc
                xmlOutputBufferCreateFilenameValue: xmlOutputBufferCreateFilenameFunc
                xmlParserDebugEntities: number
                xmlParserInputBufferCreateFilenameValue: xmlParserInputBufferCreateFilenameFunc
                xmlParserMaxDepth: number
                xmlParserVersion: string
                xmlPedanticParserDefaultValue: number
                xmlRealloc: xmlReallocFunc
                xmlRegisterNodeDefaultValue: xmlRegisterNodeFunc
                xmlSaveNoEmptyTags: number
                xmlStringComment: string
                xmlStringText: string
                xmlStringTextNoenc: string
                xmlStructuredError: xmlStructuredErrorFunc
                xmlStructuredErrorContext: any
                xmlSubstituteEntitiesDefaultValue: number
                xmlTreeIndentString: string
                xmlXPathNAN: number
                xmlXPathNINF: number
                xmlXPathPINF: number
    
        /* Functions */
    
        withStructuredErrors: {
            <T>(callback: StructuredErrorCallback): T
        }
        
        withGenericErrors: {
            <T>(callback: GenericErrorCallback): T
        }

        
                    UTF8ToHtml: {
                        /** 
                        * @param out {string | Buffer | null} p.unsigned char
                        * @param outlen {number} p.int
                        * @param in {string | Buffer | null} p.q(const).unsigned char
                        * @param inlen {number} p.int
                        * @returns {number} int
                        */
                        (out: string | Buffer | null, outlen: number, inArg: string | Buffer | null, inlen: number): number
                    }
                
                    UTF8Toisolat1: {
                        /** 
                        * @param out {string | Buffer | null} p.unsigned char
                        * @param outlen {number} p.int
                        * @param in {string | Buffer | null} p.q(const).unsigned char
                        * @param inlen {number} p.int
                        * @returns {number} int
                        */
                        (out: string | Buffer | null, outlen: number, inArg: string | Buffer | null, inlen: number): number
                    }
                
                    __docbDefaultSAXHandler: {
                        /** 
                        * @returns {xmlSAXHandlerV1} xmlSAXHandlerV1
                        */
                        (): xmlSAXHandlerV1
                    }
                
                    __htmlDefaultSAXHandler: {
                        /** 
                        * @returns {xmlSAXHandlerV1} xmlSAXHandlerV1
                        */
                        (): xmlSAXHandlerV1
                    }
                
                    __oldXMLWDcompatibility: {
                        /** 
                        * @returns {number} int
                        */
                        (): number
                    }
                
                    __xmlBufferAllocScheme: {
                        /** 
                        * @returns {xmlBufferAllocationScheme} xmlBufferAllocationScheme
                        */
                        (): xmlBufferAllocationScheme
                    }
                
                    __xmlDefaultBufferSize: {
                        /** 
                        * @returns {number} int
                        */
                        (): number
                    }
                
                    __xmlDefaultSAXHandler: {
                        /** 
                        * @returns {xmlSAXHandlerV1} xmlSAXHandlerV1
                        */
                        (): xmlSAXHandlerV1
                    }
                
                    __xmlDefaultSAXLocator: {
                        /** 
                        * @returns {xmlSAXLocator} xmlSAXLocator
                        */
                        (): xmlSAXLocator
                    }
                
                    __xmlDeregisterNodeDefaultValue: {
                        /** 
                        * @returns {xmlDeregisterNodeFunc} xmlDeregisterNodeFunc
                        */
                        (): xmlDeregisterNodeFunc
                    }
                
                    __xmlDoValidityCheckingDefaultValue: {
                        /** 
                        * @returns {number} int
                        */
                        (): number
                    }
                
                    __xmlGenericError: {
                        /** 
                        * @returns {xmlGenericErrorFunc} xmlGenericErrorFunc
                        */
                        (): xmlGenericErrorFunc
                    }
                
                    __xmlGenericErrorContext: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    __xmlGetWarningsDefaultValue: {
                        /** 
                        * @returns {number} int
                        */
                        (): number
                    }
                
                    __xmlIndentTreeOutput: {
                        /** 
                        * @returns {number} int
                        */
                        (): number
                    }
                
                    __xmlKeepBlanksDefaultValue: {
                        /** 
                        * @returns {number} int
                        */
                        (): number
                    }
                
                    __xmlLastError: {
                        /** 
                        * @returns {xmlError} xmlError
                        */
                        (): xmlError
                    }
                
                    __xmlLineNumbersDefaultValue: {
                        /** 
                        * @returns {number} int
                        */
                        (): number
                    }
                
                    __xmlLoadExtDtdDefaultValue: {
                        /** 
                        * @returns {number} int
                        */
                        (): number
                    }
                
                    __xmlOutputBufferCreateFilename: {
                        /** 
                        * @param URI {string | Buffer | null} p.q(const).char
                        * @param encoder {xmlCharEncodingHandlerPtr | null} xmlCharEncodingHandlerPtr
                        * @param compression {number} int
                        * @returns {xmlOutputBufferPtr} xmlOutputBufferPtr
                        */
                        (URI: string | Buffer | null, encoder: xmlCharEncodingHandlerPtr | null, compression: number): xmlOutputBufferPtr
                    }
                
                    __xmlOutputBufferCreateFilenameValue: {
                        /** 
                        * @returns {xmlOutputBufferCreateFilenameFunc} xmlOutputBufferCreateFilenameFunc
                        */
                        (): xmlOutputBufferCreateFilenameFunc
                    }
                
                    __xmlParserDebugEntities: {
                        /** 
                        * @returns {number} int
                        */
                        (): number
                    }
                
                    __xmlParserInputBufferCreateFilename: {
                        /** 
                        * @param URI {string | Buffer | null} p.q(const).char
                        * @param enc {xmlCharEncoding} xmlCharEncoding
                        * @returns {xmlParserInputBufferPtr} xmlParserInputBufferPtr
                        */
                        (URI: string | Buffer | null, enc: xmlCharEncoding): xmlParserInputBufferPtr
                    }
                
                    __xmlParserInputBufferCreateFilenameValue: {
                        /** 
                        * @returns {xmlParserInputBufferCreateFilenameFunc} xmlParserInputBufferCreateFilenameFunc
                        */
                        (): xmlParserInputBufferCreateFilenameFunc
                    }
                
                    __xmlParserVersion: {
                        /** 
                        * @returns {string} q(const).char
                        */
                        (): string
                    }
                
                    __xmlPedanticParserDefaultValue: {
                        /** 
                        * @returns {number} int
                        */
                        (): number
                    }
                
                    __xmlRegisterNodeDefaultValue: {
                        /** 
                        * @returns {xmlRegisterNodeFunc} xmlRegisterNodeFunc
                        */
                        (): xmlRegisterNodeFunc
                    }
                
                    __xmlSaveNoEmptyTags: {
                        /** 
                        * @returns {number} int
                        */
                        (): number
                    }
                
                    __xmlStructuredError: {
                        /** 
                        * @returns {xmlStructuredErrorFunc} xmlStructuredErrorFunc
                        */
                        (): xmlStructuredErrorFunc
                    }
                
                    __xmlStructuredErrorContext: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    __xmlSubstituteEntitiesDefaultValue: {
                        /** 
                        * @returns {number} int
                        */
                        (): number
                    }
                
                    __xmlTreeIndentString: {
                        /** 
                        * @returns {string} q(const).char
                        */
                        (): string
                    }
                
                    attribute: {
                        /** 
                        * @param ctx {any} p.void
                        * @param fullname {string | Buffer | null} p.q(const).xmlChar
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (ctx: any, fullname: string | Buffer | null, value: string | Buffer | null): any
                    }
                
                    attributeDecl: {
                        /** 
                        * @param ctx {any} p.void
                        * @param elem {string | Buffer | null} p.q(const).xmlChar
                        * @param fullname {string | Buffer | null} p.q(const).xmlChar
                        * @param type {number} int
                        * @param def {number} int
                        * @param defaultValue {string | Buffer | null} p.q(const).xmlChar
                        * @param tree {xmlEnumerationPtr | null} xmlEnumerationPtr
                        * @returns {any} void
                        */
                        (ctx: any, elem: string | Buffer | null, fullname: string | Buffer | null, type: number, def: number, defaultValue: string | Buffer | null, tree: xmlEnumerationPtr | null): any
                    }
                
                    cdataBlock: {
                        /** 
                        * @param ctx {any} p.void
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {any} void
                        */
                        (ctx: any, value: string | Buffer | null, len: number): any
                    }
                
                    characters: {
                        /** 
                        * @param ctx {any} p.void
                        * @param ch {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {any} void
                        */
                        (ctx: any, ch: string | Buffer | null, len: number): any
                    }
                
                    checkNamespace: {
                        /** 
                        * @param ctx {any} p.void
                        * @param nameSpace {string | Buffer | null} p.xmlChar
                        * @returns {number} int
                        */
                        (ctx: any, nameSpace: string | Buffer | null): number
                    }
                
                    comment: {
                        /** 
                        * @param ctx {any} p.void
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (ctx: any, value: string | Buffer | null): any
                    }
                
                    docbDefaultSAXHandlerInit: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    elementDecl: {
                        /** 
                        * @param ctx {any} p.void
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param type {number} int
                        * @param content {xmlElementContentPtr | null} xmlElementContentPtr
                        * @returns {any} void
                        */
                        (ctx: any, name: string | Buffer | null, type: number, content: xmlElementContentPtr | null): any
                    }
                
                    endDocument: {
                        /** 
                        * @param ctx {any} p.void
                        * @returns {any} void
                        */
                        (ctx: any): any
                    }
                
                    endElement: {
                        /** 
                        * @param ctx {any} p.void
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (ctx: any, name: string | Buffer | null): any
                    }
                
                    entityDecl: {
                        /** 
                        * @param ctx {any} p.void
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param type {number} int
                        * @param publicId {string | Buffer | null} p.q(const).xmlChar
                        * @param systemId {string | Buffer | null} p.q(const).xmlChar
                        * @param content {string | Buffer | null} p.xmlChar
                        * @returns {any} void
                        */
                        (ctx: any, name: string | Buffer | null, type: number, publicId: string | Buffer | null, systemId: string | Buffer | null, content: string | Buffer | null): any
                    }
                
                    externalSubset: {
                        /** 
                        * @param ctx {any} p.void
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param ExternalID {string | Buffer | null} p.q(const).xmlChar
                        * @param SystemID {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (ctx: any, name: string | Buffer | null, ExternalID: string | Buffer | null, SystemID: string | Buffer | null): any
                    }
                
                    getColumnNumber: {
                        /** 
                        * @param ctx {any} p.void
                        * @returns {number} int
                        */
                        (ctx: any): number
                    }
                
                    getEntity: {
                        /** 
                        * @param ctx {any} p.void
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlEntityPtr} xmlEntityPtr
                        */
                        (ctx: any, name: string | Buffer | null): xmlEntityPtr
                    }
                
                    getLineNumber: {
                        /** 
                        * @param ctx {any} p.void
                        * @returns {number} int
                        */
                        (ctx: any): number
                    }
                
                    getMemUsed: {
                        /** 
                        * @returns {number} int
                        */
                        (): number
                    }
                
                    getNamespace: {
                        /** 
                        * @param ctx {any} p.void
                        * @returns {(xmlNsPtr | null)} xmlNsPtr
                        */
                        (ctx: any): xmlNsPtr | null
                    }
                
                    getNodeCount: {
                        /** 
                        * @returns {number} int
                        */
                        (): number
                    }
                
                    getParameterEntity: {
                        /** 
                        * @param ctx {any} p.void
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlEntityPtr} xmlEntityPtr
                        */
                        (ctx: any, name: string | Buffer | null): xmlEntityPtr
                    }
                
                    getPublicId: {
                        /** 
                        * @param ctx {any} p.void
                        * @returns {string} q(const).xmlChar
                        */
                        (ctx: any): string
                    }
                
                    getSystemId: {
                        /** 
                        * @param ctx {any} p.void
                        * @returns {string} q(const).xmlChar
                        */
                        (ctx: any): string
                    }
                
                    getWrapCount: {
                        /** 
                        * @returns {number} int
                        */
                        (): number
                    }
                
                    globalNamespace: {
                        /** 
                        * @param ctx {any} p.void
                        * @param href {string | Buffer | null} p.q(const).xmlChar
                        * @param prefix {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (ctx: any, href: string | Buffer | null, prefix: string | Buffer | null): any
                    }
                
                    hasExternalSubset: {
                        /** 
                        * @param ctx {any} p.void
                        * @returns {number} int
                        */
                        (ctx: any): number
                    }
                
                    hasInternalSubset: {
                        /** 
                        * @param ctx {any} p.void
                        * @returns {number} int
                        */
                        (ctx: any): number
                    }
                
                    htmlAttrAllowed: {
                        /** 
                        * @param arg0 {htmlElemDescPtr | null} p.q(const).htmlElemDesc
                        * @param arg1 {string | Buffer | null} p.q(const).xmlChar
                        * @param arg2 {number} int
                        * @returns {htmlStatus} htmlStatus
                        */
                        (arg0: htmlElemDescPtr | null, arg1: string | Buffer | null, arg2: number): htmlStatus
                    }
                
                    htmlAutoCloseTag: {
                        /** 
                        * @param doc {htmlDocPtr | null} htmlDocPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param elem {htmlNodePtr | null} htmlNodePtr
                        * @returns {number} int
                        */
                        (doc: htmlDocPtr | null, name: string | Buffer | null, elem: htmlNodePtr | null): number
                    }
                
                    htmlCreateFileParserCtxt: {
                        /** 
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @returns {htmlParserCtxtPtr} htmlParserCtxtPtr
                        */
                        (filename: string | Buffer | null, encoding: string | Buffer | null): htmlParserCtxtPtr
                    }
                
                    htmlCreateMemoryParserCtxt: {
                        /** 
                        * @param buffer {string | Buffer | null} p.q(const).char
                        * @param size {number} int
                        * @returns {htmlParserCtxtPtr} htmlParserCtxtPtr
                        */
                        (buffer: string | Buffer | null, size: number): htmlParserCtxtPtr
                    }
                
                    htmlCreatePushParserCtxt: {
                        /** 
                        * @param sax {htmlSAXHandlerPtr | null} htmlSAXHandlerPtr
                        * @param user_data {any} p.void
                        * @param chunk {string | Buffer | null} p.q(const).char
                        * @param size {number} int
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @param enc {xmlCharEncoding} xmlCharEncoding
                        * @returns {htmlParserCtxtPtr} htmlParserCtxtPtr
                        */
                        (sax: htmlSAXHandlerPtr | null, user_data: any, chunk: string | Buffer | null, size: number, filename: string | Buffer | null, enc: xmlCharEncoding): htmlParserCtxtPtr
                    }
                
                    htmlCtxtReadDoc: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param cur {string | Buffer | null} p.q(const).xmlChar
                        * @param URL {string | Buffer | null} p.q(const).char
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param options {number} int
                        * @returns {(htmlDocPtr | null)} htmlDocPtr
                        */
                        (ctxt: xmlParserCtxtPtr | null, cur: string | Buffer | null, URL: string | Buffer | null, encoding: string | Buffer | null, options: number): htmlDocPtr | null
                    }
                
                    htmlCtxtReadFd: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param fd {number} int
                        * @param URL {string | Buffer | null} p.q(const).char
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param options {number} int
                        * @returns {(htmlDocPtr | null)} htmlDocPtr
                        */
                        (ctxt: xmlParserCtxtPtr | null, fd: number, URL: string | Buffer | null, encoding: string | Buffer | null, options: number): htmlDocPtr | null
                    }
                
                    htmlCtxtReadFile: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param options {number} int
                        * @returns {(htmlDocPtr | null)} htmlDocPtr
                        */
                        (ctxt: xmlParserCtxtPtr | null, filename: string | Buffer | null, encoding: string | Buffer | null, options: number): htmlDocPtr | null
                    }
                
                    htmlCtxtReadIO: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param ioread {xmlInputReadCallback} xmlInputReadCallback
                        * @param ioclose {xmlInputCloseCallback} xmlInputCloseCallback
                        * @param ioctx {any} p.void
                        * @param URL {string | Buffer | null} p.q(const).char
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param options {number} int
                        * @returns {(htmlDocPtr | null)} htmlDocPtr
                        */
                        (ctxt: xmlParserCtxtPtr | null, ioread: xmlInputReadCallback, ioclose: xmlInputCloseCallback, ioctx: any, URL: string | Buffer | null, encoding: string | Buffer | null, options: number): htmlDocPtr | null
                    }
                
                    htmlCtxtReadMemory: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param buffer {string | Buffer | null} p.q(const).char
                        * @param size {number} int
                        * @param URL {string | Buffer | null} p.q(const).char
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param options {number} int
                        * @returns {(htmlDocPtr | null)} htmlDocPtr
                        */
                        (ctxt: xmlParserCtxtPtr | null, buffer: string | Buffer | null, size: number, URL: string | Buffer | null, encoding: string | Buffer | null, options: number): htmlDocPtr | null
                    }
                
                    htmlCtxtReset: {
                        /** 
                        * @param ctxt {htmlParserCtxtPtr | null} htmlParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: htmlParserCtxtPtr | null): any
                    }
                
                    htmlCtxtUseOptions: {
                        /** 
                        * @param ctxt {htmlParserCtxtPtr | null} htmlParserCtxtPtr
                        * @param options {number} int
                        * @returns {number} int
                        */
                        (ctxt: htmlParserCtxtPtr | null, options: number): number
                    }
                
                    htmlDefaultSAXHandlerInit: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    htmlDocContentDumpFormatOutput: {
                        /** 
                        * @param buf {xmlOutputBufferPtr | null} xmlOutputBufferPtr
                        * @param cur {xmlDocPtr | null} xmlDocPtr
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param format {number} int
                        * @returns {any} void
                        */
                        (buf: xmlOutputBufferPtr | null, cur: xmlDocPtr | null, encoding: string | Buffer | null, format: number): any
                    }
                
                    htmlDocContentDumpOutput: {
                        /** 
                        * @param buf {xmlOutputBufferPtr | null} xmlOutputBufferPtr
                        * @param cur {xmlDocPtr | null} xmlDocPtr
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @returns {any} void
                        */
                        (buf: xmlOutputBufferPtr | null, cur: xmlDocPtr | null, encoding: string | Buffer | null): any
                    }
                
                    htmlDocDump: {
                        /** 
                        * @param f {undefined} p.FILE
                        * @param cur {xmlDocPtr | null} xmlDocPtr
                        * @returns {number} int
                        */
                        (f: undefined, cur: xmlDocPtr | null): number
                    }
                
                    htmlDocDumpMemory: {
                        /** 
                        * @param cur {xmlDocPtr | null} xmlDocPtr
                        * @param mem {string | Buffer | null} p.p.xmlChar
                        * @param size {number} p.int
                        * @returns {any} void
                        */
                        (cur: xmlDocPtr | null, mem: string | Buffer | null, size: number): any
                    }
                
                    htmlDocDumpMemoryFormat: {
                        /** 
                        * @param cur {xmlDocPtr | null} xmlDocPtr
                        * @param mem {string | Buffer | null} p.p.xmlChar
                        * @param size {number} p.int
                        * @param format {number} int
                        * @returns {any} void
                        */
                        (cur: xmlDocPtr | null, mem: string | Buffer | null, size: number, format: number): any
                    }
                
                    htmlElementAllowedHere: {
                        /** 
                        * @param arg0 {htmlElemDescPtr | null} p.q(const).htmlElemDesc
                        * @param arg1 {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (arg0: htmlElemDescPtr | null, arg1: string | Buffer | null): number
                    }
                
                    htmlElementStatusHere: {
                        /** 
                        * @param arg0 {htmlElemDescPtr | null} p.q(const).htmlElemDesc
                        * @param arg1 {htmlElemDescPtr | null} p.q(const).htmlElemDesc
                        * @returns {htmlStatus} htmlStatus
                        */
                        (arg0: htmlElemDescPtr | null, arg1: htmlElemDescPtr | null): htmlStatus
                    }
                
                    htmlEncodeEntities: {
                        /** 
                        * @param out {string | Buffer | null} p.unsigned char
                        * @param outlen {number} p.int
                        * @param in {string | Buffer | null} p.q(const).unsigned char
                        * @param inlen {number} p.int
                        * @param quoteChar {number} int
                        * @returns {number} int
                        */
                        (out: string | Buffer | null, outlen: number, inArg: string | Buffer | null, inlen: number, quoteChar: number): number
                    }
                
                    htmlEntityLookup: {
                        /** 
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {htmlEntityDesc} q(const).htmlEntityDesc
                        */
                        (name: string | Buffer | null): htmlEntityDesc
                    }
                
                    htmlEntityValueLookup: {
                        /** 
                        * @param value {number} unsigned int
                        * @returns {htmlEntityDesc} q(const).htmlEntityDesc
                        */
                        (value: number): htmlEntityDesc
                    }
                
                    htmlFreeParserCtxt: {
                        /** 
                        * @param ctxt {htmlParserCtxtPtr | null} htmlParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: htmlParserCtxtPtr | null): any
                    }
                
                    htmlGetMetaEncoding: {
                        /** 
                        * @param doc {htmlDocPtr | null} htmlDocPtr
                        * @returns {string} q(const).xmlChar
                        */
                        (doc: htmlDocPtr | null): string
                    }
                
                    htmlHandleOmittedElem: {
                        /** 
                        * @param val {number} int
                        * @returns {number} int
                        */
                        (val: number): number
                    }
                
                    htmlInitAutoClose: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    htmlIsAutoClosed: {
                        /** 
                        * @param doc {htmlDocPtr | null} htmlDocPtr
                        * @param elem {htmlNodePtr | null} htmlNodePtr
                        * @returns {number} int
                        */
                        (doc: htmlDocPtr | null, elem: htmlNodePtr | null): number
                    }
                
                    htmlIsBooleanAttr: {
                        /** 
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (name: string | Buffer | null): number
                    }
                
                    htmlIsScriptAttribute: {
                        /** 
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (name: string | Buffer | null): number
                    }
                
                    htmlNewDoc: {
                        /** 
                        * @param URI {string | Buffer | null} p.q(const).xmlChar
                        * @param ExternalID {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(htmlDocPtr | null)} htmlDocPtr
                        */
                        (URI: string | Buffer | null, ExternalID: string | Buffer | null): htmlDocPtr | null
                    }
                
                    htmlNewDocNoDtD: {
                        /** 
                        * @param URI {string | Buffer | null} p.q(const).xmlChar
                        * @param ExternalID {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(htmlDocPtr | null)} htmlDocPtr
                        */
                        (URI: string | Buffer | null, ExternalID: string | Buffer | null): htmlDocPtr | null
                    }
                
                    htmlNewParserCtxt: {
                        /** 
                        * @returns {htmlParserCtxtPtr} htmlParserCtxtPtr
                        */
                        (): htmlParserCtxtPtr
                    }
                
                    htmlNodeDump: {
                        /** 
                        * @param buf {xmlBufferPtr | null} xmlBufferPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @returns {number} int
                        */
                        (buf: xmlBufferPtr | null, doc: xmlDocPtr | null, cur: xmlNodePtr | null): number
                    }
                
                    htmlNodeDumpFile: {
                        /** 
                        * @param out {undefined} p.FILE
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @returns {any} void
                        */
                        (out: undefined, doc: xmlDocPtr | null, cur: xmlNodePtr | null): any
                    }
                
                    htmlNodeDumpFileFormat: {
                        /** 
                        * @param out {undefined} p.FILE
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param format {number} int
                        * @returns {number} int
                        */
                        (out: undefined, doc: xmlDocPtr | null, cur: xmlNodePtr | null, encoding: string | Buffer | null, format: number): number
                    }
                
                    htmlNodeDumpFormatOutput: {
                        /** 
                        * @param buf {xmlOutputBufferPtr | null} xmlOutputBufferPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param format {number} int
                        * @returns {any} void
                        */
                        (buf: xmlOutputBufferPtr | null, doc: xmlDocPtr | null, cur: xmlNodePtr | null, encoding: string | Buffer | null, format: number): any
                    }
                
                    htmlNodeDumpOutput: {
                        /** 
                        * @param buf {xmlOutputBufferPtr | null} xmlOutputBufferPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @returns {any} void
                        */
                        (buf: xmlOutputBufferPtr | null, doc: xmlDocPtr | null, cur: xmlNodePtr | null, encoding: string | Buffer | null): any
                    }
                
                    htmlNodeStatus: {
                        /** 
                        * @param arg0 {htmlNodePtr | null} q(const).htmlNodePtr
                        * @param arg1 {number} int
                        * @returns {htmlStatus} htmlStatus
                        */
                        (arg0: htmlNodePtr | null, arg1: number): htmlStatus
                    }
                
                    htmlParseCharRef: {
                        /** 
                        * @param ctxt {htmlParserCtxtPtr | null} htmlParserCtxtPtr
                        * @returns {number} int
                        */
                        (ctxt: htmlParserCtxtPtr | null): number
                    }
                
                    htmlParseChunk: {
                        /** 
                        * @param ctxt {htmlParserCtxtPtr | null} htmlParserCtxtPtr
                        * @param chunk {string | Buffer | null} p.q(const).char
                        * @param size {number} int
                        * @param terminate {number} int
                        * @returns {number} int
                        */
                        (ctxt: htmlParserCtxtPtr | null, chunk: string | Buffer | null, size: number, terminate: number): number
                    }
                
                    htmlParseDoc: {
                        /** 
                        * @param cur {string | Buffer | null} p.q(const).xmlChar
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @returns {(htmlDocPtr | null)} htmlDocPtr
                        */
                        (cur: string | Buffer | null, encoding: string | Buffer | null): htmlDocPtr | null
                    }
                
                    htmlParseDocument: {
                        /** 
                        * @param ctxt {htmlParserCtxtPtr | null} htmlParserCtxtPtr
                        * @returns {number} int
                        */
                        (ctxt: htmlParserCtxtPtr | null): number
                    }
                
                    htmlParseElement: {
                        /** 
                        * @param ctxt {htmlParserCtxtPtr | null} htmlParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: htmlParserCtxtPtr | null): any
                    }
                
                    htmlParseEntityRef: {
                        /** 
                        * @param ctxt {htmlParserCtxtPtr | null} htmlParserCtxtPtr
                        * @param str {string | Buffer | null} p.p.q(const).xmlChar
                        * @returns {htmlEntityDesc} q(const).htmlEntityDesc
                        */
                        (ctxt: htmlParserCtxtPtr | null, str: string | Buffer | null): htmlEntityDesc
                    }
                
                    htmlParseFile: {
                        /** 
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @returns {(htmlDocPtr | null)} htmlDocPtr
                        */
                        (filename: string | Buffer | null, encoding: string | Buffer | null): htmlDocPtr | null
                    }
                
                    htmlReadDoc: {
                        /** 
                        * @param cur {string | Buffer | null} p.q(const).xmlChar
                        * @param URL {string | Buffer | null} p.q(const).char
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param options {number} int
                        * @returns {(htmlDocPtr | null)} htmlDocPtr
                        */
                        (cur: string | Buffer | null, URL: string | Buffer | null, encoding: string | Buffer | null, options: number): htmlDocPtr | null
                    }
                
                    htmlReadFd: {
                        /** 
                        * @param fd {number} int
                        * @param URL {string | Buffer | null} p.q(const).char
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param options {number} int
                        * @returns {(htmlDocPtr | null)} htmlDocPtr
                        */
                        (fd: number, URL: string | Buffer | null, encoding: string | Buffer | null, options: number): htmlDocPtr | null
                    }
                
                    htmlReadFile: {
                        /** 
                        * @param URL {string | Buffer | null} p.q(const).char
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param options {number} int
                        * @returns {(htmlDocPtr | null)} htmlDocPtr
                        */
                        (URL: string | Buffer | null, encoding: string | Buffer | null, options: number): htmlDocPtr | null
                    }
                
                    htmlReadIO: {
                        /** 
                        * @param ioread {xmlInputReadCallback} xmlInputReadCallback
                        * @param ioclose {xmlInputCloseCallback} xmlInputCloseCallback
                        * @param ioctx {any} p.void
                        * @param URL {string | Buffer | null} p.q(const).char
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param options {number} int
                        * @returns {(htmlDocPtr | null)} htmlDocPtr
                        */
                        (ioread: xmlInputReadCallback, ioclose: xmlInputCloseCallback, ioctx: any, URL: string | Buffer | null, encoding: string | Buffer | null, options: number): htmlDocPtr | null
                    }
                
                    htmlReadMemory: {
                        /** 
                        * @param buffer {string | Buffer | null} p.q(const).char
                        * @param size {number} int
                        * @param URL {string | Buffer | null} p.q(const).char
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param options {number} int
                        * @returns {(htmlDocPtr | null)} htmlDocPtr
                        */
                        (buffer: string | Buffer | null, size: number, URL: string | Buffer | null, encoding: string | Buffer | null, options: number): htmlDocPtr | null
                    }
                
                    htmlSAXParseDoc: {
                        /** 
                        * @param cur {string | Buffer | null} p.q(const).xmlChar
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param sax {htmlSAXHandlerPtr | null} htmlSAXHandlerPtr
                        * @param userData {any} p.void
                        * @returns {(htmlDocPtr | null)} htmlDocPtr
                        */
                        (cur: string | Buffer | null, encoding: string | Buffer | null, sax: htmlSAXHandlerPtr | null, userData: any): htmlDocPtr | null
                    }
                
                    htmlSAXParseFile: {
                        /** 
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param sax {htmlSAXHandlerPtr | null} htmlSAXHandlerPtr
                        * @param userData {any} p.void
                        * @returns {(htmlDocPtr | null)} htmlDocPtr
                        */
                        (filename: string | Buffer | null, encoding: string | Buffer | null, sax: htmlSAXHandlerPtr | null, userData: any): htmlDocPtr | null
                    }
                
                    htmlSaveFile: {
                        /** 
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @param cur {xmlDocPtr | null} xmlDocPtr
                        * @returns {number} int
                        */
                        (filename: string | Buffer | null, cur: xmlDocPtr | null): number
                    }
                
                    htmlSaveFileEnc: {
                        /** 
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @param cur {xmlDocPtr | null} xmlDocPtr
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @returns {number} int
                        */
                        (filename: string | Buffer | null, cur: xmlDocPtr | null, encoding: string | Buffer | null): number
                    }
                
                    htmlSaveFileFormat: {
                        /** 
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @param cur {xmlDocPtr | null} xmlDocPtr
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param format {number} int
                        * @returns {number} int
                        */
                        (filename: string | Buffer | null, cur: xmlDocPtr | null, encoding: string | Buffer | null, format: number): number
                    }
                
                    htmlSetMetaEncoding: {
                        /** 
                        * @param doc {htmlDocPtr | null} htmlDocPtr
                        * @param encoding {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (doc: htmlDocPtr | null, encoding: string | Buffer | null): number
                    }
                
                    htmlTagLookup: {
                        /** 
                        * @param tag {string | Buffer | null} p.q(const).xmlChar
                        * @returns {htmlElemDesc} q(const).htmlElemDesc
                        */
                        (tag: string | Buffer | null): htmlElemDesc
                    }
                
                    ignorableWhitespace: {
                        /** 
                        * @param ctx {any} p.void
                        * @param ch {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {any} void
                        */
                        (ctx: any, ch: string | Buffer | null, len: number): any
                    }
                
                    initGenericErrorDefaultFunc: {
                        /** 
                        * @param handler {xmlGenericErrorFunc} p.xmlGenericErrorFunc
                        * @returns {any} void
                        */
                        (handler: xmlGenericErrorFunc): any
                    }
                
                    initdocbDefaultSAXHandler: {
                        /** 
                        * @param hdlr {xmlSAXHandlerV1} p.xmlSAXHandlerV1
                        * @returns {any} void
                        */
                        (hdlr: xmlSAXHandlerV1): any
                    }
                
                    inithtmlDefaultSAXHandler: {
                        /** 
                        * @param hdlr {xmlSAXHandlerV1} p.xmlSAXHandlerV1
                        * @returns {any} void
                        */
                        (hdlr: xmlSAXHandlerV1): any
                    }
                
                    initxmlDefaultSAXHandler: {
                        /** 
                        * @param hdlr {xmlSAXHandlerV1} p.xmlSAXHandlerV1
                        * @param warning {number} int
                        * @returns {any} void
                        */
                        (hdlr: xmlSAXHandlerV1, warning: number): any
                    }
                
                    inputPop: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {xmlParserInputPtr} xmlParserInputPtr
                        */
                        (ctxt: xmlParserCtxtPtr | null): xmlParserInputPtr
                    }
                
                    inputPush: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param value {xmlParserInputPtr | null} xmlParserInputPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlParserCtxtPtr | null, value: xmlParserInputPtr | null): number
                    }
                
                    internalSubset: {
                        /** 
                        * @param ctx {any} p.void
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param ExternalID {string | Buffer | null} p.q(const).xmlChar
                        * @param SystemID {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (ctx: any, name: string | Buffer | null, ExternalID: string | Buffer | null, SystemID: string | Buffer | null): any
                    }
                
                    isStandalone: {
                        /** 
                        * @param ctx {any} p.void
                        * @returns {number} int
                        */
                        (ctx: any): number
                    }
                
                    isolat1ToUTF8: {
                        /** 
                        * @param out {string | Buffer | null} p.unsigned char
                        * @param outlen {number} p.int
                        * @param in {string | Buffer | null} p.q(const).unsigned char
                        * @param inlen {number} p.int
                        * @returns {number} int
                        */
                        (out: string | Buffer | null, outlen: number, inArg: string | Buffer | null, inlen: number): number
                    }
                
                    namePop: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {string} q(const).xmlChar
                        */
                        (ctxt: xmlParserCtxtPtr | null): string
                    }
                
                    namePush: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (ctxt: xmlParserCtxtPtr | null, value: string | Buffer | null): number
                    }
                
                    namespaceDecl: {
                        /** 
                        * @param ctx {any} p.void
                        * @param href {string | Buffer | null} p.q(const).xmlChar
                        * @param prefix {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (ctx: any, href: string | Buffer | null, prefix: string | Buffer | null): any
                    }
                
                    nodePop: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (ctxt: xmlParserCtxtPtr | null): xmlNodePtr | null
                    }
                
                    nodePush: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param value {xmlNodePtr | null} xmlNodePtr
                        * @returns {number} int
                        */
                        (ctxt: xmlParserCtxtPtr | null, value: xmlNodePtr | null): number
                    }
                
                    notationDecl: {
                        /** 
                        * @param ctx {any} p.void
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param publicId {string | Buffer | null} p.q(const).xmlChar
                        * @param systemId {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (ctx: any, name: string | Buffer | null, publicId: string | Buffer | null, systemId: string | Buffer | null): any
                    }
                
                    processingInstruction: {
                        /** 
                        * @param ctx {any} p.void
                        * @param target {string | Buffer | null} p.q(const).xmlChar
                        * @param data {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (ctx: any, target: string | Buffer | null, data: string | Buffer | null): any
                    }
                
                    reference: {
                        /** 
                        * @param ctx {any} p.void
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (ctx: any, name: string | Buffer | null): any
                    }
                
                    resolveEntity: {
                        /** 
                        * @param ctx {any} p.void
                        * @param publicId {string | Buffer | null} p.q(const).xmlChar
                        * @param systemId {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlParserInputPtr} xmlParserInputPtr
                        */
                        (ctx: any, publicId: string | Buffer | null, systemId: string | Buffer | null): xmlParserInputPtr
                    }
                
                    setDebugDisable: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    setDebugEnable: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    setDocumentLocator: {
                        /** 
                        * @param ctx {any} p.void
                        * @param loc {xmlSAXLocatorPtr | null} xmlSAXLocatorPtr
                        * @returns {any} void
                        */
                        (ctx: any, loc: xmlSAXLocatorPtr | null): any
                    }
                
                    setNamespace: {
                        /** 
                        * @param ctx {any} p.void
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (ctx: any, name: string | Buffer | null): any
                    }
                
                    startDocument: {
                        /** 
                        * @param ctx {any} p.void
                        * @returns {any} void
                        */
                        (ctx: any): any
                    }
                
                    startElement: {
                        /** 
                        * @param ctx {any} p.void
                        * @param fullname {string | Buffer | null} p.q(const).xmlChar
                        * @param atts {string | Buffer | null} p.p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (ctx: any, fullname: string | Buffer | null, atts: string | Buffer | null): any
                    }
                
                    unparsedEntityDecl: {
                        /** 
                        * @param ctx {any} p.void
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param publicId {string | Buffer | null} p.q(const).xmlChar
                        * @param systemId {string | Buffer | null} p.q(const).xmlChar
                        * @param notationName {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (ctx: any, name: string | Buffer | null, publicId: string | Buffer | null, systemId: string | Buffer | null, notationName: string | Buffer | null): any
                    }
                
                    valuePop: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (ctxt: xmlXPathParserContextPtr | null): xmlXPathObjectPtr
                    }
                
                    valuePush: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param value {xmlXPathObjectPtr | null} xmlXPathObjectPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlXPathParserContextPtr | null, value: xmlXPathObjectPtr | null): number
                    }
                
                    xlinkGetDefaultDetect: {
                        /** 
                        * @returns {xlinkNodeDetectFunc} xlinkNodeDetectFunc
                        */
                        (): xlinkNodeDetectFunc
                    }
                
                    xlinkGetDefaultHandler: {
                        /** 
                        * @returns {xlinkHandlerPtr} xlinkHandlerPtr
                        */
                        (): xlinkHandlerPtr
                    }
                
                    xlinkIsLink: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @returns {xlinkType} xlinkType
                        */
                        (doc: xmlDocPtr | null, node: xmlNodePtr | null): xlinkType
                    }
                
                    xlinkSetDefaultDetect: {
                        /** 
                        * @param func {xlinkNodeDetectFunc} xlinkNodeDetectFunc
                        * @returns {any} void
                        */
                        (func: xlinkNodeDetectFunc): any
                    }
                
                    xlinkSetDefaultHandler: {
                        /** 
                        * @param handler {xlinkHandlerPtr | null} xlinkHandlerPtr
                        * @returns {any} void
                        */
                        (handler: xlinkHandlerPtr | null): any
                    }
                
                    xmlACatalogAdd: {
                        /** 
                        * @param catal {xmlCatalogPtr | null} xmlCatalogPtr
                        * @param type {string | Buffer | null} p.q(const).xmlChar
                        * @param orig {string | Buffer | null} p.q(const).xmlChar
                        * @param replace {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (catal: xmlCatalogPtr | null, type: string | Buffer | null, orig: string | Buffer | null, replace: string | Buffer | null): number
                    }
                
                    xmlACatalogDump: {
                        /** 
                        * @param catal {xmlCatalogPtr | null} xmlCatalogPtr
                        * @param out {undefined} p.FILE
                        * @returns {any} void
                        */
                        (catal: xmlCatalogPtr | null, out: undefined): any
                    }
                
                    xmlACatalogRemove: {
                        /** 
                        * @param catal {xmlCatalogPtr | null} xmlCatalogPtr
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (catal: xmlCatalogPtr | null, value: string | Buffer | null): number
                    }
                
                    xmlACatalogResolve: {
                        /** 
                        * @param catal {xmlCatalogPtr | null} xmlCatalogPtr
                        * @param pubID {string | Buffer | null} p.q(const).xmlChar
                        * @param sysID {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} xmlChar
                        */
                        (catal: xmlCatalogPtr | null, pubID: string | Buffer | null, sysID: string | Buffer | null): string
                    }
                
                    xmlACatalogResolvePublic: {
                        /** 
                        * @param catal {xmlCatalogPtr | null} xmlCatalogPtr
                        * @param pubID {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} xmlChar
                        */
                        (catal: xmlCatalogPtr | null, pubID: string | Buffer | null): string
                    }
                
                    xmlACatalogResolveSystem: {
                        /** 
                        * @param catal {xmlCatalogPtr | null} xmlCatalogPtr
                        * @param sysID {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} xmlChar
                        */
                        (catal: xmlCatalogPtr | null, sysID: string | Buffer | null): string
                    }
                
                    xmlACatalogResolveURI: {
                        /** 
                        * @param catal {xmlCatalogPtr | null} xmlCatalogPtr
                        * @param URI {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} xmlChar
                        */
                        (catal: xmlCatalogPtr | null, URI: string | Buffer | null): string
                    }
                
                    xmlAddAttributeDecl: {
                        /** 
                        * @param ctxt {xmlValidCtxtPtr | null} xmlValidCtxtPtr
                        * @param dtd {xmlDtdPtr | null} xmlDtdPtr
                        * @param elem {string | Buffer | null} p.q(const).xmlChar
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param ns {string | Buffer | null} p.q(const).xmlChar
                        * @param type {xmlAttributeType} xmlAttributeType
                        * @param def {xmlAttributeDefault} xmlAttributeDefault
                        * @param defaultValue {string | Buffer | null} p.q(const).xmlChar
                        * @param tree {xmlEnumerationPtr | null} xmlEnumerationPtr
                        * @returns {xmlAttributePtr} xmlAttributePtr
                        */
                        (ctxt: xmlValidCtxtPtr | null, dtd: xmlDtdPtr | null, elem: string | Buffer | null, name: string | Buffer | null, ns: string | Buffer | null, type: xmlAttributeType, def: xmlAttributeDefault, defaultValue: string | Buffer | null, tree: xmlEnumerationPtr | null): xmlAttributePtr
                    }
                
                    xmlAddChild: {
                        /** 
                        * @param parent {xmlNodePtr | null} xmlNodePtr
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (parent: xmlNodePtr | null, cur: xmlNodePtr | null): xmlNodePtr | null
                    }
                
                    xmlAddChildList: {
                        /** 
                        * @param parent {xmlNodePtr | null} xmlNodePtr
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (parent: xmlNodePtr | null, cur: xmlNodePtr | null): xmlNodePtr | null
                    }
                
                    xmlAddDocEntity: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param type {number} int
                        * @param ExternalID {string | Buffer | null} p.q(const).xmlChar
                        * @param SystemID {string | Buffer | null} p.q(const).xmlChar
                        * @param content {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlEntityPtr} xmlEntityPtr
                        */
                        (doc: xmlDocPtr | null, name: string | Buffer | null, type: number, ExternalID: string | Buffer | null, SystemID: string | Buffer | null, content: string | Buffer | null): xmlEntityPtr
                    }
                
                    xmlAddDtdEntity: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param type {number} int
                        * @param ExternalID {string | Buffer | null} p.q(const).xmlChar
                        * @param SystemID {string | Buffer | null} p.q(const).xmlChar
                        * @param content {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlEntityPtr} xmlEntityPtr
                        */
                        (doc: xmlDocPtr | null, name: string | Buffer | null, type: number, ExternalID: string | Buffer | null, SystemID: string | Buffer | null, content: string | Buffer | null): xmlEntityPtr
                    }
                
                    xmlAddElementDecl: {
                        /** 
                        * @param ctxt {xmlValidCtxtPtr | null} xmlValidCtxtPtr
                        * @param dtd {xmlDtdPtr | null} xmlDtdPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param type {xmlElementTypeVal} xmlElementTypeVal
                        * @param content {xmlElementContentPtr | null} xmlElementContentPtr
                        * @returns {(xmlElementPtr | null)} xmlElementPtr
                        */
                        (ctxt: xmlValidCtxtPtr | null, dtd: xmlDtdPtr | null, name: string | Buffer | null, type: xmlElementTypeVal, content: xmlElementContentPtr | null): xmlElementPtr | null
                    }
                
                    xmlAddEncodingAlias: {
                        /** 
                        * @param name {string | Buffer | null} p.q(const).char
                        * @param alias {string | Buffer | null} p.q(const).char
                        * @returns {number} int
                        */
                        (name: string | Buffer | null, alias: string | Buffer | null): number
                    }
                
                    xmlAddID: {
                        /** 
                        * @param ctxt {xmlValidCtxtPtr | null} xmlValidCtxtPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @param attr {xmlAttrPtr | null} xmlAttrPtr
                        * @returns {xmlIDPtr} xmlIDPtr
                        */
                        (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null, value: string | Buffer | null, attr: xmlAttrPtr | null): xmlIDPtr
                    }
                
                    xmlAddNextSibling: {
                        /** 
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @param elem {xmlNodePtr | null} xmlNodePtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (cur: xmlNodePtr | null, elem: xmlNodePtr | null): xmlNodePtr | null
                    }
                
                    xmlAddNotationDecl: {
                        /** 
                        * @param ctxt {xmlValidCtxtPtr | null} xmlValidCtxtPtr
                        * @param dtd {xmlDtdPtr | null} xmlDtdPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param PublicID {string | Buffer | null} p.q(const).xmlChar
                        * @param SystemID {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlNotationPtr} xmlNotationPtr
                        */
                        (ctxt: xmlValidCtxtPtr | null, dtd: xmlDtdPtr | null, name: string | Buffer | null, PublicID: string | Buffer | null, SystemID: string | Buffer | null): xmlNotationPtr
                    }
                
                    xmlAddPrevSibling: {
                        /** 
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @param elem {xmlNodePtr | null} xmlNodePtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (cur: xmlNodePtr | null, elem: xmlNodePtr | null): xmlNodePtr | null
                    }
                
                    xmlAddRef: {
                        /** 
                        * @param ctxt {xmlValidCtxtPtr | null} xmlValidCtxtPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @param attr {xmlAttrPtr | null} xmlAttrPtr
                        * @returns {xmlRefPtr} xmlRefPtr
                        */
                        (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null, value: string | Buffer | null, attr: xmlAttrPtr | null): xmlRefPtr
                    }
                
                    xmlAddSibling: {
                        /** 
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @param elem {xmlNodePtr | null} xmlNodePtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (cur: xmlNodePtr | null, elem: xmlNodePtr | null): xmlNodePtr | null
                    }
                
                    xmlAllocOutputBuffer: {
                        /** 
                        * @param encoder {xmlCharEncodingHandlerPtr | null} xmlCharEncodingHandlerPtr
                        * @returns {xmlOutputBufferPtr} xmlOutputBufferPtr
                        */
                        (encoder: xmlCharEncodingHandlerPtr | null): xmlOutputBufferPtr
                    }
                
                    xmlAllocParserInputBuffer: {
                        /** 
                        * @param enc {xmlCharEncoding} xmlCharEncoding
                        * @returns {xmlParserInputBufferPtr} xmlParserInputBufferPtr
                        */
                        (enc: xmlCharEncoding): xmlParserInputBufferPtr
                    }
                
                    xmlAttrSerializeTxtContent: {
                        /** 
                        * @param buf {xmlBufferPtr | null} xmlBufferPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param attr {xmlAttrPtr | null} xmlAttrPtr
                        * @param string {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (buf: xmlBufferPtr | null, doc: xmlDocPtr | null, attr: xmlAttrPtr | null, string: string | Buffer | null): any
                    }
                
                    xmlAutomataCompile: {
                        /** 
                        * @param am {xmlAutomataPtr | null} xmlAutomataPtr
                        * @returns {xmlRegexpPtr} xmlRegexpPtr
                        */
                        (am: xmlAutomataPtr | null): xmlRegexpPtr
                    }
                
                    xmlAutomataGetInitState: {
                        /** 
                        * @param am {xmlAutomataPtr | null} xmlAutomataPtr
                        * @returns {xmlAutomataStatePtr} xmlAutomataStatePtr
                        */
                        (am: xmlAutomataPtr | null): xmlAutomataStatePtr
                    }
                
                    xmlAutomataIsDeterminist: {
                        /** 
                        * @param am {xmlAutomataPtr | null} xmlAutomataPtr
                        * @returns {number} int
                        */
                        (am: xmlAutomataPtr | null): number
                    }
                
                    xmlAutomataNewAllTrans: {
                        /** 
                        * @param am {xmlAutomataPtr | null} xmlAutomataPtr
                        * @param from {xmlAutomataStatePtr | null} xmlAutomataStatePtr
                        * @param to {xmlAutomataStatePtr | null} xmlAutomataStatePtr
                        * @param lax {number} int
                        * @returns {xmlAutomataStatePtr} xmlAutomataStatePtr
                        */
                        (am: xmlAutomataPtr | null, from: xmlAutomataStatePtr | null, to: xmlAutomataStatePtr | null, lax: number): xmlAutomataStatePtr
                    }
                
                    xmlAutomataNewCountTrans: {
                        /** 
                        * @param am {xmlAutomataPtr | null} xmlAutomataPtr
                        * @param from {xmlAutomataStatePtr | null} xmlAutomataStatePtr
                        * @param to {xmlAutomataStatePtr | null} xmlAutomataStatePtr
                        * @param token {string | Buffer | null} p.q(const).xmlChar
                        * @param min {number} int
                        * @param max {number} int
                        * @param data {any} p.void
                        * @returns {xmlAutomataStatePtr} xmlAutomataStatePtr
                        */
                        (am: xmlAutomataPtr | null, from: xmlAutomataStatePtr | null, to: xmlAutomataStatePtr | null, token: string | Buffer | null, min: number, max: number, data: any): xmlAutomataStatePtr
                    }
                
                    xmlAutomataNewCountTrans2: {
                        /** 
                        * @param am {xmlAutomataPtr | null} xmlAutomataPtr
                        * @param from {xmlAutomataStatePtr | null} xmlAutomataStatePtr
                        * @param to {xmlAutomataStatePtr | null} xmlAutomataStatePtr
                        * @param token {string | Buffer | null} p.q(const).xmlChar
                        * @param token2 {string | Buffer | null} p.q(const).xmlChar
                        * @param min {number} int
                        * @param max {number} int
                        * @param data {any} p.void
                        * @returns {xmlAutomataStatePtr} xmlAutomataStatePtr
                        */
                        (am: xmlAutomataPtr | null, from: xmlAutomataStatePtr | null, to: xmlAutomataStatePtr | null, token: string | Buffer | null, token2: string | Buffer | null, min: number, max: number, data: any): xmlAutomataStatePtr
                    }
                
                    xmlAutomataNewCountedTrans: {
                        /** 
                        * @param am {xmlAutomataPtr | null} xmlAutomataPtr
                        * @param from {xmlAutomataStatePtr | null} xmlAutomataStatePtr
                        * @param to {xmlAutomataStatePtr | null} xmlAutomataStatePtr
                        * @param counter {number} int
                        * @returns {xmlAutomataStatePtr} xmlAutomataStatePtr
                        */
                        (am: xmlAutomataPtr | null, from: xmlAutomataStatePtr | null, to: xmlAutomataStatePtr | null, counter: number): xmlAutomataStatePtr
                    }
                
                    xmlAutomataNewCounter: {
                        /** 
                        * @param am {xmlAutomataPtr | null} xmlAutomataPtr
                        * @param min {number} int
                        * @param max {number} int
                        * @returns {number} int
                        */
                        (am: xmlAutomataPtr | null, min: number, max: number): number
                    }
                
                    xmlAutomataNewCounterTrans: {
                        /** 
                        * @param am {xmlAutomataPtr | null} xmlAutomataPtr
                        * @param from {xmlAutomataStatePtr | null} xmlAutomataStatePtr
                        * @param to {xmlAutomataStatePtr | null} xmlAutomataStatePtr
                        * @param counter {number} int
                        * @returns {xmlAutomataStatePtr} xmlAutomataStatePtr
                        */
                        (am: xmlAutomataPtr | null, from: xmlAutomataStatePtr | null, to: xmlAutomataStatePtr | null, counter: number): xmlAutomataStatePtr
                    }
                
                    xmlAutomataNewEpsilon: {
                        /** 
                        * @param am {xmlAutomataPtr | null} xmlAutomataPtr
                        * @param from {xmlAutomataStatePtr | null} xmlAutomataStatePtr
                        * @param to {xmlAutomataStatePtr | null} xmlAutomataStatePtr
                        * @returns {xmlAutomataStatePtr} xmlAutomataStatePtr
                        */
                        (am: xmlAutomataPtr | null, from: xmlAutomataStatePtr | null, to: xmlAutomataStatePtr | null): xmlAutomataStatePtr
                    }
                
                    xmlAutomataNewNegTrans: {
                        /** 
                        * @param am {xmlAutomataPtr | null} xmlAutomataPtr
                        * @param from {xmlAutomataStatePtr | null} xmlAutomataStatePtr
                        * @param to {xmlAutomataStatePtr | null} xmlAutomataStatePtr
                        * @param token {string | Buffer | null} p.q(const).xmlChar
                        * @param token2 {string | Buffer | null} p.q(const).xmlChar
                        * @param data {any} p.void
                        * @returns {xmlAutomataStatePtr} xmlAutomataStatePtr
                        */
                        (am: xmlAutomataPtr | null, from: xmlAutomataStatePtr | null, to: xmlAutomataStatePtr | null, token: string | Buffer | null, token2: string | Buffer | null, data: any): xmlAutomataStatePtr
                    }
                
                    xmlAutomataNewOnceTrans: {
                        /** 
                        * @param am {xmlAutomataPtr | null} xmlAutomataPtr
                        * @param from {xmlAutomataStatePtr | null} xmlAutomataStatePtr
                        * @param to {xmlAutomataStatePtr | null} xmlAutomataStatePtr
                        * @param token {string | Buffer | null} p.q(const).xmlChar
                        * @param min {number} int
                        * @param max {number} int
                        * @param data {any} p.void
                        * @returns {xmlAutomataStatePtr} xmlAutomataStatePtr
                        */
                        (am: xmlAutomataPtr | null, from: xmlAutomataStatePtr | null, to: xmlAutomataStatePtr | null, token: string | Buffer | null, min: number, max: number, data: any): xmlAutomataStatePtr
                    }
                
                    xmlAutomataNewOnceTrans2: {
                        /** 
                        * @param am {xmlAutomataPtr | null} xmlAutomataPtr
                        * @param from {xmlAutomataStatePtr | null} xmlAutomataStatePtr
                        * @param to {xmlAutomataStatePtr | null} xmlAutomataStatePtr
                        * @param token {string | Buffer | null} p.q(const).xmlChar
                        * @param token2 {string | Buffer | null} p.q(const).xmlChar
                        * @param min {number} int
                        * @param max {number} int
                        * @param data {any} p.void
                        * @returns {xmlAutomataStatePtr} xmlAutomataStatePtr
                        */
                        (am: xmlAutomataPtr | null, from: xmlAutomataStatePtr | null, to: xmlAutomataStatePtr | null, token: string | Buffer | null, token2: string | Buffer | null, min: number, max: number, data: any): xmlAutomataStatePtr
                    }
                
                    xmlAutomataNewState: {
                        /** 
                        * @param am {xmlAutomataPtr | null} xmlAutomataPtr
                        * @returns {xmlAutomataStatePtr} xmlAutomataStatePtr
                        */
                        (am: xmlAutomataPtr | null): xmlAutomataStatePtr
                    }
                
                    xmlAutomataNewTransition: {
                        /** 
                        * @param am {xmlAutomataPtr | null} xmlAutomataPtr
                        * @param from {xmlAutomataStatePtr | null} xmlAutomataStatePtr
                        * @param to {xmlAutomataStatePtr | null} xmlAutomataStatePtr
                        * @param token {string | Buffer | null} p.q(const).xmlChar
                        * @param data {any} p.void
                        * @returns {xmlAutomataStatePtr} xmlAutomataStatePtr
                        */
                        (am: xmlAutomataPtr | null, from: xmlAutomataStatePtr | null, to: xmlAutomataStatePtr | null, token: string | Buffer | null, data: any): xmlAutomataStatePtr
                    }
                
                    xmlAutomataNewTransition2: {
                        /** 
                        * @param am {xmlAutomataPtr | null} xmlAutomataPtr
                        * @param from {xmlAutomataStatePtr | null} xmlAutomataStatePtr
                        * @param to {xmlAutomataStatePtr | null} xmlAutomataStatePtr
                        * @param token {string | Buffer | null} p.q(const).xmlChar
                        * @param token2 {string | Buffer | null} p.q(const).xmlChar
                        * @param data {any} p.void
                        * @returns {xmlAutomataStatePtr} xmlAutomataStatePtr
                        */
                        (am: xmlAutomataPtr | null, from: xmlAutomataStatePtr | null, to: xmlAutomataStatePtr | null, token: string | Buffer | null, token2: string | Buffer | null, data: any): xmlAutomataStatePtr
                    }
                
                    xmlAutomataSetFinalState: {
                        /** 
                        * @param am {xmlAutomataPtr | null} xmlAutomataPtr
                        * @param state {xmlAutomataStatePtr | null} xmlAutomataStatePtr
                        * @returns {number} int
                        */
                        (am: xmlAutomataPtr | null, state: xmlAutomataStatePtr | null): number
                    }
                
                    xmlBufContent: {
                        /** 
                        * @param buf {xmlBufPtr | null} p.q(const).xmlBuf
                        * @returns {string} xmlChar
                        */
                        (buf: xmlBufPtr | null): string
                    }
                
                    xmlBufEnd: {
                        /** 
                        * @param buf {xmlBufPtr | null} xmlBufPtr
                        * @returns {string} xmlChar
                        */
                        (buf: xmlBufPtr | null): string
                    }
                
                    xmlBufGetNodeContent: {
                        /** 
                        * @param buf {xmlBufPtr | null} xmlBufPtr
                        * @param cur {xmlNodePtr | null} p.q(const).xmlNode
                        * @returns {number} int
                        */
                        (buf: xmlBufPtr | null, cur: xmlNodePtr | null): number
                    }
                
                    xmlBufNodeDump: {
                        /** 
                        * @param buf {xmlBufPtr | null} xmlBufPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @param level {number} int
                        * @param format {number} int
                        * @returns {number} size_t
                        */
                        (buf: xmlBufPtr | null, doc: xmlDocPtr | null, cur: xmlNodePtr | null, level: number, format: number): number
                    }
                
                    xmlBufShrink: {
                        /** 
                        * @param buf {xmlBufPtr | null} xmlBufPtr
                        * @param len {number} size_t
                        * @returns {number} size_t
                        */
                        (buf: xmlBufPtr | null, len: number): number
                    }
                
                    xmlBufUse: {
                        /** 
                        * @param buf {xmlBufPtr | null} q(const).xmlBufPtr
                        * @returns {number} size_t
                        */
                        (buf: xmlBufPtr | null): number
                    }
                
                    xmlBufferAdd: {
                        /** 
                        * @param buf {xmlBufferPtr | null} xmlBufferPtr
                        * @param str {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {number} int
                        */
                        (buf: xmlBufferPtr | null, str: string | Buffer | null, len: number): number
                    }
                
                    xmlBufferAddHead: {
                        /** 
                        * @param buf {xmlBufferPtr | null} xmlBufferPtr
                        * @param str {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {number} int
                        */
                        (buf: xmlBufferPtr | null, str: string | Buffer | null, len: number): number
                    }
                
                    xmlBufferCCat: {
                        /** 
                        * @param buf {xmlBufferPtr | null} xmlBufferPtr
                        * @param str {string | Buffer | null} p.q(const).char
                        * @returns {number} int
                        */
                        (buf: xmlBufferPtr | null, str: string | Buffer | null): number
                    }
                
                    xmlBufferCat: {
                        /** 
                        * @param buf {xmlBufferPtr | null} xmlBufferPtr
                        * @param str {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (buf: xmlBufferPtr | null, str: string | Buffer | null): number
                    }
                
                    xmlBufferContent: {
                        /** 
                        * @param buf {xmlBufferPtr | null} p.q(const).xmlBuffer
                        * @returns {string} q(const).xmlChar
                        */
                        (buf: xmlBufferPtr | null): string
                    }
                
                    xmlBufferCreate: {
                        /** 
                        * @returns {xmlBufferPtr} xmlBufferPtr
                        */
                        (): xmlBufferPtr
                    }
                
                    xmlBufferCreateSize: {
                        /** 
                        * @param size {number} size_t
                        * @returns {xmlBufferPtr} xmlBufferPtr
                        */
                        (size: number): xmlBufferPtr
                    }
                
                    xmlBufferCreateStatic: {
                        /** 
                        * @param mem {any} p.void
                        * @param size {number} size_t
                        * @returns {xmlBufferPtr} xmlBufferPtr
                        */
                        (mem: any, size: number): xmlBufferPtr
                    }
                
                    xmlBufferDetach: {
                        /** 
                        * @param buf {xmlBufferPtr | null} xmlBufferPtr
                        * @returns {string} xmlChar
                        */
                        (buf: xmlBufferPtr | null): string
                    }
                
                    xmlBufferDump: {
                        /** 
                        * @param file {undefined} p.FILE
                        * @param buf {xmlBufferPtr | null} xmlBufferPtr
                        * @returns {number} int
                        */
                        (file: undefined, buf: xmlBufferPtr | null): number
                    }
                
                    xmlBufferEmpty: {
                        /** 
                        * @param buf {xmlBufferPtr | null} xmlBufferPtr
                        * @returns {any} void
                        */
                        (buf: xmlBufferPtr | null): any
                    }
                
                    xmlBufferFree: {
                        /** 
                        * @param buf {xmlBufferPtr | null} xmlBufferPtr
                        * @returns {any} void
                        */
                        (buf: xmlBufferPtr | null): any
                    }
                
                    xmlBufferGrow: {
                        /** 
                        * @param buf {xmlBufferPtr | null} xmlBufferPtr
                        * @param len {number} unsigned int
                        * @returns {number} int
                        */
                        (buf: xmlBufferPtr | null, len: number): number
                    }
                
                    xmlBufferLength: {
                        /** 
                        * @param buf {xmlBufferPtr | null} p.q(const).xmlBuffer
                        * @returns {number} int
                        */
                        (buf: xmlBufferPtr | null): number
                    }
                
                    xmlBufferResize: {
                        /** 
                        * @param buf {xmlBufferPtr | null} xmlBufferPtr
                        * @param size {number} unsigned int
                        * @returns {number} int
                        */
                        (buf: xmlBufferPtr | null, size: number): number
                    }
                
                    xmlBufferSetAllocationScheme: {
                        /** 
                        * @param buf {xmlBufferPtr | null} xmlBufferPtr
                        * @param scheme {xmlBufferAllocationScheme} xmlBufferAllocationScheme
                        * @returns {any} void
                        */
                        (buf: xmlBufferPtr | null, scheme: xmlBufferAllocationScheme): any
                    }
                
                    xmlBufferShrink: {
                        /** 
                        * @param buf {xmlBufferPtr | null} xmlBufferPtr
                        * @param len {number} unsigned int
                        * @returns {number} int
                        */
                        (buf: xmlBufferPtr | null, len: number): number
                    }
                
                    xmlBufferWriteCHAR: {
                        /** 
                        * @param buf {xmlBufferPtr | null} xmlBufferPtr
                        * @param string {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (buf: xmlBufferPtr | null, string: string | Buffer | null): any
                    }
                
                    xmlBufferWriteChar: {
                        /** 
                        * @param buf {xmlBufferPtr | null} xmlBufferPtr
                        * @param string {string | Buffer | null} p.q(const).char
                        * @returns {any} void
                        */
                        (buf: xmlBufferPtr | null, string: string | Buffer | null): any
                    }
                
                    xmlBufferWriteQuotedString: {
                        /** 
                        * @param buf {xmlBufferPtr | null} xmlBufferPtr
                        * @param string {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (buf: xmlBufferPtr | null, string: string | Buffer | null): any
                    }
                
                    xmlBuildQName: {
                        /** 
                        * @param ncname {string | Buffer | null} p.q(const).xmlChar
                        * @param prefix {string | Buffer | null} p.q(const).xmlChar
                        * @param memory {string | Buffer | null} p.xmlChar
                        * @param len {number} int
                        * @returns {string} xmlChar
                        */
                        (ncname: string | Buffer | null, prefix: string | Buffer | null, memory: string | Buffer | null, len: number): string
                    }
                
                    xmlBuildRelativeURI: {
                        /** 
                        * @param URI {string | Buffer | null} p.q(const).xmlChar
                        * @param base {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} xmlChar
                        */
                        (URI: string | Buffer | null, base: string | Buffer | null): string
                    }
                
                    xmlBuildURI: {
                        /** 
                        * @param URI {string | Buffer | null} p.q(const).xmlChar
                        * @param base {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} xmlChar
                        */
                        (URI: string | Buffer | null, base: string | Buffer | null): string
                    }
                
                    xmlByteConsumed: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {number} long
                        */
                        (ctxt: xmlParserCtxtPtr | null): number
                    }
                
                    xmlCanonicPath: {
                        /** 
                        * @param path {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} xmlChar
                        */
                        (path: string | Buffer | null): string
                    }
                
                    xmlCatalogAdd: {
                        /** 
                        * @param type {string | Buffer | null} p.q(const).xmlChar
                        * @param orig {string | Buffer | null} p.q(const).xmlChar
                        * @param replace {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (type: string | Buffer | null, orig: string | Buffer | null, replace: string | Buffer | null): number
                    }
                
                    xmlCatalogAddLocal: {
                        /** 
                        * @param catalogs {any} p.void
                        * @param URL {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (catalogs: any, URL: string | Buffer | null): any
                    }
                
                    xmlCatalogCleanup: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    xmlCatalogConvert: {
                        /** 
                        * @returns {number} int
                        */
                        (): number
                    }
                
                    xmlCatalogDump: {
                        /** 
                        * @param out {undefined} p.FILE
                        * @returns {any} void
                        */
                        (out: undefined): any
                    }
                
                    xmlCatalogFreeLocal: {
                        /** 
                        * @param catalogs {any} p.void
                        * @returns {any} void
                        */
                        (catalogs: any): any
                    }
                
                    xmlCatalogGetDefaults: {
                        /** 
                        * @returns {xmlCatalogAllow} xmlCatalogAllow
                        */
                        (): xmlCatalogAllow
                    }
                
                    xmlCatalogGetPublic: {
                        /** 
                        * @param pubID {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} q(const).xmlChar
                        */
                        (pubID: string | Buffer | null): string
                    }
                
                    xmlCatalogGetSystem: {
                        /** 
                        * @param sysID {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} q(const).xmlChar
                        */
                        (sysID: string | Buffer | null): string
                    }
                
                    xmlCatalogIsEmpty: {
                        /** 
                        * @param catal {xmlCatalogPtr | null} xmlCatalogPtr
                        * @returns {number} int
                        */
                        (catal: xmlCatalogPtr | null): number
                    }
                
                    xmlCatalogLocalResolve: {
                        /** 
                        * @param catalogs {any} p.void
                        * @param pubID {string | Buffer | null} p.q(const).xmlChar
                        * @param sysID {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} xmlChar
                        */
                        (catalogs: any, pubID: string | Buffer | null, sysID: string | Buffer | null): string
                    }
                
                    xmlCatalogLocalResolveURI: {
                        /** 
                        * @param catalogs {any} p.void
                        * @param URI {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} xmlChar
                        */
                        (catalogs: any, URI: string | Buffer | null): string
                    }
                
                    xmlCatalogRemove: {
                        /** 
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (value: string | Buffer | null): number
                    }
                
                    xmlCatalogResolve: {
                        /** 
                        * @param pubID {string | Buffer | null} p.q(const).xmlChar
                        * @param sysID {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} xmlChar
                        */
                        (pubID: string | Buffer | null, sysID: string | Buffer | null): string
                    }
                
                    xmlCatalogResolvePublic: {
                        /** 
                        * @param pubID {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} xmlChar
                        */
                        (pubID: string | Buffer | null): string
                    }
                
                    xmlCatalogResolveSystem: {
                        /** 
                        * @param sysID {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} xmlChar
                        */
                        (sysID: string | Buffer | null): string
                    }
                
                    xmlCatalogResolveURI: {
                        /** 
                        * @param URI {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} xmlChar
                        */
                        (URI: string | Buffer | null): string
                    }
                
                    xmlCatalogSetDebug: {
                        /** 
                        * @param level {number} int
                        * @returns {number} int
                        */
                        (level: number): number
                    }
                
                    xmlCatalogSetDefaultPrefer: {
                        /** 
                        * @param prefer {xmlCatalogPrefer} xmlCatalogPrefer
                        * @returns {xmlCatalogPrefer} xmlCatalogPrefer
                        */
                        (prefer: xmlCatalogPrefer): xmlCatalogPrefer
                    }
                
                    xmlCatalogSetDefaults: {
                        /** 
                        * @param allow {xmlCatalogAllow} xmlCatalogAllow
                        * @returns {any} void
                        */
                        (allow: xmlCatalogAllow): any
                    }
                
                    xmlCharEncCloseFunc: {
                        /** 
                        * @param handler {xmlCharEncodingHandler} p.xmlCharEncodingHandler
                        * @returns {number} int
                        */
                        (handler: xmlCharEncodingHandler): number
                    }
                
                    xmlCharEncFirstLine: {
                        /** 
                        * @param handler {xmlCharEncodingHandler} p.xmlCharEncodingHandler
                        * @param out {xmlBufferPtr | null} xmlBufferPtr
                        * @param in {xmlBufferPtr | null} xmlBufferPtr
                        * @returns {number} int
                        */
                        (handler: xmlCharEncodingHandler, out: xmlBufferPtr | null, inArg: xmlBufferPtr | null): number
                    }
                
                    xmlCharEncInFunc: {
                        /** 
                        * @param handler {xmlCharEncodingHandler} p.xmlCharEncodingHandler
                        * @param out {xmlBufferPtr | null} xmlBufferPtr
                        * @param in {xmlBufferPtr | null} xmlBufferPtr
                        * @returns {number} int
                        */
                        (handler: xmlCharEncodingHandler, out: xmlBufferPtr | null, inArg: xmlBufferPtr | null): number
                    }
                
                    xmlCharEncOutFunc: {
                        /** 
                        * @param handler {xmlCharEncodingHandler} p.xmlCharEncodingHandler
                        * @param out {xmlBufferPtr | null} xmlBufferPtr
                        * @param in {xmlBufferPtr | null} xmlBufferPtr
                        * @returns {number} int
                        */
                        (handler: xmlCharEncodingHandler, out: xmlBufferPtr | null, inArg: xmlBufferPtr | null): number
                    }
                
                    xmlCharInRange: {
                        /** 
                        * @param val {number} unsigned int
                        * @param group {xmlChRangeGroupPtr | null} p.q(const).xmlChRangeGroup
                        * @returns {number} int
                        */
                        (val: number, group: xmlChRangeGroupPtr | null): number
                    }
                
                    xmlCharStrdup: {
                        /** 
                        * @param cur {string | Buffer | null} p.q(const).char
                        * @returns {string} xmlChar
                        */
                        (cur: string | Buffer | null): string
                    }
                
                    xmlCharStrndup: {
                        /** 
                        * @param cur {string | Buffer | null} p.q(const).char
                        * @param len {number} int
                        * @returns {string} xmlChar
                        */
                        (cur: string | Buffer | null, len: number): string
                    }
                
                    xmlCheckFilename: {
                        /** 
                        * @param path {string | Buffer | null} p.q(const).char
                        * @returns {number} int
                        */
                        (path: string | Buffer | null): number
                    }
                
                    xmlCheckHTTPInput: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param ret {xmlParserInputPtr | null} xmlParserInputPtr
                        * @returns {xmlParserInputPtr} xmlParserInputPtr
                        */
                        (ctxt: xmlParserCtxtPtr | null, ret: xmlParserInputPtr | null): xmlParserInputPtr
                    }
                
                    xmlCheckLanguageID: {
                        /** 
                        * @param lang {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (lang: string | Buffer | null): number
                    }
                
                    xmlCheckUTF8: {
                        /** 
                        * @param utf {string | Buffer | null} p.q(const).unsigned char
                        * @returns {number} int
                        */
                        (utf: string | Buffer | null): number
                    }
                
                    xmlCheckVersion: {
                        /** 
                        * @param version {number} int
                        * @returns {any} void
                        */
                        (version: number): any
                    }
                
                    xmlChildElementCount: {
                        /** 
                        * @param parent {xmlNodePtr | null} xmlNodePtr
                        * @returns {number} unsigned long
                        */
                        (parent: xmlNodePtr | null): number
                    }
                
                    xmlCleanupCharEncodingHandlers: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    xmlCleanupEncodingAliases: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    xmlCleanupGlobals: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    xmlCleanupInputCallbacks: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    xmlCleanupMemory: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    xmlCleanupOutputCallbacks: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    xmlCleanupParser: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    xmlCleanupPredefinedEntities: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    xmlCleanupThreads: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    xmlClearNodeInfoSeq: {
                        /** 
                        * @param seq {xmlParserNodeInfoSeqPtr | null} xmlParserNodeInfoSeqPtr
                        * @returns {any} void
                        */
                        (seq: xmlParserNodeInfoSeqPtr | null): any
                    }
                
                    xmlClearParserCtxt: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null): any
                    }
                
                    xmlConvertSGMLCatalog: {
                        /** 
                        * @param catal {xmlCatalogPtr | null} xmlCatalogPtr
                        * @returns {number} int
                        */
                        (catal: xmlCatalogPtr | null): number
                    }
                
                    xmlCopyAttributeTable: {
                        /** 
                        * @param table {xmlAttributeTablePtr | null} xmlAttributeTablePtr
                        * @returns {xmlAttributeTablePtr} xmlAttributeTablePtr
                        */
                        (table: xmlAttributeTablePtr | null): xmlAttributeTablePtr
                    }
                
                    xmlCopyChar: {
                        /** 
                        * @param len {number} int
                        * @param out {string | Buffer | null} p.xmlChar
                        * @param val {number} int
                        * @returns {number} int
                        */
                        (len: number, out: string | Buffer | null, val: number): number
                    }
                
                    xmlCopyCharMultiByte: {
                        /** 
                        * @param out {string | Buffer | null} p.xmlChar
                        * @param val {number} int
                        * @returns {number} int
                        */
                        (out: string | Buffer | null, val: number): number
                    }
                
                    xmlCopyDoc: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param recursive {number} int
                        * @returns {(xmlDocPtr | null)} xmlDocPtr
                        */
                        (doc: xmlDocPtr | null, recursive: number): xmlDocPtr | null
                    }
                
                    xmlCopyDocElementContent: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param content {xmlElementContentPtr | null} xmlElementContentPtr
                        * @returns {xmlElementContentPtr} xmlElementContentPtr
                        */
                        (doc: xmlDocPtr | null, content: xmlElementContentPtr | null): xmlElementContentPtr
                    }
                
                    xmlCopyDtd: {
                        /** 
                        * @param dtd {xmlDtdPtr | null} xmlDtdPtr
                        * @returns {(xmlDtdPtr | null)} xmlDtdPtr
                        */
                        (dtd: xmlDtdPtr | null): xmlDtdPtr | null
                    }
                
                    xmlCopyElementContent: {
                        /** 
                        * @param content {xmlElementContentPtr | null} xmlElementContentPtr
                        * @returns {xmlElementContentPtr} xmlElementContentPtr
                        */
                        (content: xmlElementContentPtr | null): xmlElementContentPtr
                    }
                
                    xmlCopyElementTable: {
                        /** 
                        * @param table {xmlElementTablePtr | null} xmlElementTablePtr
                        * @returns {xmlElementTablePtr} xmlElementTablePtr
                        */
                        (table: xmlElementTablePtr | null): xmlElementTablePtr
                    }
                
                    xmlCopyEntitiesTable: {
                        /** 
                        * @param table {xmlEntitiesTablePtr | null} xmlEntitiesTablePtr
                        * @returns {xmlEntitiesTablePtr} xmlEntitiesTablePtr
                        */
                        (table: xmlEntitiesTablePtr | null): xmlEntitiesTablePtr
                    }
                
                    xmlCopyEnumeration: {
                        /** 
                        * @param cur {xmlEnumerationPtr | null} xmlEnumerationPtr
                        * @returns {xmlEnumerationPtr} xmlEnumerationPtr
                        */
                        (cur: xmlEnumerationPtr | null): xmlEnumerationPtr
                    }
                
                    xmlCopyError: {
                        /** 
                        * @param from {xmlErrorPtr | null} xmlErrorPtr
                        * @param to {xmlErrorPtr | null} xmlErrorPtr
                        * @returns {number} int
                        */
                        (from: xmlErrorPtr | null, to: xmlErrorPtr | null): number
                    }
                
                    xmlCopyNamespace: {
                        /** 
                        * @param cur {xmlNsPtr | null} xmlNsPtr
                        * @returns {(xmlNsPtr | null)} xmlNsPtr
                        */
                        (cur: xmlNsPtr | null): xmlNsPtr | null
                    }
                
                    xmlCopyNamespaceList: {
                        /** 
                        * @param cur {xmlNsPtr | null} xmlNsPtr
                        * @returns {(xmlNsPtr | null)} xmlNsPtr
                        */
                        (cur: xmlNsPtr | null): xmlNsPtr | null
                    }
                
                    xmlCopyNode: {
                        /** 
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @param recursive {number} int
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (node: xmlNodePtr | null, recursive: number): xmlNodePtr | null
                    }
                
                    xmlCopyNodeList: {
                        /** 
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (node: xmlNodePtr | null): xmlNodePtr | null
                    }
                
                    xmlCopyNotationTable: {
                        /** 
                        * @param table {xmlNotationTablePtr | null} xmlNotationTablePtr
                        * @returns {xmlNotationTablePtr} xmlNotationTablePtr
                        */
                        (table: xmlNotationTablePtr | null): xmlNotationTablePtr
                    }
                
                    xmlCopyProp: {
                        /** 
                        * @param target {xmlNodePtr | null} xmlNodePtr
                        * @param cur {xmlAttrPtr | null} xmlAttrPtr
                        * @returns {(xmlAttrPtr | null)} xmlAttrPtr
                        */
                        (target: xmlNodePtr | null, cur: xmlAttrPtr | null): xmlAttrPtr | null
                    }
                
                    xmlCopyPropList: {
                        /** 
                        * @param target {xmlNodePtr | null} xmlNodePtr
                        * @param cur {xmlAttrPtr | null} xmlAttrPtr
                        * @returns {(xmlAttrPtr | null)} xmlAttrPtr
                        */
                        (target: xmlNodePtr | null, cur: xmlAttrPtr | null): xmlAttrPtr | null
                    }
                
                    xmlCreateDocParserCtxt: {
                        /** 
                        * @param cur {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlParserCtxtPtr} xmlParserCtxtPtr
                        */
                        (cur: string | Buffer | null): xmlParserCtxtPtr
                    }
                
                    xmlCreateEntitiesTable: {
                        /** 
                        * @returns {xmlEntitiesTablePtr} xmlEntitiesTablePtr
                        */
                        (): xmlEntitiesTablePtr
                    }
                
                    xmlCreateEntityParserCtxt: {
                        /** 
                        * @param URL {string | Buffer | null} p.q(const).xmlChar
                        * @param ID {string | Buffer | null} p.q(const).xmlChar
                        * @param base {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlParserCtxtPtr} xmlParserCtxtPtr
                        */
                        (URL: string | Buffer | null, ID: string | Buffer | null, base: string | Buffer | null): xmlParserCtxtPtr
                    }
                
                    xmlCreateEnumeration: {
                        /** 
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlEnumerationPtr} xmlEnumerationPtr
                        */
                        (name: string | Buffer | null): xmlEnumerationPtr
                    }
                
                    xmlCreateFileParserCtxt: {
                        /** 
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @returns {xmlParserCtxtPtr} xmlParserCtxtPtr
                        */
                        (filename: string | Buffer | null): xmlParserCtxtPtr
                    }
                
                    xmlCreateIOParserCtxt: {
                        /** 
                        * @param sax {xmlSAXHandlerPtr | null} xmlSAXHandlerPtr
                        * @param user_data {any} p.void
                        * @param ioread {xmlInputReadCallback} xmlInputReadCallback
                        * @param ioclose {xmlInputCloseCallback} xmlInputCloseCallback
                        * @param ioctx {any} p.void
                        * @param enc {xmlCharEncoding} xmlCharEncoding
                        * @returns {xmlParserCtxtPtr} xmlParserCtxtPtr
                        */
                        (sax: xmlSAXHandlerPtr | null, user_data: any, ioread: xmlInputReadCallback, ioclose: xmlInputCloseCallback, ioctx: any, enc: xmlCharEncoding): xmlParserCtxtPtr
                    }
                
                    xmlCreateIntSubset: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param ExternalID {string | Buffer | null} p.q(const).xmlChar
                        * @param SystemID {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlDtdPtr | null)} xmlDtdPtr
                        */
                        (doc: xmlDocPtr | null, name: string | Buffer | null, ExternalID: string | Buffer | null, SystemID: string | Buffer | null): xmlDtdPtr | null
                    }
                
                    xmlCreateMemoryParserCtxt: {
                        /** 
                        * @param buffer {string | Buffer | null} p.q(const).char
                        * @param size {number} int
                        * @returns {xmlParserCtxtPtr} xmlParserCtxtPtr
                        */
                        (buffer: string | Buffer | null, size: number): xmlParserCtxtPtr
                    }
                
                    xmlCreatePushParserCtxt: {
                        /** 
                        * @param sax {xmlSAXHandlerPtr | null} xmlSAXHandlerPtr
                        * @param user_data {any} p.void
                        * @param chunk {string | Buffer | null} p.q(const).char
                        * @param size {number} int
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @returns {xmlParserCtxtPtr} xmlParserCtxtPtr
                        */
                        (sax: xmlSAXHandlerPtr | null, user_data: any, chunk: string | Buffer | null, size: number, filename: string | Buffer | null): xmlParserCtxtPtr
                    }
                
                    xmlCreateURI: {
                        /** 
                        * @returns {xmlURIPtr} xmlURIPtr
                        */
                        (): xmlURIPtr
                    }
                
                    xmlCreateURLParserCtxt: {
                        /** 
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @param options {number} int
                        * @returns {xmlParserCtxtPtr} xmlParserCtxtPtr
                        */
                        (filename: string | Buffer | null, options: number): xmlParserCtxtPtr
                    }
                
                    xmlCtxtGetLastError: {
                        /** 
                        * @param ctx {any} p.void
                        * @returns {xmlErrorPtr} xmlErrorPtr
                        */
                        (ctx: any): xmlErrorPtr
                    }
                
                    xmlCtxtReadDoc: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param cur {string | Buffer | null} p.q(const).xmlChar
                        * @param URL {string | Buffer | null} p.q(const).char
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param options {number} int
                        * @returns {(xmlDocPtr | null)} xmlDocPtr
                        */
                        (ctxt: xmlParserCtxtPtr | null, cur: string | Buffer | null, URL: string | Buffer | null, encoding: string | Buffer | null, options: number): xmlDocPtr | null
                    }
                
                    xmlCtxtReadFd: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param fd {number} int
                        * @param URL {string | Buffer | null} p.q(const).char
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param options {number} int
                        * @returns {(xmlDocPtr | null)} xmlDocPtr
                        */
                        (ctxt: xmlParserCtxtPtr | null, fd: number, URL: string | Buffer | null, encoding: string | Buffer | null, options: number): xmlDocPtr | null
                    }
                
                    xmlCtxtReadFile: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param options {number} int
                        * @returns {(xmlDocPtr | null)} xmlDocPtr
                        */
                        (ctxt: xmlParserCtxtPtr | null, filename: string | Buffer | null, encoding: string | Buffer | null, options: number): xmlDocPtr | null
                    }
                
                    xmlCtxtReadIO: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param ioread {xmlInputReadCallback} xmlInputReadCallback
                        * @param ioclose {xmlInputCloseCallback} xmlInputCloseCallback
                        * @param ioctx {any} p.void
                        * @param URL {string | Buffer | null} p.q(const).char
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param options {number} int
                        * @returns {(xmlDocPtr | null)} xmlDocPtr
                        */
                        (ctxt: xmlParserCtxtPtr | null, ioread: xmlInputReadCallback, ioclose: xmlInputCloseCallback, ioctx: any, URL: string | Buffer | null, encoding: string | Buffer | null, options: number): xmlDocPtr | null
                    }
                
                    xmlCtxtReadMemory: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param buffer {string | Buffer | null} p.q(const).char
                        * @param size {number} int
                        * @param URL {string | Buffer | null} p.q(const).char
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param options {number} int
                        * @returns {(xmlDocPtr | null)} xmlDocPtr
                        */
                        (ctxt: xmlParserCtxtPtr | null, buffer: string | Buffer | null, size: number, URL: string | Buffer | null, encoding: string | Buffer | null, options: number): xmlDocPtr | null
                    }
                
                    xmlCtxtReset: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null): any
                    }
                
                    xmlCtxtResetLastError: {
                        /** 
                        * @param ctx {any} p.void
                        * @returns {any} void
                        */
                        (ctx: any): any
                    }
                
                    xmlCtxtResetPush: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param chunk {string | Buffer | null} p.q(const).char
                        * @param size {number} int
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @returns {number} int
                        */
                        (ctxt: xmlParserCtxtPtr | null, chunk: string | Buffer | null, size: number, filename: string | Buffer | null, encoding: string | Buffer | null): number
                    }
                
                    xmlCtxtUseOptions: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param options {number} int
                        * @returns {number} int
                        */
                        (ctxt: xmlParserCtxtPtr | null, options: number): number
                    }
                
                    xmlCurrentChar: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param len {number} p.int
                        * @returns {number} int
                        */
                        (ctxt: xmlParserCtxtPtr | null, len: number): number
                    }
                
                    xmlDOMWrapAdoptNode: {
                        /** 
                        * @param ctxt {xmlDOMWrapCtxtPtr | null} xmlDOMWrapCtxtPtr
                        * @param sourceDoc {xmlDocPtr | null} xmlDocPtr
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @param destDoc {xmlDocPtr | null} xmlDocPtr
                        * @param destParent {xmlNodePtr | null} xmlNodePtr
                        * @param options {number} int
                        * @returns {number} int
                        */
                        (ctxt: xmlDOMWrapCtxtPtr | null, sourceDoc: xmlDocPtr | null, node: xmlNodePtr | null, destDoc: xmlDocPtr | null, destParent: xmlNodePtr | null, options: number): number
                    }
                
                    xmlDOMWrapCloneNode: {
                        /** 
                        * @param ctxt {xmlDOMWrapCtxtPtr | null} xmlDOMWrapCtxtPtr
                        * @param sourceDoc {xmlDocPtr | null} xmlDocPtr
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @param clonedNode {xmlNodePtr | null} p.xmlNodePtr
                        * @param destDoc {xmlDocPtr | null} xmlDocPtr
                        * @param destParent {xmlNodePtr | null} xmlNodePtr
                        * @param deep {number} int
                        * @param options {number} int
                        * @returns {number} int
                        */
                        (ctxt: xmlDOMWrapCtxtPtr | null, sourceDoc: xmlDocPtr | null, node: xmlNodePtr | null, clonedNode: xmlNodePtr | null, destDoc: xmlDocPtr | null, destParent: xmlNodePtr | null, deep: number, options: number): number
                    }
                
                    xmlDOMWrapFreeCtxt: {
                        /** 
                        * @param ctxt {xmlDOMWrapCtxtPtr | null} xmlDOMWrapCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlDOMWrapCtxtPtr | null): any
                    }
                
                    xmlDOMWrapNewCtxt: {
                        /** 
                        * @returns {xmlDOMWrapCtxtPtr} xmlDOMWrapCtxtPtr
                        */
                        (): xmlDOMWrapCtxtPtr
                    }
                
                    xmlDOMWrapReconcileNamespaces: {
                        /** 
                        * @param ctxt {xmlDOMWrapCtxtPtr | null} xmlDOMWrapCtxtPtr
                        * @param elem {xmlNodePtr | null} xmlNodePtr
                        * @param options {number} int
                        * @returns {number} int
                        */
                        (ctxt: xmlDOMWrapCtxtPtr | null, elem: xmlNodePtr | null, options: number): number
                    }
                
                    xmlDOMWrapRemoveNode: {
                        /** 
                        * @param ctxt {xmlDOMWrapCtxtPtr | null} xmlDOMWrapCtxtPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @param options {number} int
                        * @returns {number} int
                        */
                        (ctxt: xmlDOMWrapCtxtPtr | null, doc: xmlDocPtr | null, node: xmlNodePtr | null, options: number): number
                    }
                
                    xmlDecodeEntities: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param len {number} int
                        * @param what {number} int
                        * @param end {string | Buffer | null} xmlChar
                        * @param end2 {string | Buffer | null} xmlChar
                        * @param end3 {string | Buffer | null} xmlChar
                        * @returns {string} xmlChar
                        */
                        (ctxt: xmlParserCtxtPtr | null, len: number, what: number, end: string | Buffer | null, end2: string | Buffer | null, end3: string | Buffer | null): string
                    }
                
                    xmlDefaultSAXHandlerInit: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    xmlDelEncodingAlias: {
                        /** 
                        * @param alias {string | Buffer | null} p.q(const).char
                        * @returns {number} int
                        */
                        (alias: string | Buffer | null): number
                    }
                
                    xmlDeregisterNodeDefault: {
                        /** 
                        * @param func {xmlDeregisterNodeFunc} xmlDeregisterNodeFunc
                        * @returns {xmlDeregisterNodeFunc} xmlDeregisterNodeFunc
                        */
                        (func: xmlDeregisterNodeFunc): xmlDeregisterNodeFunc
                    }
                
                    xmlDetectCharEncoding: {
                        /** 
                        * @param in {string | Buffer | null} p.q(const).unsigned char
                        * @param len {number} int
                        * @returns {xmlCharEncoding} xmlCharEncoding
                        */
                        (inArg: string | Buffer | null, len: number): xmlCharEncoding
                    }
                
                    xmlDictCleanup: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    xmlDictCreate: {
                        /** 
                        * @returns {xmlDictPtr} xmlDictPtr
                        */
                        (): xmlDictPtr
                    }
                
                    xmlDictCreateSub: {
                        /** 
                        * @param sub {xmlDictPtr | null} xmlDictPtr
                        * @returns {xmlDictPtr} xmlDictPtr
                        */
                        (sub: xmlDictPtr | null): xmlDictPtr
                    }
                
                    xmlDictExists: {
                        /** 
                        * @param dict {xmlDictPtr | null} xmlDictPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {string} q(const).xmlChar
                        */
                        (dict: xmlDictPtr | null, name: string | Buffer | null, len: number): string
                    }
                
                    xmlDictFree: {
                        /** 
                        * @param dict {xmlDictPtr | null} xmlDictPtr
                        * @returns {any} void
                        */
                        (dict: xmlDictPtr | null): any
                    }
                
                    xmlDictGetUsage: {
                        /** 
                        * @param dict {xmlDictPtr | null} xmlDictPtr
                        * @returns {number} size_t
                        */
                        (dict: xmlDictPtr | null): number
                    }
                
                    xmlDictLookup: {
                        /** 
                        * @param dict {xmlDictPtr | null} xmlDictPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {string} q(const).xmlChar
                        */
                        (dict: xmlDictPtr | null, name: string | Buffer | null, len: number): string
                    }
                
                    xmlDictOwns: {
                        /** 
                        * @param dict {xmlDictPtr | null} xmlDictPtr
                        * @param str {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (dict: xmlDictPtr | null, str: string | Buffer | null): number
                    }
                
                    xmlDictQLookup: {
                        /** 
                        * @param dict {xmlDictPtr | null} xmlDictPtr
                        * @param prefix {string | Buffer | null} p.q(const).xmlChar
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} q(const).xmlChar
                        */
                        (dict: xmlDictPtr | null, prefix: string | Buffer | null, name: string | Buffer | null): string
                    }
                
                    xmlDictReference: {
                        /** 
                        * @param dict {xmlDictPtr | null} xmlDictPtr
                        * @returns {number} int
                        */
                        (dict: xmlDictPtr | null): number
                    }
                
                    xmlDictSetLimit: {
                        /** 
                        * @param dict {xmlDictPtr | null} xmlDictPtr
                        * @param limit {number} size_t
                        * @returns {number} size_t
                        */
                        (dict: xmlDictPtr | null, limit: number): number
                    }
                
                    xmlDictSize: {
                        /** 
                        * @param dict {xmlDictPtr | null} xmlDictPtr
                        * @returns {number} int
                        */
                        (dict: xmlDictPtr | null): number
                    }
                
                    xmlDocCopyNode: {
                        /** 
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param recursive {number} int
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (node: xmlNodePtr | null, doc: xmlDocPtr | null, recursive: number): xmlNodePtr | null
                    }
                
                    xmlDocCopyNodeList: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (doc: xmlDocPtr | null, node: xmlNodePtr | null): xmlNodePtr | null
                    }
                
                    xmlDocDump: {
                        /** 
                        * @param f {undefined} p.FILE
                        * @param cur {xmlDocPtr | null} xmlDocPtr
                        * @returns {number} int
                        */
                        (f: undefined, cur: xmlDocPtr | null): number
                    }
                
                    xmlDocDumpFormatMemory: {
                        /** 
                        * @param cur {xmlDocPtr | null} xmlDocPtr
                        * @param mem {string | Buffer | null} p.p.xmlChar
                        * @param size {number} p.int
                        * @param format {number} int
                        * @returns {any} void
                        */
                        (cur: xmlDocPtr | null, mem: string | Buffer | null, size: number, format: number): any
                    }
                
                    xmlDocDumpFormatMemoryEnc: {
                        /** 
                        * @param out_doc {xmlDocPtr | null} xmlDocPtr
                        * @param doc_txt_ptr {string | Buffer | null} p.p.xmlChar
                        * @param doc_txt_len {number} p.int
                        * @param txt_encoding {string | Buffer | null} p.q(const).char
                        * @param format {number} int
                        * @returns {any} void
                        */
                        (out_doc: xmlDocPtr | null, doc_txt_ptr: string | Buffer | null, doc_txt_len: number, txt_encoding: string | Buffer | null, format: number): any
                    }
                
                    xmlDocDumpMemory: {
                        /** 
                        * @param cur {xmlDocPtr | null} xmlDocPtr
                        * @param mem {string | Buffer | null} p.p.xmlChar
                        * @param size {number} p.int
                        * @returns {any} void
                        */
                        (cur: xmlDocPtr | null, mem: string | Buffer | null, size: number): any
                    }
                
                    xmlDocDumpMemoryEnc: {
                        /** 
                        * @param out_doc {xmlDocPtr | null} xmlDocPtr
                        * @param doc_txt_ptr {string | Buffer | null} p.p.xmlChar
                        * @param doc_txt_len {number} p.int
                        * @param txt_encoding {string | Buffer | null} p.q(const).char
                        * @returns {any} void
                        */
                        (out_doc: xmlDocPtr | null, doc_txt_ptr: string | Buffer | null, doc_txt_len: number, txt_encoding: string | Buffer | null): any
                    }
                
                    xmlDocFormatDump: {
                        /** 
                        * @param f {undefined} p.FILE
                        * @param cur {xmlDocPtr | null} xmlDocPtr
                        * @param format {number} int
                        * @returns {number} int
                        */
                        (f: undefined, cur: xmlDocPtr | null, format: number): number
                    }
                
                    xmlDocGetRootElement: {
                        /** 
                        * @param doc {xmlDocPtr | null} p.q(const).xmlDoc
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (doc: xmlDocPtr | null): xmlNodePtr | null
                    }
                
                    xmlDocHasRootElement: {
                        /** 
                        * @param doc {xmlDocPtr | null} p.q(const).xmlDoc
                        * @returns {boolean} bool
                        */
                        (doc: xmlDocPtr | null): boolean
                    }
                
                    xmlDocSetRootElement: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param root {xmlNodePtr | null} xmlNodePtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (doc: xmlDocPtr | null, root: xmlNodePtr | null): xmlNodePtr | null
                    }
                
                    xmlDumpAttributeDecl: {
                        /** 
                        * @param buf {xmlBufferPtr | null} xmlBufferPtr
                        * @param attr {xmlAttributePtr | null} xmlAttributePtr
                        * @returns {any} void
                        */
                        (buf: xmlBufferPtr | null, attr: xmlAttributePtr | null): any
                    }
                
                    xmlDumpAttributeTable: {
                        /** 
                        * @param buf {xmlBufferPtr | null} xmlBufferPtr
                        * @param table {xmlAttributeTablePtr | null} xmlAttributeTablePtr
                        * @returns {any} void
                        */
                        (buf: xmlBufferPtr | null, table: xmlAttributeTablePtr | null): any
                    }
                
                    xmlDumpElementDecl: {
                        /** 
                        * @param buf {xmlBufferPtr | null} xmlBufferPtr
                        * @param elem {xmlElementPtr | null} xmlElementPtr
                        * @returns {any} void
                        */
                        (buf: xmlBufferPtr | null, elem: xmlElementPtr | null): any
                    }
                
                    xmlDumpElementTable: {
                        /** 
                        * @param buf {xmlBufferPtr | null} xmlBufferPtr
                        * @param table {xmlElementTablePtr | null} xmlElementTablePtr
                        * @returns {any} void
                        */
                        (buf: xmlBufferPtr | null, table: xmlElementTablePtr | null): any
                    }
                
                    xmlDumpEntitiesTable: {
                        /** 
                        * @param buf {xmlBufferPtr | null} xmlBufferPtr
                        * @param table {xmlEntitiesTablePtr | null} xmlEntitiesTablePtr
                        * @returns {any} void
                        */
                        (buf: xmlBufferPtr | null, table: xmlEntitiesTablePtr | null): any
                    }
                
                    xmlDumpEntityDecl: {
                        /** 
                        * @param buf {xmlBufferPtr | null} xmlBufferPtr
                        * @param ent {xmlEntityPtr | null} xmlEntityPtr
                        * @returns {any} void
                        */
                        (buf: xmlBufferPtr | null, ent: xmlEntityPtr | null): any
                    }
                
                    xmlDumpNotationDecl: {
                        /** 
                        * @param buf {xmlBufferPtr | null} xmlBufferPtr
                        * @param nota {xmlNotationPtr | null} xmlNotationPtr
                        * @returns {any} void
                        */
                        (buf: xmlBufferPtr | null, nota: xmlNotationPtr | null): any
                    }
                
                    xmlDumpNotationTable: {
                        /** 
                        * @param buf {xmlBufferPtr | null} xmlBufferPtr
                        * @param table {xmlNotationTablePtr | null} xmlNotationTablePtr
                        * @returns {any} void
                        */
                        (buf: xmlBufferPtr | null, table: xmlNotationTablePtr | null): any
                    }
                
                    xmlElemDump: {
                        /** 
                        * @param f {undefined} p.FILE
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @returns {any} void
                        */
                        (f: undefined, doc: xmlDocPtr | null, cur: xmlNodePtr | null): any
                    }
                
                    xmlEncodeEntities: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param input {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} q(const).xmlChar
                        */
                        (doc: xmlDocPtr | null, input: string | Buffer | null): string
                    }
                
                    xmlEncodeEntitiesReentrant: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param input {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} xmlChar
                        */
                        (doc: xmlDocPtr | null, input: string | Buffer | null): string
                    }
                
                    xmlEncodeSpecialChars: {
                        /** 
                        * @param doc {xmlDocPtr | null} p.q(const).xmlDoc
                        * @param input {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} xmlChar
                        */
                        (doc: xmlDocPtr | null, input: string | Buffer | null): string
                    }
                
                    xmlExpCtxtNbCons: {
                        /** 
                        * @param ctxt {xmlExpCtxtPtr | null} xmlExpCtxtPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlExpCtxtPtr | null): number
                    }
                
                    xmlExpCtxtNbNodes: {
                        /** 
                        * @param ctxt {xmlExpCtxtPtr | null} xmlExpCtxtPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlExpCtxtPtr | null): number
                    }
                
                    xmlExpDump: {
                        /** 
                        * @param buf {xmlBufferPtr | null} xmlBufferPtr
                        * @param expr {xmlExpNodePtr | null} xmlExpNodePtr
                        * @returns {any} void
                        */
                        (buf: xmlBufferPtr | null, expr: xmlExpNodePtr | null): any
                    }
                
                    xmlExpExpDerive: {
                        /** 
                        * @param ctxt {xmlExpCtxtPtr | null} xmlExpCtxtPtr
                        * @param expr {xmlExpNodePtr | null} xmlExpNodePtr
                        * @param sub {xmlExpNodePtr | null} xmlExpNodePtr
                        * @returns {(xmlExpNodePtr | null)} xmlExpNodePtr
                        */
                        (ctxt: xmlExpCtxtPtr | null, expr: xmlExpNodePtr | null, sub: xmlExpNodePtr | null): xmlExpNodePtr | null
                    }
                
                    xmlExpFree: {
                        /** 
                        * @param ctxt {xmlExpCtxtPtr | null} xmlExpCtxtPtr
                        * @param expr {xmlExpNodePtr | null} xmlExpNodePtr
                        * @returns {any} void
                        */
                        (ctxt: xmlExpCtxtPtr | null, expr: xmlExpNodePtr | null): any
                    }
                
                    xmlExpFreeCtxt: {
                        /** 
                        * @param ctxt {xmlExpCtxtPtr | null} xmlExpCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlExpCtxtPtr | null): any
                    }
                
                    xmlExpGetLanguage: {
                        /** 
                        * @param ctxt {xmlExpCtxtPtr | null} xmlExpCtxtPtr
                        * @param expr {xmlExpNodePtr | null} xmlExpNodePtr
                        * @param langList {string | Buffer | null} p.p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {number} int
                        */
                        (ctxt: xmlExpCtxtPtr | null, expr: xmlExpNodePtr | null, langList: string | Buffer | null, len: number): number
                    }
                
                    xmlExpGetStart: {
                        /** 
                        * @param ctxt {xmlExpCtxtPtr | null} xmlExpCtxtPtr
                        * @param expr {xmlExpNodePtr | null} xmlExpNodePtr
                        * @param tokList {string | Buffer | null} p.p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {number} int
                        */
                        (ctxt: xmlExpCtxtPtr | null, expr: xmlExpNodePtr | null, tokList: string | Buffer | null, len: number): number
                    }
                
                    xmlExpIsNillable: {
                        /** 
                        * @param expr {xmlExpNodePtr | null} xmlExpNodePtr
                        * @returns {number} int
                        */
                        (expr: xmlExpNodePtr | null): number
                    }
                
                    xmlExpMaxToken: {
                        /** 
                        * @param expr {xmlExpNodePtr | null} xmlExpNodePtr
                        * @returns {number} int
                        */
                        (expr: xmlExpNodePtr | null): number
                    }
                
                    xmlExpNewAtom: {
                        /** 
                        * @param ctxt {xmlExpCtxtPtr | null} xmlExpCtxtPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {(xmlExpNodePtr | null)} xmlExpNodePtr
                        */
                        (ctxt: xmlExpCtxtPtr | null, name: string | Buffer | null, len: number): xmlExpNodePtr | null
                    }
                
                    xmlExpNewCtxt: {
                        /** 
                        * @param maxNodes {number} int
                        * @param dict {xmlDictPtr | null} xmlDictPtr
                        * @returns {xmlExpCtxtPtr} xmlExpCtxtPtr
                        */
                        (maxNodes: number, dict: xmlDictPtr | null): xmlExpCtxtPtr
                    }
                
                    xmlExpNewOr: {
                        /** 
                        * @param ctxt {xmlExpCtxtPtr | null} xmlExpCtxtPtr
                        * @param left {xmlExpNodePtr | null} xmlExpNodePtr
                        * @param right {xmlExpNodePtr | null} xmlExpNodePtr
                        * @returns {(xmlExpNodePtr | null)} xmlExpNodePtr
                        */
                        (ctxt: xmlExpCtxtPtr | null, left: xmlExpNodePtr | null, right: xmlExpNodePtr | null): xmlExpNodePtr | null
                    }
                
                    xmlExpNewRange: {
                        /** 
                        * @param ctxt {xmlExpCtxtPtr | null} xmlExpCtxtPtr
                        * @param subset {xmlExpNodePtr | null} xmlExpNodePtr
                        * @param min {number} int
                        * @param max {number} int
                        * @returns {(xmlExpNodePtr | null)} xmlExpNodePtr
                        */
                        (ctxt: xmlExpCtxtPtr | null, subset: xmlExpNodePtr | null, min: number, max: number): xmlExpNodePtr | null
                    }
                
                    xmlExpNewSeq: {
                        /** 
                        * @param ctxt {xmlExpCtxtPtr | null} xmlExpCtxtPtr
                        * @param left {xmlExpNodePtr | null} xmlExpNodePtr
                        * @param right {xmlExpNodePtr | null} xmlExpNodePtr
                        * @returns {(xmlExpNodePtr | null)} xmlExpNodePtr
                        */
                        (ctxt: xmlExpCtxtPtr | null, left: xmlExpNodePtr | null, right: xmlExpNodePtr | null): xmlExpNodePtr | null
                    }
                
                    xmlExpParse: {
                        /** 
                        * @param ctxt {xmlExpCtxtPtr | null} xmlExpCtxtPtr
                        * @param expr {string | Buffer | null} p.q(const).char
                        * @returns {(xmlExpNodePtr | null)} xmlExpNodePtr
                        */
                        (ctxt: xmlExpCtxtPtr | null, expr: string | Buffer | null): xmlExpNodePtr | null
                    }
                
                    xmlExpRef: {
                        /** 
                        * @param expr {xmlExpNodePtr | null} xmlExpNodePtr
                        * @returns {any} void
                        */
                        (expr: xmlExpNodePtr | null): any
                    }
                
                    xmlExpStringDerive: {
                        /** 
                        * @param ctxt {xmlExpCtxtPtr | null} xmlExpCtxtPtr
                        * @param expr {xmlExpNodePtr | null} xmlExpNodePtr
                        * @param str {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {(xmlExpNodePtr | null)} xmlExpNodePtr
                        */
                        (ctxt: xmlExpCtxtPtr | null, expr: xmlExpNodePtr | null, str: string | Buffer | null, len: number): xmlExpNodePtr | null
                    }
                
                    xmlExpSubsume: {
                        /** 
                        * @param ctxt {xmlExpCtxtPtr | null} xmlExpCtxtPtr
                        * @param expr {xmlExpNodePtr | null} xmlExpNodePtr
                        * @param sub {xmlExpNodePtr | null} xmlExpNodePtr
                        * @returns {number} int
                        */
                        (ctxt: xmlExpCtxtPtr | null, expr: xmlExpNodePtr | null, sub: xmlExpNodePtr | null): number
                    }
                
                    xmlFileClose: {
                        /** 
                        * @param context {any} p.void
                        * @returns {number} int
                        */
                        (context: any): number
                    }
                
                    xmlFileMatch: {
                        /** 
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @returns {number} int
                        */
                        (filename: string | Buffer | null): number
                    }
                
                    xmlFileOpen: {
                        /** 
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @returns {any} void
                        */
                        (filename: string | Buffer | null): any
                    }
                
                    xmlFileRead: {
                        /** 
                        * @param context {any} p.void
                        * @param buffer {string | Buffer | null} p.char
                        * @param len {number} int
                        * @returns {number} int
                        */
                        (context: any, buffer: string | Buffer | null, len: number): number
                    }
                
                    xmlFindCharEncodingHandler: {
                        /** 
                        * @param name {string | Buffer | null} p.q(const).char
                        * @returns {xmlCharEncodingHandlerPtr} xmlCharEncodingHandlerPtr
                        */
                        (name: string | Buffer | null): xmlCharEncodingHandlerPtr
                    }
                
                    xmlFirstElementChild: {
                        /** 
                        * @param parent {xmlNodePtr | null} xmlNodePtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (parent: xmlNodePtr | null): xmlNodePtr | null
                    }
                
                    xmlFreeAttributeTable: {
                        /** 
                        * @param table {xmlAttributeTablePtr | null} xmlAttributeTablePtr
                        * @returns {any} void
                        */
                        (table: xmlAttributeTablePtr | null): any
                    }
                
                    xmlFreeAutomata: {
                        /** 
                        * @param am {xmlAutomataPtr | null} xmlAutomataPtr
                        * @returns {any} void
                        */
                        (am: xmlAutomataPtr | null): any
                    }
                
                    xmlFreeCatalog: {
                        /** 
                        * @param catal {xmlCatalogPtr | null} xmlCatalogPtr
                        * @returns {any} void
                        */
                        (catal: xmlCatalogPtr | null): any
                    }
                
                    xmlFreeDoc: {
                        /** 
                        * @param cur {xmlDocPtr | null} xmlDocPtr
                        * @returns {any} void
                        */
                        (cur: xmlDocPtr | null): any
                    }
                
                    xmlFreeDocElementContent: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param cur {xmlElementContentPtr | null} xmlElementContentPtr
                        * @returns {any} void
                        */
                        (doc: xmlDocPtr | null, cur: xmlElementContentPtr | null): any
                    }
                
                    xmlFreeDtd: {
                        /** 
                        * @param cur {xmlDtdPtr | null} xmlDtdPtr
                        * @returns {any} void
                        */
                        (cur: xmlDtdPtr | null): any
                    }
                
                    xmlFreeElementContent: {
                        /** 
                        * @param cur {xmlElementContentPtr | null} xmlElementContentPtr
                        * @returns {any} void
                        */
                        (cur: xmlElementContentPtr | null): any
                    }
                
                    xmlFreeElementTable: {
                        /** 
                        * @param table {xmlElementTablePtr | null} xmlElementTablePtr
                        * @returns {any} void
                        */
                        (table: xmlElementTablePtr | null): any
                    }
                
                    xmlFreeEntitiesTable: {
                        /** 
                        * @param table {xmlEntitiesTablePtr | null} xmlEntitiesTablePtr
                        * @returns {any} void
                        */
                        (table: xmlEntitiesTablePtr | null): any
                    }
                
                    xmlFreeEnumeration: {
                        /** 
                        * @param cur {xmlEnumerationPtr | null} xmlEnumerationPtr
                        * @returns {any} void
                        */
                        (cur: xmlEnumerationPtr | null): any
                    }
                
                    xmlFreeIDTable: {
                        /** 
                        * @param table {xmlIDTablePtr | null} xmlIDTablePtr
                        * @returns {any} void
                        */
                        (table: xmlIDTablePtr | null): any
                    }
                
                    xmlFreeInputStream: {
                        /** 
                        * @param input {xmlParserInputPtr | null} xmlParserInputPtr
                        * @returns {any} void
                        */
                        (input: xmlParserInputPtr | null): any
                    }
                
                    xmlFreeMutex: {
                        /** 
                        * @param tok {xmlMutexPtr | null} xmlMutexPtr
                        * @returns {any} void
                        */
                        (tok: xmlMutexPtr | null): any
                    }
                
                    xmlFreeNode: {
                        /** 
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @returns {any} void
                        */
                        (cur: xmlNodePtr | null): any
                    }
                
                    xmlFreeNodeList: {
                        /** 
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @returns {any} void
                        */
                        (cur: xmlNodePtr | null): any
                    }
                
                    xmlFreeNotationTable: {
                        /** 
                        * @param table {xmlNotationTablePtr | null} xmlNotationTablePtr
                        * @returns {any} void
                        */
                        (table: xmlNotationTablePtr | null): any
                    }
                
                    xmlFreeNs: {
                        /** 
                        * @param cur {xmlNsPtr | null} xmlNsPtr
                        * @returns {any} void
                        */
                        (cur: xmlNsPtr | null): any
                    }
                
                    xmlFreeNsList: {
                        /** 
                        * @param cur {xmlNsPtr | null} xmlNsPtr
                        * @returns {any} void
                        */
                        (cur: xmlNsPtr | null): any
                    }
                
                    xmlFreeParserCtxt: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null): any
                    }
                
                    xmlFreeParserInputBuffer: {
                        /** 
                        * @param in {xmlParserInputBufferPtr | null} xmlParserInputBufferPtr
                        * @returns {any} void
                        */
                        (inArg: xmlParserInputBufferPtr | null): any
                    }
                
                    xmlFreePattern: {
                        /** 
                        * @param comp {xmlPatternPtr | null} xmlPatternPtr
                        * @returns {any} void
                        */
                        (comp: xmlPatternPtr | null): any
                    }
                
                    xmlFreePatternList: {
                        /** 
                        * @param comp {xmlPatternPtr | null} xmlPatternPtr
                        * @returns {any} void
                        */
                        (comp: xmlPatternPtr | null): any
                    }
                
                    xmlFreeProp: {
                        /** 
                        * @param cur {xmlAttrPtr | null} xmlAttrPtr
                        * @returns {any} void
                        */
                        (cur: xmlAttrPtr | null): any
                    }
                
                    xmlFreePropList: {
                        /** 
                        * @param cur {xmlAttrPtr | null} xmlAttrPtr
                        * @returns {any} void
                        */
                        (cur: xmlAttrPtr | null): any
                    }
                
                    xmlFreeRMutex: {
                        /** 
                        * @param tok {xmlRMutexPtr | null} xmlRMutexPtr
                        * @returns {any} void
                        */
                        (tok: xmlRMutexPtr | null): any
                    }
                
                    xmlFreeRefTable: {
                        /** 
                        * @param table {xmlRefTablePtr | null} xmlRefTablePtr
                        * @returns {any} void
                        */
                        (table: xmlRefTablePtr | null): any
                    }
                
                    xmlFreeStreamCtxt: {
                        /** 
                        * @param stream {xmlStreamCtxtPtr | null} xmlStreamCtxtPtr
                        * @returns {any} void
                        */
                        (stream: xmlStreamCtxtPtr | null): any
                    }
                
                    xmlFreeURI: {
                        /** 
                        * @param uri {xmlURIPtr | null} xmlURIPtr
                        * @returns {any} void
                        */
                        (uri: xmlURIPtr | null): any
                    }
                
                    xmlFreeValidCtxt: {
                        /** 
                        * @param arg0 {xmlValidCtxtPtr | null} xmlValidCtxtPtr
                        * @returns {any} void
                        */
                        (arg0: xmlValidCtxtPtr | null): any
                    }
                
                    xmlGcMemGet: {
                        /** 
                        * @param freeFunc {xmlFreeFunc} p.xmlFreeFunc
                        * @param mallocFunc {xmlMallocFunc} p.xmlMallocFunc
                        * @param mallocAtomicFunc {xmlMallocFunc} p.xmlMallocFunc
                        * @param reallocFunc {xmlReallocFunc} p.xmlReallocFunc
                        * @param strdupFunc {xmlStrdupFunc} p.xmlStrdupFunc
                        * @returns {number} int
                        */
                        (freeFunc: xmlFreeFunc, mallocFunc: xmlMallocFunc, mallocAtomicFunc: xmlMallocFunc, reallocFunc: xmlReallocFunc, strdupFunc: xmlStrdupFunc): number
                    }
                
                    xmlGcMemSetup: {
                        /** 
                        * @param freeFunc {xmlFreeFunc} xmlFreeFunc
                        * @param mallocFunc {xmlMallocFunc} xmlMallocFunc
                        * @param mallocAtomicFunc {xmlMallocFunc} xmlMallocFunc
                        * @param reallocFunc {xmlReallocFunc} xmlReallocFunc
                        * @param strdupFunc {xmlStrdupFunc} xmlStrdupFunc
                        * @returns {number} int
                        */
                        (freeFunc: xmlFreeFunc, mallocFunc: xmlMallocFunc, mallocAtomicFunc: xmlMallocFunc, reallocFunc: xmlReallocFunc, strdupFunc: xmlStrdupFunc): number
                    }
                
                    xmlGetBufferAllocationScheme: {
                        /** 
                        * @returns {xmlBufferAllocationScheme} xmlBufferAllocationScheme
                        */
                        (): xmlBufferAllocationScheme
                    }
                
                    xmlGetCharEncodingHandler: {
                        /** 
                        * @param enc {xmlCharEncoding} xmlCharEncoding
                        * @returns {xmlCharEncodingHandlerPtr} xmlCharEncodingHandlerPtr
                        */
                        (enc: xmlCharEncoding): xmlCharEncodingHandlerPtr
                    }
                
                    xmlGetCharEncodingName: {
                        /** 
                        * @param enc {xmlCharEncoding} xmlCharEncoding
                        * @returns {string} q(const).char
                        */
                        (enc: xmlCharEncoding): string
                    }
                
                    xmlGetCompressMode: {
                        /** 
                        * @returns {number} int
                        */
                        (): number
                    }
                
                    xmlGetDocCompressMode: {
                        /** 
                        * @param doc {xmlDocPtr | null} p.q(const).xmlDoc
                        * @returns {number} int
                        */
                        (doc: xmlDocPtr | null): number
                    }
                
                    xmlGetDocEntity: {
                        /** 
                        * @param doc {xmlDocPtr | null} p.q(const).xmlDoc
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlEntityPtr} xmlEntityPtr
                        */
                        (doc: xmlDocPtr | null, name: string | Buffer | null): xmlEntityPtr
                    }
                
                    xmlGetDtdAttrDesc: {
                        /** 
                        * @param dtd {xmlDtdPtr | null} xmlDtdPtr
                        * @param elem {string | Buffer | null} p.q(const).xmlChar
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlAttributePtr} xmlAttributePtr
                        */
                        (dtd: xmlDtdPtr | null, elem: string | Buffer | null, name: string | Buffer | null): xmlAttributePtr
                    }
                
                    xmlGetDtdElementDesc: {
                        /** 
                        * @param dtd {xmlDtdPtr | null} xmlDtdPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlElementPtr | null)} xmlElementPtr
                        */
                        (dtd: xmlDtdPtr | null, name: string | Buffer | null): xmlElementPtr | null
                    }
                
                    xmlGetDtdEntity: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlEntityPtr} xmlEntityPtr
                        */
                        (doc: xmlDocPtr | null, name: string | Buffer | null): xmlEntityPtr
                    }
                
                    xmlGetDtdNotationDesc: {
                        /** 
                        * @param dtd {xmlDtdPtr | null} xmlDtdPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlNotationPtr} xmlNotationPtr
                        */
                        (dtd: xmlDtdPtr | null, name: string | Buffer | null): xmlNotationPtr
                    }
                
                    xmlGetDtdQAttrDesc: {
                        /** 
                        * @param dtd {xmlDtdPtr | null} xmlDtdPtr
                        * @param elem {string | Buffer | null} p.q(const).xmlChar
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param prefix {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlAttributePtr} xmlAttributePtr
                        */
                        (dtd: xmlDtdPtr | null, elem: string | Buffer | null, name: string | Buffer | null, prefix: string | Buffer | null): xmlAttributePtr
                    }
                
                    xmlGetDtdQElementDesc: {
                        /** 
                        * @param dtd {xmlDtdPtr | null} xmlDtdPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param prefix {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlElementPtr | null)} xmlElementPtr
                        */
                        (dtd: xmlDtdPtr | null, name: string | Buffer | null, prefix: string | Buffer | null): xmlElementPtr | null
                    }
                
                    xmlGetEncodingAlias: {
                        /** 
                        * @param alias {string | Buffer | null} p.q(const).char
                        * @returns {string} q(const).char
                        */
                        (alias: string | Buffer | null): string
                    }
                
                    xmlGetExternalEntityLoader: {
                        /** 
                        * @returns {xmlExternalEntityLoader} xmlExternalEntityLoader
                        */
                        (): xmlExternalEntityLoader
                    }
                
                    xmlGetFeature: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param name {string | Buffer | null} p.q(const).char
                        * @param result {any} p.void
                        * @returns {number} int
                        */
                        (ctxt: xmlParserCtxtPtr | null, name: string | Buffer | null, result: any): number
                    }
                
                    xmlGetFeaturesList: {
                        /** 
                        * @param len {number} p.int
                        * @param result {string | Buffer | null} p.p.q(const).char
                        * @returns {number} int
                        */
                        (len: number, result: string | Buffer | null): number
                    }
                
                    xmlGetGlobalState: {
                        /** 
                        * @returns {xmlGlobalStatePtr} xmlGlobalStatePtr
                        */
                        (): xmlGlobalStatePtr
                    }
                
                    xmlGetID: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param ID {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlAttrPtr | null)} xmlAttrPtr
                        */
                        (doc: xmlDocPtr | null, ID: string | Buffer | null): xmlAttrPtr | null
                    }
                
                    xmlGetIntSubset: {
                        /** 
                        * @param doc {xmlDocPtr | null} p.q(const).xmlDoc
                        * @returns {(xmlDtdPtr | null)} xmlDtdPtr
                        */
                        (doc: xmlDocPtr | null): xmlDtdPtr | null
                    }
                
                    xmlGetLastChild: {
                        /** 
                        * @param parent {xmlNodePtr | null} p.q(const).xmlNode
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (parent: xmlNodePtr | null): xmlNodePtr | null
                    }
                
                    xmlGetLastError: {
                        /** 
                        * @returns {xmlErrorPtr} xmlErrorPtr
                        */
                        (): xmlErrorPtr
                    }
                
                    xmlGetLineNo: {
                        /** 
                        * @param node {xmlNodePtr | null} p.q(const).xmlNode
                        * @returns {number} long
                        */
                        (node: xmlNodePtr | null): number
                    }
                
                    xmlGetNoNsProp: {
                        /** 
                        * @param node {xmlNodePtr | null} p.q(const).xmlNode
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} xmlChar
                        */
                        (node: xmlNodePtr | null, name: string | Buffer | null): string
                    }
                
                    xmlGetNodePath: {
                        /** 
                        * @param node {xmlNodePtr | null} p.q(const).xmlNode
                        * @returns {string} xmlChar
                        */
                        (node: xmlNodePtr | null): string
                    }
                
                    xmlGetNsList: {
                        /** 
                        * @param doc {xmlDocPtr | null} p.q(const).xmlDoc
                        * @param node {xmlNodePtr | null} p.q(const).xmlNode
                        * @returns {xmlNsPtr[]} xmlNsPtr
                        */
                        (doc: xmlDocPtr | null, node: xmlNodePtr | null): xmlNsPtr[]
                    }
                
                    xmlGetNsProp: {
                        /** 
                        * @param node {xmlNodePtr | null} p.q(const).xmlNode
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param nameSpace {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} xmlChar
                        */
                        (node: xmlNodePtr | null, name: string | Buffer | null, nameSpace: string | Buffer | null): string
                    }
                
                    xmlGetParameterEntity: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlEntityPtr} xmlEntityPtr
                        */
                        (doc: xmlDocPtr | null, name: string | Buffer | null): xmlEntityPtr
                    }
                
                    xmlGetPredefinedEntity: {
                        /** 
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlEntityPtr} xmlEntityPtr
                        */
                        (name: string | Buffer | null): xmlEntityPtr
                    }
                
                    xmlGetProp: {
                        /** 
                        * @param node {xmlNodePtr | null} p.q(const).xmlNode
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} xmlChar
                        */
                        (node: xmlNodePtr | null, name: string | Buffer | null): string
                    }
                
                    xmlGetRefs: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param ID {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlListPtr} xmlListPtr
                        */
                        (doc: xmlDocPtr | null, ID: string | Buffer | null): xmlListPtr
                    }
                
                    xmlGetThreadId: {
                        /** 
                        * @returns {number} int
                        */
                        (): number
                    }
                
                    xmlGetUTF8Char: {
                        /** 
                        * @param utf {string | Buffer | null} p.q(const).unsigned char
                        * @param len {number} p.int
                        * @returns {number} int
                        */
                        (utf: string | Buffer | null, len: number): number
                    }
                
                    xmlHandleEntity: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param entity {xmlEntityPtr | null} xmlEntityPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null, entity: xmlEntityPtr | null): any
                    }
                
                    xmlHasFeature: {
                        /** 
                        * @param feature {xmlFeature} xmlFeature
                        * @returns {number} int
                        */
                        (feature: xmlFeature): number
                    }
                
                    xmlHasNsProp: {
                        /** 
                        * @param node {xmlNodePtr | null} p.q(const).xmlNode
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param nameSpace {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlAttrPtr | null)} xmlAttrPtr
                        */
                        (node: xmlNodePtr | null, name: string | Buffer | null, nameSpace: string | Buffer | null): xmlAttrPtr | null
                    }
                
                    xmlHasProp: {
                        /** 
                        * @param node {xmlNodePtr | null} p.q(const).xmlNode
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlAttrPtr | null)} xmlAttrPtr
                        */
                        (node: xmlNodePtr | null, name: string | Buffer | null): xmlAttrPtr | null
                    }
                
                    xmlHashAddEntry: {
                        /** 
                        * @param table {xmlHashTablePtr | null} xmlHashTablePtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param userdata {any} p.void
                        * @returns {number} int
                        */
                        (table: xmlHashTablePtr | null, name: string | Buffer | null, userdata: any): number
                    }
                
                    xmlHashAddEntry2: {
                        /** 
                        * @param table {xmlHashTablePtr | null} xmlHashTablePtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param name2 {string | Buffer | null} p.q(const).xmlChar
                        * @param userdata {any} p.void
                        * @returns {number} int
                        */
                        (table: xmlHashTablePtr | null, name: string | Buffer | null, name2: string | Buffer | null, userdata: any): number
                    }
                
                    xmlHashAddEntry3: {
                        /** 
                        * @param table {xmlHashTablePtr | null} xmlHashTablePtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param name2 {string | Buffer | null} p.q(const).xmlChar
                        * @param name3 {string | Buffer | null} p.q(const).xmlChar
                        * @param userdata {any} p.void
                        * @returns {number} int
                        */
                        (table: xmlHashTablePtr | null, name: string | Buffer | null, name2: string | Buffer | null, name3: string | Buffer | null, userdata: any): number
                    }
                
                    xmlHashCopy: {
                        /** 
                        * @param table {xmlHashTablePtr | null} xmlHashTablePtr
                        * @param f {xmlHashCopier} xmlHashCopier
                        * @returns {xmlHashTablePtr} xmlHashTablePtr
                        */
                        (table: xmlHashTablePtr | null, f: xmlHashCopier): xmlHashTablePtr
                    }
                
                    xmlHashCreate: {
                        /** 
                        * @param size {number} int
                        * @returns {xmlHashTablePtr} xmlHashTablePtr
                        */
                        (size: number): xmlHashTablePtr
                    }
                
                    xmlHashCreateDict: {
                        /** 
                        * @param size {number} int
                        * @param dict {xmlDictPtr | null} xmlDictPtr
                        * @returns {xmlHashTablePtr} xmlHashTablePtr
                        */
                        (size: number, dict: xmlDictPtr | null): xmlHashTablePtr
                    }
                
                    xmlHashDefaultDeallocator: {
                        /** 
                        * @param entry {any} p.void
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (entry: any, name: string | Buffer | null): any
                    }
                
                    xmlHashFree: {
                        /** 
                        * @param table {xmlHashTablePtr | null} xmlHashTablePtr
                        * @param f {xmlHashDeallocator} xmlHashDeallocator
                        * @returns {any} void
                        */
                        (table: xmlHashTablePtr | null, f: xmlHashDeallocator): any
                    }
                
                    xmlHashLookup: {
                        /** 
                        * @param table {xmlHashTablePtr | null} xmlHashTablePtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (table: xmlHashTablePtr | null, name: string | Buffer | null): any
                    }
                
                    xmlHashLookup2: {
                        /** 
                        * @param table {xmlHashTablePtr | null} xmlHashTablePtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param name2 {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (table: xmlHashTablePtr | null, name: string | Buffer | null, name2: string | Buffer | null): any
                    }
                
                    xmlHashLookup3: {
                        /** 
                        * @param table {xmlHashTablePtr | null} xmlHashTablePtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param name2 {string | Buffer | null} p.q(const).xmlChar
                        * @param name3 {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (table: xmlHashTablePtr | null, name: string | Buffer | null, name2: string | Buffer | null, name3: string | Buffer | null): any
                    }
                
                    xmlHashQLookup: {
                        /** 
                        * @param table {xmlHashTablePtr | null} xmlHashTablePtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param prefix {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (table: xmlHashTablePtr | null, name: string | Buffer | null, prefix: string | Buffer | null): any
                    }
                
                    xmlHashQLookup2: {
                        /** 
                        * @param table {xmlHashTablePtr | null} xmlHashTablePtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param prefix {string | Buffer | null} p.q(const).xmlChar
                        * @param name2 {string | Buffer | null} p.q(const).xmlChar
                        * @param prefix2 {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (table: xmlHashTablePtr | null, name: string | Buffer | null, prefix: string | Buffer | null, name2: string | Buffer | null, prefix2: string | Buffer | null): any
                    }
                
                    xmlHashQLookup3: {
                        /** 
                        * @param table {xmlHashTablePtr | null} xmlHashTablePtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param prefix {string | Buffer | null} p.q(const).xmlChar
                        * @param name2 {string | Buffer | null} p.q(const).xmlChar
                        * @param prefix2 {string | Buffer | null} p.q(const).xmlChar
                        * @param name3 {string | Buffer | null} p.q(const).xmlChar
                        * @param prefix3 {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (table: xmlHashTablePtr | null, name: string | Buffer | null, prefix: string | Buffer | null, name2: string | Buffer | null, prefix2: string | Buffer | null, name3: string | Buffer | null, prefix3: string | Buffer | null): any
                    }
                
                    xmlHashRemoveEntry: {
                        /** 
                        * @param table {xmlHashTablePtr | null} xmlHashTablePtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param f {xmlHashDeallocator} xmlHashDeallocator
                        * @returns {number} int
                        */
                        (table: xmlHashTablePtr | null, name: string | Buffer | null, f: xmlHashDeallocator): number
                    }
                
                    xmlHashRemoveEntry2: {
                        /** 
                        * @param table {xmlHashTablePtr | null} xmlHashTablePtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param name2 {string | Buffer | null} p.q(const).xmlChar
                        * @param f {xmlHashDeallocator} xmlHashDeallocator
                        * @returns {number} int
                        */
                        (table: xmlHashTablePtr | null, name: string | Buffer | null, name2: string | Buffer | null, f: xmlHashDeallocator): number
                    }
                
                    xmlHashRemoveEntry3: {
                        /** 
                        * @param table {xmlHashTablePtr | null} xmlHashTablePtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param name2 {string | Buffer | null} p.q(const).xmlChar
                        * @param name3 {string | Buffer | null} p.q(const).xmlChar
                        * @param f {xmlHashDeallocator} xmlHashDeallocator
                        * @returns {number} int
                        */
                        (table: xmlHashTablePtr | null, name: string | Buffer | null, name2: string | Buffer | null, name3: string | Buffer | null, f: xmlHashDeallocator): number
                    }
                
                    xmlHashScan: {
                        /** 
                        * @param table {xmlHashTablePtr | null} xmlHashTablePtr
                        * @param f {xmlHashScanner} xmlHashScanner
                        * @param data {any} p.void
                        * @returns {any} void
                        */
                        (table: xmlHashTablePtr | null, f: xmlHashScanner, data: any): any
                    }
                
                    xmlHashScan3: {
                        /** 
                        * @param table {xmlHashTablePtr | null} xmlHashTablePtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param name2 {string | Buffer | null} p.q(const).xmlChar
                        * @param name3 {string | Buffer | null} p.q(const).xmlChar
                        * @param f {xmlHashScanner} xmlHashScanner
                        * @param data {any} p.void
                        * @returns {any} void
                        */
                        (table: xmlHashTablePtr | null, name: string | Buffer | null, name2: string | Buffer | null, name3: string | Buffer | null, f: xmlHashScanner, data: any): any
                    }
                
                    xmlHashScanFull: {
                        /** 
                        * @param table {xmlHashTablePtr | null} xmlHashTablePtr
                        * @param f {xmlHashScannerFull} xmlHashScannerFull
                        * @param data {any} p.void
                        * @returns {any} void
                        */
                        (table: xmlHashTablePtr | null, f: xmlHashScannerFull, data: any): any
                    }
                
                    xmlHashScanFull3: {
                        /** 
                        * @param table {xmlHashTablePtr | null} xmlHashTablePtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param name2 {string | Buffer | null} p.q(const).xmlChar
                        * @param name3 {string | Buffer | null} p.q(const).xmlChar
                        * @param f {xmlHashScannerFull} xmlHashScannerFull
                        * @param data {any} p.void
                        * @returns {any} void
                        */
                        (table: xmlHashTablePtr | null, name: string | Buffer | null, name2: string | Buffer | null, name3: string | Buffer | null, f: xmlHashScannerFull, data: any): any
                    }
                
                    xmlHashSize: {
                        /** 
                        * @param table {xmlHashTablePtr | null} xmlHashTablePtr
                        * @returns {number} int
                        */
                        (table: xmlHashTablePtr | null): number
                    }
                
                    xmlHashUpdateEntry: {
                        /** 
                        * @param table {xmlHashTablePtr | null} xmlHashTablePtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param userdata {any} p.void
                        * @param f {xmlHashDeallocator} xmlHashDeallocator
                        * @returns {number} int
                        */
                        (table: xmlHashTablePtr | null, name: string | Buffer | null, userdata: any, f: xmlHashDeallocator): number
                    }
                
                    xmlHashUpdateEntry2: {
                        /** 
                        * @param table {xmlHashTablePtr | null} xmlHashTablePtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param name2 {string | Buffer | null} p.q(const).xmlChar
                        * @param userdata {any} p.void
                        * @param f {xmlHashDeallocator} xmlHashDeallocator
                        * @returns {number} int
                        */
                        (table: xmlHashTablePtr | null, name: string | Buffer | null, name2: string | Buffer | null, userdata: any, f: xmlHashDeallocator): number
                    }
                
                    xmlHashUpdateEntry3: {
                        /** 
                        * @param table {xmlHashTablePtr | null} xmlHashTablePtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param name2 {string | Buffer | null} p.q(const).xmlChar
                        * @param name3 {string | Buffer | null} p.q(const).xmlChar
                        * @param userdata {any} p.void
                        * @param f {xmlHashDeallocator} xmlHashDeallocator
                        * @returns {number} int
                        */
                        (table: xmlHashTablePtr | null, name: string | Buffer | null, name2: string | Buffer | null, name3: string | Buffer | null, userdata: any, f: xmlHashDeallocator): number
                    }
                
                    xmlIOParseDTD: {
                        /** 
                        * @param sax {xmlSAXHandlerPtr | null} xmlSAXHandlerPtr
                        * @param input {xmlParserInputBufferPtr | null} xmlParserInputBufferPtr
                        * @param enc {xmlCharEncoding} xmlCharEncoding
                        * @returns {(xmlDtdPtr | null)} xmlDtdPtr
                        */
                        (sax: xmlSAXHandlerPtr | null, input: xmlParserInputBufferPtr | null, enc: xmlCharEncoding): xmlDtdPtr | null
                    }
                
                    xmlInitCharEncodingHandlers: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    xmlInitGlobals: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    xmlInitMemory: {
                        /** 
                        * @returns {number} int
                        */
                        (): number
                    }
                
                    xmlInitNodeInfoSeq: {
                        /** 
                        * @param seq {xmlParserNodeInfoSeqPtr | null} xmlParserNodeInfoSeqPtr
                        * @returns {any} void
                        */
                        (seq: xmlParserNodeInfoSeqPtr | null): any
                    }
                
                    xmlInitParser: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    xmlInitParserCtxt: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlParserCtxtPtr | null): number
                    }
                
                    xmlInitThreads: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    xmlInitializeCatalog: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    xmlInitializeDict: {
                        /** 
                        * @returns {number} int
                        */
                        (): number
                    }
                
                    xmlInitializeGlobalState: {
                        /** 
                        * @param gs {xmlGlobalStatePtr | null} xmlGlobalStatePtr
                        * @returns {any} void
                        */
                        (gs: xmlGlobalStatePtr | null): any
                    }
                
                    xmlInitializePredefinedEntities: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    xmlIsBaseChar: {
                        /** 
                        * @param ch {number} unsigned int
                        * @returns {number} int
                        */
                        (ch: number): number
                    }
                
                    xmlIsBlank: {
                        /** 
                        * @param ch {number} unsigned int
                        * @returns {number} int
                        */
                        (ch: number): number
                    }
                
                    xmlIsBlankNode: {
                        /** 
                        * @param node {xmlNodePtr | null} p.q(const).xmlNode
                        * @returns {number} int
                        */
                        (node: xmlNodePtr | null): number
                    }
                
                    xmlIsChar: {
                        /** 
                        * @param ch {number} unsigned int
                        * @returns {number} int
                        */
                        (ch: number): number
                    }
                
                    xmlIsCombining: {
                        /** 
                        * @param ch {number} unsigned int
                        * @returns {number} int
                        */
                        (ch: number): number
                    }
                
                    xmlIsDigit: {
                        /** 
                        * @param ch {number} unsigned int
                        * @returns {number} int
                        */
                        (ch: number): number
                    }
                
                    xmlIsExtender: {
                        /** 
                        * @param ch {number} unsigned int
                        * @returns {number} int
                        */
                        (ch: number): number
                    }
                
                    xmlIsID: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param elem {xmlNodePtr | null} xmlNodePtr
                        * @param attr {xmlAttrPtr | null} xmlAttrPtr
                        * @returns {number} int
                        */
                        (doc: xmlDocPtr | null, elem: xmlNodePtr | null, attr: xmlAttrPtr | null): number
                    }
                
                    xmlIsIdeographic: {
                        /** 
                        * @param ch {number} unsigned int
                        * @returns {number} int
                        */
                        (ch: number): number
                    }
                
                    xmlIsLetter: {
                        /** 
                        * @param c {number} int
                        * @returns {number} int
                        */
                        (c: number): number
                    }
                
                    xmlIsMainThread: {
                        /** 
                        * @returns {number} int
                        */
                        (): number
                    }
                
                    xmlIsMixedElement: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (doc: xmlDocPtr | null, name: string | Buffer | null): number
                    }
                
                    xmlIsPubidChar: {
                        /** 
                        * @param ch {number} unsigned int
                        * @returns {number} int
                        */
                        (ch: number): number
                    }
                
                    xmlIsRef: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param elem {xmlNodePtr | null} xmlNodePtr
                        * @param attr {xmlAttrPtr | null} xmlAttrPtr
                        * @returns {number} int
                        */
                        (doc: xmlDocPtr | null, elem: xmlNodePtr | null, attr: xmlAttrPtr | null): number
                    }
                
                    xmlIsXHTML: {
                        /** 
                        * @param systemID {string | Buffer | null} p.q(const).xmlChar
                        * @param publicID {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (systemID: string | Buffer | null, publicID: string | Buffer | null): number
                    }
                
                    xmlKeepBlanksDefault: {
                        /** 
                        * @param val {number} int
                        * @returns {number} int
                        */
                        (val: number): number
                    }
                
                    xmlLastElementChild: {
                        /** 
                        * @param parent {xmlNodePtr | null} xmlNodePtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (parent: xmlNodePtr | null): xmlNodePtr | null
                    }
                
                    xmlLineNumbersDefault: {
                        /** 
                        * @param val {number} int
                        * @returns {number} int
                        */
                        (val: number): number
                    }
                
                    xmlLinkGetData: {
                        /** 
                        * @param lk {xmlLinkPtr | null} xmlLinkPtr
                        * @returns {any} void
                        */
                        (lk: xmlLinkPtr | null): any
                    }
                
                    xmlListAppend: {
                        /** 
                        * @param l {xmlListPtr | null} xmlListPtr
                        * @param data {any} p.void
                        * @returns {number} int
                        */
                        (l: xmlListPtr | null, data: any): number
                    }
                
                    xmlListClear: {
                        /** 
                        * @param l {xmlListPtr | null} xmlListPtr
                        * @returns {any} void
                        */
                        (l: xmlListPtr | null): any
                    }
                
                    xmlListCopy: {
                        /** 
                        * @param cur {xmlListPtr | null} xmlListPtr
                        * @param old {xmlListPtr | null} q(const).xmlListPtr
                        * @returns {number} int
                        */
                        (cur: xmlListPtr | null, old: xmlListPtr | null): number
                    }
                
                    xmlListCreate: {
                        /** 
                        * @param deallocator {xmlListDeallocator} xmlListDeallocator
                        * @param compare {xmlListDataCompare} xmlListDataCompare
                        * @returns {xmlListPtr} xmlListPtr
                        */
                        (deallocator: xmlListDeallocator, compare: xmlListDataCompare): xmlListPtr
                    }
                
                    xmlListDelete: {
                        /** 
                        * @param l {xmlListPtr | null} xmlListPtr
                        * @returns {any} void
                        */
                        (l: xmlListPtr | null): any
                    }
                
                    xmlListDup: {
                        /** 
                        * @param old {xmlListPtr | null} q(const).xmlListPtr
                        * @returns {xmlListPtr} xmlListPtr
                        */
                        (old: xmlListPtr | null): xmlListPtr
                    }
                
                    xmlListEmpty: {
                        /** 
                        * @param l {xmlListPtr | null} xmlListPtr
                        * @returns {number} int
                        */
                        (l: xmlListPtr | null): number
                    }
                
                    xmlListEnd: {
                        /** 
                        * @param l {xmlListPtr | null} xmlListPtr
                        * @returns {xmlLinkPtr} xmlLinkPtr
                        */
                        (l: xmlListPtr | null): xmlLinkPtr
                    }
                
                    xmlListFront: {
                        /** 
                        * @param l {xmlListPtr | null} xmlListPtr
                        * @returns {xmlLinkPtr} xmlLinkPtr
                        */
                        (l: xmlListPtr | null): xmlLinkPtr
                    }
                
                    xmlListInsert: {
                        /** 
                        * @param l {xmlListPtr | null} xmlListPtr
                        * @param data {any} p.void
                        * @returns {number} int
                        */
                        (l: xmlListPtr | null, data: any): number
                    }
                
                    xmlListMerge: {
                        /** 
                        * @param l1 {xmlListPtr | null} xmlListPtr
                        * @param l2 {xmlListPtr | null} xmlListPtr
                        * @returns {any} void
                        */
                        (l1: xmlListPtr | null, l2: xmlListPtr | null): any
                    }
                
                    xmlListPopBack: {
                        /** 
                        * @param l {xmlListPtr | null} xmlListPtr
                        * @returns {any} void
                        */
                        (l: xmlListPtr | null): any
                    }
                
                    xmlListPopFront: {
                        /** 
                        * @param l {xmlListPtr | null} xmlListPtr
                        * @returns {any} void
                        */
                        (l: xmlListPtr | null): any
                    }
                
                    xmlListPushBack: {
                        /** 
                        * @param l {xmlListPtr | null} xmlListPtr
                        * @param data {any} p.void
                        * @returns {number} int
                        */
                        (l: xmlListPtr | null, data: any): number
                    }
                
                    xmlListPushFront: {
                        /** 
                        * @param l {xmlListPtr | null} xmlListPtr
                        * @param data {any} p.void
                        * @returns {number} int
                        */
                        (l: xmlListPtr | null, data: any): number
                    }
                
                    xmlListRemoveAll: {
                        /** 
                        * @param l {xmlListPtr | null} xmlListPtr
                        * @param data {any} p.void
                        * @returns {number} int
                        */
                        (l: xmlListPtr | null, data: any): number
                    }
                
                    xmlListRemoveFirst: {
                        /** 
                        * @param l {xmlListPtr | null} xmlListPtr
                        * @param data {any} p.void
                        * @returns {number} int
                        */
                        (l: xmlListPtr | null, data: any): number
                    }
                
                    xmlListRemoveLast: {
                        /** 
                        * @param l {xmlListPtr | null} xmlListPtr
                        * @param data {any} p.void
                        * @returns {number} int
                        */
                        (l: xmlListPtr | null, data: any): number
                    }
                
                    xmlListReverse: {
                        /** 
                        * @param l {xmlListPtr | null} xmlListPtr
                        * @returns {any} void
                        */
                        (l: xmlListPtr | null): any
                    }
                
                    xmlListReverseSearch: {
                        /** 
                        * @param l {xmlListPtr | null} xmlListPtr
                        * @param data {any} p.void
                        * @returns {any} void
                        */
                        (l: xmlListPtr | null, data: any): any
                    }
                
                    xmlListReverseWalk: {
                        /** 
                        * @param l {xmlListPtr | null} xmlListPtr
                        * @param walker {xmlListWalker} xmlListWalker
                        * @param user {any} p.void
                        * @returns {any} void
                        */
                        (l: xmlListPtr | null, walker: xmlListWalker, user: any): any
                    }
                
                    xmlListSearch: {
                        /** 
                        * @param l {xmlListPtr | null} xmlListPtr
                        * @param data {any} p.void
                        * @returns {any} void
                        */
                        (l: xmlListPtr | null, data: any): any
                    }
                
                    xmlListSize: {
                        /** 
                        * @param l {xmlListPtr | null} xmlListPtr
                        * @returns {number} int
                        */
                        (l: xmlListPtr | null): number
                    }
                
                    xmlListSort: {
                        /** 
                        * @param l {xmlListPtr | null} xmlListPtr
                        * @returns {any} void
                        */
                        (l: xmlListPtr | null): any
                    }
                
                    xmlListWalk: {
                        /** 
                        * @param l {xmlListPtr | null} xmlListPtr
                        * @param walker {xmlListWalker} xmlListWalker
                        * @param user {any} p.void
                        * @returns {any} void
                        */
                        (l: xmlListPtr | null, walker: xmlListWalker, user: any): any
                    }
                
                    xmlLoadACatalog: {
                        /** 
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @returns {xmlCatalogPtr} xmlCatalogPtr
                        */
                        (filename: string | Buffer | null): xmlCatalogPtr
                    }
                
                    xmlLoadCatalog: {
                        /** 
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @returns {number} int
                        */
                        (filename: string | Buffer | null): number
                    }
                
                    xmlLoadCatalogs: {
                        /** 
                        * @param paths {string | Buffer | null} p.q(const).char
                        * @returns {any} void
                        */
                        (paths: string | Buffer | null): any
                    }
                
                    xmlLoadExternalEntity: {
                        /** 
                        * @param URL {string | Buffer | null} p.q(const).char
                        * @param ID {string | Buffer | null} p.q(const).char
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {xmlParserInputPtr} xmlParserInputPtr
                        */
                        (URL: string | Buffer | null, ID: string | Buffer | null, ctxt: xmlParserCtxtPtr | null): xmlParserInputPtr
                    }
                
                    xmlLoadSGMLSuperCatalog: {
                        /** 
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @returns {xmlCatalogPtr} xmlCatalogPtr
                        */
                        (filename: string | Buffer | null): xmlCatalogPtr
                    }
                
                    xmlLockLibrary: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    xmlMallocAtomicLoc: {
                        /** 
                        * @param size {number} size_t
                        * @param file {string | Buffer | null} p.q(const).char
                        * @param line {number} int
                        * @returns {any} void
                        */
                        (size: number, file: string | Buffer | null, line: number): any
                    }
                
                    xmlMallocLoc: {
                        /** 
                        * @param size {number} size_t
                        * @param file {string | Buffer | null} p.q(const).char
                        * @param line {number} int
                        * @returns {any} void
                        */
                        (size: number, file: string | Buffer | null, line: number): any
                    }
                
                    xmlMemBlocks: {
                        /** 
                        * @returns {number} int
                        */
                        (): number
                    }
                
                    xmlMemDisplay: {
                        /** 
                        * @param fp {undefined} p.FILE
                        * @returns {any} void
                        */
                        (fp: undefined): any
                    }
                
                    xmlMemDisplayLast: {
                        /** 
                        * @param fp {undefined} p.FILE
                        * @param nbBytes {number} long
                        * @returns {any} void
                        */
                        (fp: undefined, nbBytes: number): any
                    }
                
                    xmlMemFree: {
                        /** 
                        * @param ptr {any} p.void
                        * @returns {any} void
                        */
                        (ptr: any): any
                    }
                
                    xmlMemGet: {
                        /** 
                        * @param freeFunc {xmlFreeFunc} p.xmlFreeFunc
                        * @param mallocFunc {xmlMallocFunc} p.xmlMallocFunc
                        * @param reallocFunc {xmlReallocFunc} p.xmlReallocFunc
                        * @param strdupFunc {xmlStrdupFunc} p.xmlStrdupFunc
                        * @returns {number} int
                        */
                        (freeFunc: xmlFreeFunc, mallocFunc: xmlMallocFunc, reallocFunc: xmlReallocFunc, strdupFunc: xmlStrdupFunc): number
                    }
                
                    xmlMemMalloc: {
                        /** 
                        * @param size {number} size_t
                        * @returns {any} void
                        */
                        (size: number): any
                    }
                
                    xmlMemRealloc: {
                        /** 
                        * @param ptr {any} p.void
                        * @param size {number} size_t
                        * @returns {any} void
                        */
                        (ptr: any, size: number): any
                    }
                
                    xmlMemSetup: {
                        /** 
                        * @param freeFunc {xmlFreeFunc} xmlFreeFunc
                        * @param mallocFunc {xmlMallocFunc} xmlMallocFunc
                        * @param reallocFunc {xmlReallocFunc} xmlReallocFunc
                        * @param strdupFunc {xmlStrdupFunc} xmlStrdupFunc
                        * @returns {number} int
                        */
                        (freeFunc: xmlFreeFunc, mallocFunc: xmlMallocFunc, reallocFunc: xmlReallocFunc, strdupFunc: xmlStrdupFunc): number
                    }
                
                    xmlMemShow: {
                        /** 
                        * @param fp {undefined} p.FILE
                        * @param nr {number} int
                        * @returns {any} void
                        */
                        (fp: undefined, nr: number): any
                    }
                
                    xmlMemStrdupLoc: {
                        /** 
                        * @param str {string | Buffer | null} p.q(const).char
                        * @param file {string | Buffer | null} p.q(const).char
                        * @param line {number} int
                        * @returns {string} char
                        */
                        (str: string | Buffer | null, file: string | Buffer | null, line: number): string
                    }
                
                    xmlMemUsed: {
                        /** 
                        * @returns {number} int
                        */
                        (): number
                    }
                
                    xmlMemoryDump: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    xmlMemoryStrdup: {
                        /** 
                        * @param str {string | Buffer | null} p.q(const).char
                        * @returns {string} char
                        */
                        (str: string | Buffer | null): string
                    }
                
                    xmlModuleClose: {
                        /** 
                        * @param module {xmlModulePtr | null} xmlModulePtr
                        * @returns {number} int
                        */
                        (module: xmlModulePtr | null): number
                    }
                
                    xmlModuleFree: {
                        /** 
                        * @param module {xmlModulePtr | null} xmlModulePtr
                        * @returns {number} int
                        */
                        (module: xmlModulePtr | null): number
                    }
                
                    xmlModuleOpen: {
                        /** 
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @param options {number} int
                        * @returns {xmlModulePtr} xmlModulePtr
                        */
                        (filename: string | Buffer | null, options: number): xmlModulePtr
                    }
                
                    xmlModuleSymbol: {
                        /** 
                        * @param module {xmlModulePtr | null} xmlModulePtr
                        * @param name {string | Buffer | null} p.q(const).char
                        * @param result {any} p.p.void
                        * @returns {number} int
                        */
                        (module: xmlModulePtr | null, name: string | Buffer | null, result: any): number
                    }
                
                    xmlMutexLock: {
                        /** 
                        * @param tok {xmlMutexPtr | null} xmlMutexPtr
                        * @returns {any} void
                        */
                        (tok: xmlMutexPtr | null): any
                    }
                
                    xmlMutexUnlock: {
                        /** 
                        * @param tok {xmlMutexPtr | null} xmlMutexPtr
                        * @returns {any} void
                        */
                        (tok: xmlMutexPtr | null): any
                    }
                
                    xmlNamespaceParseNCName: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {string} xmlChar
                        */
                        (ctxt: xmlParserCtxtPtr | null): string
                    }
                
                    xmlNamespaceParseNSDef: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {string} xmlChar
                        */
                        (ctxt: xmlParserCtxtPtr | null): string
                    }
                
                    xmlNamespaceParseQName: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param prefix {string | Buffer | null} p.p.xmlChar
                        * @returns {string} xmlChar
                        */
                        (ctxt: xmlParserCtxtPtr | null, prefix: string | Buffer | null): string
                    }
                
                    xmlNewAutomata: {
                        /** 
                        * @returns {xmlAutomataPtr} xmlAutomataPtr
                        */
                        (): xmlAutomataPtr
                    }
                
                    xmlNewCDataBlock: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param content {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (doc: xmlDocPtr | null, content: string | Buffer | null, len: number): xmlNodePtr | null
                    }
                
                    xmlNewCatalog: {
                        /** 
                        * @param sgml {number} int
                        * @returns {xmlCatalogPtr} xmlCatalogPtr
                        */
                        (sgml: number): xmlCatalogPtr
                    }
                
                    xmlNewCharEncodingHandler: {
                        /** 
                        * @param name {string | Buffer | null} p.q(const).char
                        * @param input {xmlCharEncodingInputFunc} xmlCharEncodingInputFunc
                        * @param output {xmlCharEncodingOutputFunc} xmlCharEncodingOutputFunc
                        * @returns {xmlCharEncodingHandlerPtr} xmlCharEncodingHandlerPtr
                        */
                        (name: string | Buffer | null, input: xmlCharEncodingInputFunc, output: xmlCharEncodingOutputFunc): xmlCharEncodingHandlerPtr
                    }
                
                    xmlNewCharRef: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (doc: xmlDocPtr | null, name: string | Buffer | null): xmlNodePtr | null
                    }
                
                    xmlNewChild: {
                        /** 
                        * @param parent {xmlNodePtr | null} xmlNodePtr
                        * @param ns {xmlNsPtr | null} xmlNsPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param content {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (parent: xmlNodePtr | null, ns: xmlNsPtr | null, name: string | Buffer | null, content: string | Buffer | null): xmlNodePtr | null
                    }
                
                    xmlNewComment: {
                        /** 
                        * @param content {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (content: string | Buffer | null): xmlNodePtr | null
                    }
                
                    xmlNewDoc: {
                        /** 
                        * @param version {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlDocPtr | null)} xmlDocPtr
                        */
                        (version: string | Buffer | null): xmlDocPtr | null
                    }
                
                    xmlNewDocComment: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param content {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (doc: xmlDocPtr | null, content: string | Buffer | null): xmlNodePtr | null
                    }
                
                    xmlNewDocElementContent: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param type {xmlElementContentType} xmlElementContentType
                        * @returns {xmlElementContentPtr} xmlElementContentPtr
                        */
                        (doc: xmlDocPtr | null, name: string | Buffer | null, type: xmlElementContentType): xmlElementContentPtr
                    }
                
                    xmlNewDocFragment: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (doc: xmlDocPtr | null): xmlNodePtr | null
                    }
                
                    xmlNewDocNode: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param ns {xmlNsPtr | null} xmlNsPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param content {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (doc: xmlDocPtr | null, ns: xmlNsPtr | null, name: string | Buffer | null, content: string | Buffer | null): xmlNodePtr | null
                    }
                
                    xmlNewDocNodeEatName: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param ns {xmlNsPtr | null} xmlNsPtr
                        * @param name {string | Buffer | null} p.xmlChar
                        * @param content {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (doc: xmlDocPtr | null, ns: xmlNsPtr | null, name: string | Buffer | null, content: string | Buffer | null): xmlNodePtr | null
                    }
                
                    xmlNewDocPI: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param content {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (doc: xmlDocPtr | null, name: string | Buffer | null, content: string | Buffer | null): xmlNodePtr | null
                    }
                
                    xmlNewDocProp: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlAttrPtr | null)} xmlAttrPtr
                        */
                        (doc: xmlDocPtr | null, name: string | Buffer | null, value: string | Buffer | null): xmlAttrPtr | null
                    }
                
                    xmlNewDocRawNode: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param ns {xmlNsPtr | null} xmlNsPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param content {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (doc: xmlDocPtr | null, ns: xmlNsPtr | null, name: string | Buffer | null, content: string | Buffer | null): xmlNodePtr | null
                    }
                
                    xmlNewDocText: {
                        /** 
                        * @param doc {xmlDocPtr | null} p.q(const).xmlDoc
                        * @param content {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (doc: xmlDocPtr | null, content: string | Buffer | null): xmlNodePtr | null
                    }
                
                    xmlNewDocTextLen: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param content {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (doc: xmlDocPtr | null, content: string | Buffer | null, len: number): xmlNodePtr | null
                    }
                
                    xmlNewDtd: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param ExternalID {string | Buffer | null} p.q(const).xmlChar
                        * @param SystemID {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlDtdPtr | null)} xmlDtdPtr
                        */
                        (doc: xmlDocPtr | null, name: string | Buffer | null, ExternalID: string | Buffer | null, SystemID: string | Buffer | null): xmlDtdPtr | null
                    }
                
                    xmlNewElementContent: {
                        /** 
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param type {xmlElementContentType} xmlElementContentType
                        * @returns {xmlElementContentPtr} xmlElementContentPtr
                        */
                        (name: string | Buffer | null, type: xmlElementContentType): xmlElementContentPtr
                    }
                
                    xmlNewEntity: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param type {number} int
                        * @param ExternalID {string | Buffer | null} p.q(const).xmlChar
                        * @param SystemID {string | Buffer | null} p.q(const).xmlChar
                        * @param content {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlEntityPtr} xmlEntityPtr
                        */
                        (doc: xmlDocPtr | null, name: string | Buffer | null, type: number, ExternalID: string | Buffer | null, SystemID: string | Buffer | null, content: string | Buffer | null): xmlEntityPtr
                    }
                
                    xmlNewEntityInputStream: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param entity {xmlEntityPtr | null} xmlEntityPtr
                        * @returns {xmlParserInputPtr} xmlParserInputPtr
                        */
                        (ctxt: xmlParserCtxtPtr | null, entity: xmlEntityPtr | null): xmlParserInputPtr
                    }
                
                    xmlNewGlobalNs: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param href {string | Buffer | null} p.q(const).xmlChar
                        * @param prefix {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlNsPtr | null)} xmlNsPtr
                        */
                        (doc: xmlDocPtr | null, href: string | Buffer | null, prefix: string | Buffer | null): xmlNsPtr | null
                    }
                
                    xmlNewIOInputStream: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param input {xmlParserInputBufferPtr | null} xmlParserInputBufferPtr
                        * @param enc {xmlCharEncoding} xmlCharEncoding
                        * @returns {xmlParserInputPtr} xmlParserInputPtr
                        */
                        (ctxt: xmlParserCtxtPtr | null, input: xmlParserInputBufferPtr | null, enc: xmlCharEncoding): xmlParserInputPtr
                    }
                
                    xmlNewInputFromFile: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @returns {xmlParserInputPtr} xmlParserInputPtr
                        */
                        (ctxt: xmlParserCtxtPtr | null, filename: string | Buffer | null): xmlParserInputPtr
                    }
                
                    xmlNewInputStream: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {xmlParserInputPtr} xmlParserInputPtr
                        */
                        (ctxt: xmlParserCtxtPtr | null): xmlParserInputPtr
                    }
                
                    xmlNewMutex: {
                        /** 
                        * @returns {xmlMutexPtr} xmlMutexPtr
                        */
                        (): xmlMutexPtr
                    }
                
                    xmlNewNode: {
                        /** 
                        * @param ns {xmlNsPtr | null} xmlNsPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (ns: xmlNsPtr | null, name: string | Buffer | null): xmlNodePtr | null
                    }
                
                    xmlNewNodeEatName: {
                        /** 
                        * @param ns {xmlNsPtr | null} xmlNsPtr
                        * @param name {string | Buffer | null} p.xmlChar
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (ns: xmlNsPtr | null, name: string | Buffer | null): xmlNodePtr | null
                    }
                
                    xmlNewNs: {
                        /** 
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @param href {string | Buffer | null} p.q(const).xmlChar
                        * @param prefix {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlNsPtr | null)} xmlNsPtr
                        */
                        (node: xmlNodePtr | null, href: string | Buffer | null, prefix: string | Buffer | null): xmlNsPtr | null
                    }
                
                    xmlNewNsProp: {
                        /** 
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @param ns {xmlNsPtr | null} xmlNsPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlAttrPtr | null)} xmlAttrPtr
                        */
                        (node: xmlNodePtr | null, ns: xmlNsPtr | null, name: string | Buffer | null, value: string | Buffer | null): xmlAttrPtr | null
                    }
                
                    xmlNewNsPropEatName: {
                        /** 
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @param ns {xmlNsPtr | null} xmlNsPtr
                        * @param name {string | Buffer | null} p.xmlChar
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlAttrPtr | null)} xmlAttrPtr
                        */
                        (node: xmlNodePtr | null, ns: xmlNsPtr | null, name: string | Buffer | null, value: string | Buffer | null): xmlAttrPtr | null
                    }
                
                    xmlNewPI: {
                        /** 
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param content {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (name: string | Buffer | null, content: string | Buffer | null): xmlNodePtr | null
                    }
                
                    xmlNewParserCtxt: {
                        /** 
                        * @returns {xmlParserCtxtPtr} xmlParserCtxtPtr
                        */
                        (): xmlParserCtxtPtr
                    }
                
                    xmlNewProp: {
                        /** 
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlAttrPtr | null)} xmlAttrPtr
                        */
                        (node: xmlNodePtr | null, name: string | Buffer | null, value: string | Buffer | null): xmlAttrPtr | null
                    }
                
                    xmlNewRMutex: {
                        /** 
                        * @returns {xmlRMutexPtr} xmlRMutexPtr
                        */
                        (): xmlRMutexPtr
                    }
                
                    xmlNewReference: {
                        /** 
                        * @param doc {xmlDocPtr | null} p.q(const).xmlDoc
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (doc: xmlDocPtr | null, name: string | Buffer | null): xmlNodePtr | null
                    }
                
                    xmlNewStringInputStream: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param buffer {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlParserInputPtr} xmlParserInputPtr
                        */
                        (ctxt: xmlParserCtxtPtr | null, buffer: string | Buffer | null): xmlParserInputPtr
                    }
                
                    xmlNewText: {
                        /** 
                        * @param content {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (content: string | Buffer | null): xmlNodePtr | null
                    }
                
                    xmlNewTextChild: {
                        /** 
                        * @param parent {xmlNodePtr | null} xmlNodePtr
                        * @param ns {xmlNsPtr | null} xmlNsPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param content {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (parent: xmlNodePtr | null, ns: xmlNsPtr | null, name: string | Buffer | null, content: string | Buffer | null): xmlNodePtr | null
                    }
                
                    xmlNewTextLen: {
                        /** 
                        * @param content {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (content: string | Buffer | null, len: number): xmlNodePtr | null
                    }
                
                    xmlNewValidCtxt: {
                        /** 
                        * @returns {xmlValidCtxtPtr} xmlValidCtxtPtr
                        */
                        (): xmlValidCtxtPtr
                    }
                
                    xmlNextChar: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null): any
                    }
                
                    xmlNextElementSibling: {
                        /** 
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (node: xmlNodePtr | null): xmlNodePtr | null
                    }
                
                    xmlNoNetExternalEntityLoader: {
                        /** 
                        * @param URL {string | Buffer | null} p.q(const).char
                        * @param ID {string | Buffer | null} p.q(const).char
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {xmlParserInputPtr} xmlParserInputPtr
                        */
                        (URL: string | Buffer | null, ID: string | Buffer | null, ctxt: xmlParserCtxtPtr | null): xmlParserInputPtr
                    }
                
                    xmlNodeAddContent: {
                        /** 
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @param content {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (cur: xmlNodePtr | null, content: string | Buffer | null): any
                    }
                
                    xmlNodeAddContentLen: {
                        /** 
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @param content {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {any} void
                        */
                        (cur: xmlNodePtr | null, content: string | Buffer | null, len: number): any
                    }
                
                    xmlNodeBufGetContent: {
                        /** 
                        * @param buffer {xmlBufferPtr | null} xmlBufferPtr
                        * @param cur {xmlNodePtr | null} p.q(const).xmlNode
                        * @returns {number} int
                        */
                        (buffer: xmlBufferPtr | null, cur: xmlNodePtr | null): number
                    }
                
                    xmlNodeDump: {
                        /** 
                        * @param buf {xmlBufferPtr | null} xmlBufferPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @param level {number} int
                        * @param format {number} int
                        * @returns {number} int
                        */
                        (buf: xmlBufferPtr | null, doc: xmlDocPtr | null, cur: xmlNodePtr | null, level: number, format: number): number
                    }
                
                    xmlNodeDumpOutput: {
                        /** 
                        * @param buf {xmlOutputBufferPtr | null} xmlOutputBufferPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @param level {number} int
                        * @param format {number} int
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @returns {any} void
                        */
                        (buf: xmlOutputBufferPtr | null, doc: xmlDocPtr | null, cur: xmlNodePtr | null, level: number, format: number, encoding: string | Buffer | null): any
                    }
                
                    xmlNodeGetBase: {
                        /** 
                        * @param doc {xmlDocPtr | null} p.q(const).xmlDoc
                        * @param cur {xmlNodePtr | null} p.q(const).xmlNode
                        * @returns {string} xmlChar
                        */
                        (doc: xmlDocPtr | null, cur: xmlNodePtr | null): string
                    }
                
                    xmlNodeGetContent: {
                        /** 
                        * @param cur {xmlNodePtr | null} p.q(const).xmlNode
                        * @returns {string} xmlChar
                        */
                        (cur: xmlNodePtr | null): string
                    }
                
                    xmlNodeGetLang: {
                        /** 
                        * @param cur {xmlNodePtr | null} p.q(const).xmlNode
                        * @returns {string} xmlChar
                        */
                        (cur: xmlNodePtr | null): string
                    }
                
                    xmlNodeGetSpacePreserve: {
                        /** 
                        * @param cur {xmlNodePtr | null} p.q(const).xmlNode
                        * @returns {number} int
                        */
                        (cur: xmlNodePtr | null): number
                    }
                
                    xmlNodeIsText: {
                        /** 
                        * @param node {xmlNodePtr | null} p.q(const).xmlNode
                        * @returns {number} int
                        */
                        (node: xmlNodePtr | null): number
                    }
                
                    xmlNodeListGetRawString: {
                        /** 
                        * @param doc {xmlDocPtr | null} p.q(const).xmlDoc
                        * @param list {xmlNodePtr | null} p.q(const).xmlNode
                        * @param inLine {number} int
                        * @returns {string} xmlChar
                        */
                        (doc: xmlDocPtr | null, list: xmlNodePtr | null, inLine: number): string
                    }
                
                    xmlNodeListGetString: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param list {xmlNodePtr | null} p.q(const).xmlNode
                        * @param inLine {number} int
                        * @returns {string} xmlChar
                        */
                        (doc: xmlDocPtr | null, list: xmlNodePtr | null, inLine: number): string
                    }
                
                    xmlNodeSetBase: {
                        /** 
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @param uri {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (cur: xmlNodePtr | null, uri: string | Buffer | null): any
                    }
                
                    xmlNodeSetContent: {
                        /** 
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @param content {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (cur: xmlNodePtr | null, content: string | Buffer | null): any
                    }
                
                    xmlNodeSetContentLen: {
                        /** 
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @param content {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {any} void
                        */
                        (cur: xmlNodePtr | null, content: string | Buffer | null, len: number): any
                    }
                
                    xmlNodeSetLang: {
                        /** 
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @param lang {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (cur: xmlNodePtr | null, lang: string | Buffer | null): any
                    }
                
                    xmlNodeSetName: {
                        /** 
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (cur: xmlNodePtr | null, name: string | Buffer | null): any
                    }
                
                    xmlNodeSetSpacePreserve: {
                        /** 
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @param val {number} int
                        * @returns {any} void
                        */
                        (cur: xmlNodePtr | null, val: number): any
                    }
                
                    xmlNormalizeURIPath: {
                        /** 
                        * @param path {string | Buffer | null} p.char
                        * @returns {number} int
                        */
                        (path: string | Buffer | null): number
                    }
                
                    xmlNormalizeWindowsPath: {
                        /** 
                        * @param path {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} xmlChar
                        */
                        (path: string | Buffer | null): string
                    }
                
                    xmlOutputBufferClose: {
                        /** 
                        * @param out {xmlOutputBufferPtr | null} xmlOutputBufferPtr
                        * @returns {number} int
                        */
                        (out: xmlOutputBufferPtr | null): number
                    }
                
                    xmlOutputBufferCreateBuffer: {
                        /** 
                        * @param buffer {xmlBufferPtr | null} xmlBufferPtr
                        * @param encoder {xmlCharEncodingHandlerPtr | null} xmlCharEncodingHandlerPtr
                        * @returns {xmlOutputBufferPtr} xmlOutputBufferPtr
                        */
                        (buffer: xmlBufferPtr | null, encoder: xmlCharEncodingHandlerPtr | null): xmlOutputBufferPtr
                    }
                
                    xmlOutputBufferCreateFd: {
                        /** 
                        * @param fd {number} int
                        * @param encoder {xmlCharEncodingHandlerPtr | null} xmlCharEncodingHandlerPtr
                        * @returns {xmlOutputBufferPtr} xmlOutputBufferPtr
                        */
                        (fd: number, encoder: xmlCharEncodingHandlerPtr | null): xmlOutputBufferPtr
                    }
                
                    xmlOutputBufferCreateFile: {
                        /** 
                        * @param file {undefined} p.FILE
                        * @param encoder {xmlCharEncodingHandlerPtr | null} xmlCharEncodingHandlerPtr
                        * @returns {xmlOutputBufferPtr} xmlOutputBufferPtr
                        */
                        (file: undefined, encoder: xmlCharEncodingHandlerPtr | null): xmlOutputBufferPtr
                    }
                
                    xmlOutputBufferCreateFilename: {
                        /** 
                        * @param URI {string | Buffer | null} p.q(const).char
                        * @param encoder {xmlCharEncodingHandlerPtr | null} xmlCharEncodingHandlerPtr
                        * @param compression {number} int
                        * @returns {xmlOutputBufferPtr} xmlOutputBufferPtr
                        */
                        (URI: string | Buffer | null, encoder: xmlCharEncodingHandlerPtr | null, compression: number): xmlOutputBufferPtr
                    }
                
                    xmlOutputBufferCreateFilenameDefault: {
                        /** 
                        * @param func {xmlOutputBufferCreateFilenameFunc} xmlOutputBufferCreateFilenameFunc
                        * @returns {xmlOutputBufferCreateFilenameFunc} xmlOutputBufferCreateFilenameFunc
                        */
                        (func: xmlOutputBufferCreateFilenameFunc): xmlOutputBufferCreateFilenameFunc
                    }
                
                    xmlOutputBufferCreateIO: {
                        /** 
                        * @param iowrite {xmlOutputWriteCallback} xmlOutputWriteCallback
                        * @param ioclose {xmlOutputCloseCallback} xmlOutputCloseCallback
                        * @param ioctx {any} p.void
                        * @param encoder {xmlCharEncodingHandlerPtr | null} xmlCharEncodingHandlerPtr
                        * @returns {xmlOutputBufferPtr} xmlOutputBufferPtr
                        */
                        (iowrite: xmlOutputWriteCallback, ioclose: xmlOutputCloseCallback, ioctx: any, encoder: xmlCharEncodingHandlerPtr | null): xmlOutputBufferPtr
                    }
                
                    xmlOutputBufferFlush: {
                        /** 
                        * @param out {xmlOutputBufferPtr | null} xmlOutputBufferPtr
                        * @returns {number} int
                        */
                        (out: xmlOutputBufferPtr | null): number
                    }
                
                    xmlOutputBufferGetContent: {
                        /** 
                        * @param out {xmlOutputBufferPtr | null} xmlOutputBufferPtr
                        * @returns {string} q(const).xmlChar
                        */
                        (out: xmlOutputBufferPtr | null): string
                    }
                
                    xmlOutputBufferGetSize: {
                        /** 
                        * @param out {xmlOutputBufferPtr | null} xmlOutputBufferPtr
                        * @returns {number} size_t
                        */
                        (out: xmlOutputBufferPtr | null): number
                    }
                
                    xmlOutputBufferWrite: {
                        /** 
                        * @param out {xmlOutputBufferPtr | null} xmlOutputBufferPtr
                        * @param len {number} int
                        * @param buf {string | Buffer | null} p.q(const).char
                        * @returns {number} int
                        */
                        (out: xmlOutputBufferPtr | null, len: number, buf: string | Buffer | null): number
                    }
                
                    xmlOutputBufferWriteEscape: {
                        /** 
                        * @param out {xmlOutputBufferPtr | null} xmlOutputBufferPtr
                        * @param str {string | Buffer | null} p.q(const).xmlChar
                        * @param escaping {xmlCharEncodingOutputFunc} xmlCharEncodingOutputFunc
                        * @returns {number} int
                        */
                        (out: xmlOutputBufferPtr | null, str: string | Buffer | null, escaping: xmlCharEncodingOutputFunc): number
                    }
                
                    xmlOutputBufferWriteString: {
                        /** 
                        * @param out {xmlOutputBufferPtr | null} xmlOutputBufferPtr
                        * @param str {string | Buffer | null} p.q(const).char
                        * @returns {number} int
                        */
                        (out: xmlOutputBufferPtr | null, str: string | Buffer | null): number
                    }
                
                    xmlParseAttValue: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {string} xmlChar
                        */
                        (ctxt: xmlParserCtxtPtr | null): string
                    }
                
                    xmlParseAttribute: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param value {string | Buffer | null} p.p.xmlChar
                        * @returns {string} q(const).xmlChar
                        */
                        (ctxt: xmlParserCtxtPtr | null, value: string | Buffer | null): string
                    }
                
                    xmlParseAttributeListDecl: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null): any
                    }
                
                    xmlParseAttributeType: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param tree {xmlEnumerationPtr | null} p.xmlEnumerationPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlParserCtxtPtr | null, tree: xmlEnumerationPtr | null): number
                    }
                
                    xmlParseBalancedChunkMemory: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param sax {xmlSAXHandlerPtr | null} xmlSAXHandlerPtr
                        * @param user_data {any} p.void
                        * @param depth {number} int
                        * @param string {string | Buffer | null} p.q(const).xmlChar
                        * @param lst {xmlNodePtr | null} p.xmlNodePtr
                        * @returns {number} int
                        */
                        (doc: xmlDocPtr | null, sax: xmlSAXHandlerPtr | null, user_data: any, depth: number, string: string | Buffer | null, lst: xmlNodePtr | null): number
                    }
                
                    xmlParseBalancedChunkMemoryRecover: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param sax {xmlSAXHandlerPtr | null} xmlSAXHandlerPtr
                        * @param user_data {any} p.void
                        * @param depth {number} int
                        * @param string {string | Buffer | null} p.q(const).xmlChar
                        * @param lst {xmlNodePtr | null} p.xmlNodePtr
                        * @param recover {number} int
                        * @returns {number} int
                        */
                        (doc: xmlDocPtr | null, sax: xmlSAXHandlerPtr | null, user_data: any, depth: number, string: string | Buffer | null, lst: xmlNodePtr | null, recover: number): number
                    }
                
                    xmlParseCDSect: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null): any
                    }
                
                    xmlParseCatalogFile: {
                        /** 
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @returns {(xmlDocPtr | null)} xmlDocPtr
                        */
                        (filename: string | Buffer | null): xmlDocPtr | null
                    }
                
                    xmlParseCharData: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param cdata {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null, cdata: number): any
                    }
                
                    xmlParseCharEncoding: {
                        /** 
                        * @param name {string | Buffer | null} p.q(const).char
                        * @returns {xmlCharEncoding} xmlCharEncoding
                        */
                        (name: string | Buffer | null): xmlCharEncoding
                    }
                
                    xmlParseCharRef: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlParserCtxtPtr | null): number
                    }
                
                    xmlParseChunk: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param chunk {string | Buffer | null} p.q(const).char
                        * @param size {number} int
                        * @param terminate {number} int
                        * @returns {number} int
                        */
                        (ctxt: xmlParserCtxtPtr | null, chunk: string | Buffer | null, size: number, terminate: number): number
                    }
                
                    xmlParseComment: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null): any
                    }
                
                    xmlParseContent: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null): any
                    }
                
                    xmlParseCtxtExternalEntity: {
                        /** 
                        * @param ctx {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param URL {string | Buffer | null} p.q(const).xmlChar
                        * @param ID {string | Buffer | null} p.q(const).xmlChar
                        * @param lst {xmlNodePtr | null} p.xmlNodePtr
                        * @returns {number} int
                        */
                        (ctx: xmlParserCtxtPtr | null, URL: string | Buffer | null, ID: string | Buffer | null, lst: xmlNodePtr | null): number
                    }
                
                    xmlParseDTD: {
                        /** 
                        * @param ExternalID {string | Buffer | null} p.q(const).xmlChar
                        * @param SystemID {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlDtdPtr | null)} xmlDtdPtr
                        */
                        (ExternalID: string | Buffer | null, SystemID: string | Buffer | null): xmlDtdPtr | null
                    }
                
                    xmlParseDefaultDecl: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param value {string | Buffer | null} p.p.xmlChar
                        * @returns {number} int
                        */
                        (ctxt: xmlParserCtxtPtr | null, value: string | Buffer | null): number
                    }
                
                    xmlParseDoc: {
                        /** 
                        * @param cur {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlDocPtr | null)} xmlDocPtr
                        */
                        (cur: string | Buffer | null): xmlDocPtr | null
                    }
                
                    xmlParseDocTypeDecl: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null): any
                    }
                
                    xmlParseDocument: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlParserCtxtPtr | null): number
                    }
                
                    xmlParseElement: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null): any
                    }
                
                    xmlParseElementChildrenContentDecl: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param inputchk {number} int
                        * @returns {xmlElementContentPtr} xmlElementContentPtr
                        */
                        (ctxt: xmlParserCtxtPtr | null, inputchk: number): xmlElementContentPtr
                    }
                
                    xmlParseElementContentDecl: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param result {xmlElementContentPtr | null} p.xmlElementContentPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlParserCtxtPtr | null, name: string | Buffer | null, result: xmlElementContentPtr | null): number
                    }
                
                    xmlParseElementDecl: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlParserCtxtPtr | null): number
                    }
                
                    xmlParseElementMixedContentDecl: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param inputchk {number} int
                        * @returns {xmlElementContentPtr} xmlElementContentPtr
                        */
                        (ctxt: xmlParserCtxtPtr | null, inputchk: number): xmlElementContentPtr
                    }
                
                    xmlParseEncName: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {string} xmlChar
                        */
                        (ctxt: xmlParserCtxtPtr | null): string
                    }
                
                    xmlParseEncodingDecl: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {string} q(const).xmlChar
                        */
                        (ctxt: xmlParserCtxtPtr | null): string
                    }
                
                    xmlParseEndTag: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null): any
                    }
                
                    xmlParseEntity: {
                        /** 
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @returns {(xmlDocPtr | null)} xmlDocPtr
                        */
                        (filename: string | Buffer | null): xmlDocPtr | null
                    }
                
                    xmlParseEntityDecl: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null): any
                    }
                
                    xmlParseEntityRef: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {xmlEntityPtr} xmlEntityPtr
                        */
                        (ctxt: xmlParserCtxtPtr | null): xmlEntityPtr
                    }
                
                    xmlParseEntityValue: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param orig {string | Buffer | null} p.p.xmlChar
                        * @returns {string} xmlChar
                        */
                        (ctxt: xmlParserCtxtPtr | null, orig: string | Buffer | null): string
                    }
                
                    xmlParseEnumeratedType: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param tree {xmlEnumerationPtr | null} p.xmlEnumerationPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlParserCtxtPtr | null, tree: xmlEnumerationPtr | null): number
                    }
                
                    xmlParseEnumerationType: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {xmlEnumerationPtr} xmlEnumerationPtr
                        */
                        (ctxt: xmlParserCtxtPtr | null): xmlEnumerationPtr
                    }
                
                    xmlParseExtParsedEnt: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlParserCtxtPtr | null): number
                    }
                
                    xmlParseExternalEntity: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param sax {xmlSAXHandlerPtr | null} xmlSAXHandlerPtr
                        * @param user_data {any} p.void
                        * @param depth {number} int
                        * @param URL {string | Buffer | null} p.q(const).xmlChar
                        * @param ID {string | Buffer | null} p.q(const).xmlChar
                        * @param lst {xmlNodePtr | null} p.xmlNodePtr
                        * @returns {number} int
                        */
                        (doc: xmlDocPtr | null, sax: xmlSAXHandlerPtr | null, user_data: any, depth: number, URL: string | Buffer | null, ID: string | Buffer | null, lst: xmlNodePtr | null): number
                    }
                
                    xmlParseExternalID: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param publicID {string | Buffer | null} p.p.xmlChar
                        * @param strict {number} int
                        * @returns {string} xmlChar
                        */
                        (ctxt: xmlParserCtxtPtr | null, publicID: string | Buffer | null, strict: number): string
                    }
                
                    xmlParseExternalSubset: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param ExternalID {string | Buffer | null} p.q(const).xmlChar
                        * @param SystemID {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null, ExternalID: string | Buffer | null, SystemID: string | Buffer | null): any
                    }
                
                    xmlParseFile: {
                        /** 
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @returns {(xmlDocPtr | null)} xmlDocPtr
                        */
                        (filename: string | Buffer | null): xmlDocPtr | null
                    }
                
                    xmlParseInNodeContext: {
                        /** 
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @param data {string | Buffer | null} p.q(const).char
                        * @param datalen {number} int
                        * @param options {number} int
                        * @param lst {xmlNodePtr | null} p.xmlNodePtr
                        * @returns {xmlParserErrors} xmlParserErrors
                        */
                        (node: xmlNodePtr | null, data: string | Buffer | null, datalen: number, options: number, lst: xmlNodePtr | null): xmlParserErrors
                    }
                
                    xmlParseMarkupDecl: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null): any
                    }
                
                    xmlParseMemory: {
                        /** 
                        * @param buffer {string | Buffer | null} p.q(const).char
                        * @param size {number} int
                        * @returns {(xmlDocPtr | null)} xmlDocPtr
                        */
                        (buffer: string | Buffer | null, size: number): xmlDocPtr | null
                    }
                
                    xmlParseMisc: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null): any
                    }
                
                    xmlParseName: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {string} q(const).xmlChar
                        */
                        (ctxt: xmlParserCtxtPtr | null): string
                    }
                
                    xmlParseNamespace: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null): any
                    }
                
                    xmlParseNmtoken: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {string} xmlChar
                        */
                        (ctxt: xmlParserCtxtPtr | null): string
                    }
                
                    xmlParseNotationDecl: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null): any
                    }
                
                    xmlParseNotationType: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {xmlEnumerationPtr} xmlEnumerationPtr
                        */
                        (ctxt: xmlParserCtxtPtr | null): xmlEnumerationPtr
                    }
                
                    xmlParsePEReference: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null): any
                    }
                
                    xmlParsePI: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null): any
                    }
                
                    xmlParsePITarget: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {string} q(const).xmlChar
                        */
                        (ctxt: xmlParserCtxtPtr | null): string
                    }
                
                    xmlParsePubidLiteral: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {string} xmlChar
                        */
                        (ctxt: xmlParserCtxtPtr | null): string
                    }
                
                    xmlParseQuotedString: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {string} xmlChar
                        */
                        (ctxt: xmlParserCtxtPtr | null): string
                    }
                
                    xmlParseReference: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null): any
                    }
                
                    xmlParseSDDecl: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlParserCtxtPtr | null): number
                    }
                
                    xmlParseStartTag: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {string} q(const).xmlChar
                        */
                        (ctxt: xmlParserCtxtPtr | null): string
                    }
                
                    xmlParseSystemLiteral: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {string} xmlChar
                        */
                        (ctxt: xmlParserCtxtPtr | null): string
                    }
                
                    xmlParseTextDecl: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null): any
                    }
                
                    xmlParseURI: {
                        /** 
                        * @param str {string | Buffer | null} p.q(const).char
                        * @returns {xmlURIPtr} xmlURIPtr
                        */
                        (str: string | Buffer | null): xmlURIPtr
                    }
                
                    xmlParseURIRaw: {
                        /** 
                        * @param str {string | Buffer | null} p.q(const).char
                        * @param raw {number} int
                        * @returns {xmlURIPtr} xmlURIPtr
                        */
                        (str: string | Buffer | null, raw: number): xmlURIPtr
                    }
                
                    xmlParseURIReference: {
                        /** 
                        * @param uri {xmlURIPtr | null} xmlURIPtr
                        * @param str {string | Buffer | null} p.q(const).char
                        * @returns {number} int
                        */
                        (uri: xmlURIPtr | null, str: string | Buffer | null): number
                    }
                
                    xmlParseVersionInfo: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {string} xmlChar
                        */
                        (ctxt: xmlParserCtxtPtr | null): string
                    }
                
                    xmlParseVersionNum: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {string} xmlChar
                        */
                        (ctxt: xmlParserCtxtPtr | null): string
                    }
                
                    xmlParseXMLDecl: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null): any
                    }
                
                    xmlParserAddNodeInfo: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param info {xmlParserNodeInfoPtr | null} q(const).xmlParserNodeInfoPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null, info: xmlParserNodeInfoPtr | null): any
                    }
                
                    xmlParserError: {
                        /** 
                        * @param ctx {any} p.void
                        * @param msg {string | Buffer | null} p.q(const).char
                        * @param arg2 {undefined} v(...)
                        * @returns {any} void
                        */
                        (ctx: any, msg: string | Buffer | null, arg2: undefined): any
                    }
                
                    xmlParserFindNodeInfo: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} q(const).xmlParserCtxtPtr
                        * @param node {xmlNodePtr | null} q(const).xmlNodePtr
                        * @returns {xmlParserNodeInfo} q(const).xmlParserNodeInfo
                        */
                        (ctxt: xmlParserCtxtPtr | null, node: xmlNodePtr | null): xmlParserNodeInfo
                    }
                
                    xmlParserFindNodeInfoIndex: {
                        /** 
                        * @param seq {xmlParserNodeInfoSeqPtr | null} q(const).xmlParserNodeInfoSeqPtr
                        * @param node {xmlNodePtr | null} q(const).xmlNodePtr
                        * @returns {number} unsigned long
                        */
                        (seq: xmlParserNodeInfoSeqPtr | null, node: xmlNodePtr | null): number
                    }
                
                    xmlParserGetDirectory: {
                        /** 
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @returns {string} char
                        */
                        (filename: string | Buffer | null): string
                    }
                
                    xmlParserHandlePEReference: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null): any
                    }
                
                    xmlParserHandleReference: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null): any
                    }
                
                    xmlParserInputBufferCreateFd: {
                        /** 
                        * @param fd {number} int
                        * @param enc {xmlCharEncoding} xmlCharEncoding
                        * @returns {xmlParserInputBufferPtr} xmlParserInputBufferPtr
                        */
                        (fd: number, enc: xmlCharEncoding): xmlParserInputBufferPtr
                    }
                
                    xmlParserInputBufferCreateFile: {
                        /** 
                        * @param file {undefined} p.FILE
                        * @param enc {xmlCharEncoding} xmlCharEncoding
                        * @returns {xmlParserInputBufferPtr} xmlParserInputBufferPtr
                        */
                        (file: undefined, enc: xmlCharEncoding): xmlParserInputBufferPtr
                    }
                
                    xmlParserInputBufferCreateFilename: {
                        /** 
                        * @param URI {string | Buffer | null} p.q(const).char
                        * @param enc {xmlCharEncoding} xmlCharEncoding
                        * @returns {xmlParserInputBufferPtr} xmlParserInputBufferPtr
                        */
                        (URI: string | Buffer | null, enc: xmlCharEncoding): xmlParserInputBufferPtr
                    }
                
                    xmlParserInputBufferCreateFilenameDefault: {
                        /** 
                        * @param func {xmlParserInputBufferCreateFilenameFunc} xmlParserInputBufferCreateFilenameFunc
                        * @returns {xmlParserInputBufferCreateFilenameFunc} xmlParserInputBufferCreateFilenameFunc
                        */
                        (func: xmlParserInputBufferCreateFilenameFunc): xmlParserInputBufferCreateFilenameFunc
                    }
                
                    xmlParserInputBufferCreateIO: {
                        /** 
                        * @param ioread {xmlInputReadCallback} xmlInputReadCallback
                        * @param ioclose {xmlInputCloseCallback} xmlInputCloseCallback
                        * @param ioctx {any} p.void
                        * @param enc {xmlCharEncoding} xmlCharEncoding
                        * @returns {xmlParserInputBufferPtr} xmlParserInputBufferPtr
                        */
                        (ioread: xmlInputReadCallback, ioclose: xmlInputCloseCallback, ioctx: any, enc: xmlCharEncoding): xmlParserInputBufferPtr
                    }
                
                    xmlParserInputBufferCreateMem: {
                        /** 
                        * @param mem {string | Buffer | null} p.q(const).char
                        * @param size {number} int
                        * @param enc {xmlCharEncoding} xmlCharEncoding
                        * @returns {xmlParserInputBufferPtr} xmlParserInputBufferPtr
                        */
                        (mem: string | Buffer | null, size: number, enc: xmlCharEncoding): xmlParserInputBufferPtr
                    }
                
                    xmlParserInputBufferCreateStatic: {
                        /** 
                        * @param mem {string | Buffer | null} p.q(const).char
                        * @param size {number} int
                        * @param enc {xmlCharEncoding} xmlCharEncoding
                        * @returns {xmlParserInputBufferPtr} xmlParserInputBufferPtr
                        */
                        (mem: string | Buffer | null, size: number, enc: xmlCharEncoding): xmlParserInputBufferPtr
                    }
                
                    xmlParserInputBufferGrow: {
                        /** 
                        * @param in {xmlParserInputBufferPtr | null} xmlParserInputBufferPtr
                        * @param len {number} int
                        * @returns {number} int
                        */
                        (inArg: xmlParserInputBufferPtr | null, len: number): number
                    }
                
                    xmlParserInputBufferPush: {
                        /** 
                        * @param in {xmlParserInputBufferPtr | null} xmlParserInputBufferPtr
                        * @param len {number} int
                        * @param buf {string | Buffer | null} p.q(const).char
                        * @returns {number} int
                        */
                        (inArg: xmlParserInputBufferPtr | null, len: number, buf: string | Buffer | null): number
                    }
                
                    xmlParserInputBufferRead: {
                        /** 
                        * @param in {xmlParserInputBufferPtr | null} xmlParserInputBufferPtr
                        * @param len {number} int
                        * @returns {number} int
                        */
                        (inArg: xmlParserInputBufferPtr | null, len: number): number
                    }
                
                    xmlParserInputGrow: {
                        /** 
                        * @param in {xmlParserInputPtr | null} xmlParserInputPtr
                        * @param len {number} int
                        * @returns {number} int
                        */
                        (inArg: xmlParserInputPtr | null, len: number): number
                    }
                
                    xmlParserInputRead: {
                        /** 
                        * @param in {xmlParserInputPtr | null} xmlParserInputPtr
                        * @param len {number} int
                        * @returns {number} int
                        */
                        (inArg: xmlParserInputPtr | null, len: number): number
                    }
                
                    xmlParserInputShrink: {
                        /** 
                        * @param in {xmlParserInputPtr | null} xmlParserInputPtr
                        * @returns {any} void
                        */
                        (inArg: xmlParserInputPtr | null): any
                    }
                
                    xmlParserPrintFileContext: {
                        /** 
                        * @param input {xmlParserInputPtr | null} xmlParserInputPtr
                        * @returns {any} void
                        */
                        (input: xmlParserInputPtr | null): any
                    }
                
                    xmlParserPrintFileInfo: {
                        /** 
                        * @param input {xmlParserInputPtr | null} xmlParserInputPtr
                        * @returns {any} void
                        */
                        (input: xmlParserInputPtr | null): any
                    }
                
                    xmlParserValidityError: {
                        /** 
                        * @param ctx {any} p.void
                        * @param msg {string | Buffer | null} p.q(const).char
                        * @param arg2 {undefined} v(...)
                        * @returns {any} void
                        */
                        (ctx: any, msg: string | Buffer | null, arg2: undefined): any
                    }
                
                    xmlParserValidityWarning: {
                        /** 
                        * @param ctx {any} p.void
                        * @param msg {string | Buffer | null} p.q(const).char
                        * @param arg2 {undefined} v(...)
                        * @returns {any} void
                        */
                        (ctx: any, msg: string | Buffer | null, arg2: undefined): any
                    }
                
                    xmlParserWarning: {
                        /** 
                        * @param ctx {any} p.void
                        * @param msg {string | Buffer | null} p.q(const).char
                        * @param arg2 {undefined} v(...)
                        * @returns {any} void
                        */
                        (ctx: any, msg: string | Buffer | null, arg2: undefined): any
                    }
                
                    xmlPathToURI: {
                        /** 
                        * @param path {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} xmlChar
                        */
                        (path: string | Buffer | null): string
                    }
                
                    xmlPatternFromRoot: {
                        /** 
                        * @param comp {xmlPatternPtr | null} xmlPatternPtr
                        * @returns {number} int
                        */
                        (comp: xmlPatternPtr | null): number
                    }
                
                    xmlPatternGetStreamCtxt: {
                        /** 
                        * @param comp {xmlPatternPtr | null} xmlPatternPtr
                        * @returns {xmlStreamCtxtPtr} xmlStreamCtxtPtr
                        */
                        (comp: xmlPatternPtr | null): xmlStreamCtxtPtr
                    }
                
                    xmlPatternMatch: {
                        /** 
                        * @param comp {xmlPatternPtr | null} xmlPatternPtr
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @returns {number} int
                        */
                        (comp: xmlPatternPtr | null, node: xmlNodePtr | null): number
                    }
                
                    xmlPatternMaxDepth: {
                        /** 
                        * @param comp {xmlPatternPtr | null} xmlPatternPtr
                        * @returns {number} int
                        */
                        (comp: xmlPatternPtr | null): number
                    }
                
                    xmlPatternMinDepth: {
                        /** 
                        * @param comp {xmlPatternPtr | null} xmlPatternPtr
                        * @returns {number} int
                        */
                        (comp: xmlPatternPtr | null): number
                    }
                
                    xmlPatternStreamable: {
                        /** 
                        * @param comp {xmlPatternPtr | null} xmlPatternPtr
                        * @returns {number} int
                        */
                        (comp: xmlPatternPtr | null): number
                    }
                
                    xmlPatterncompile: {
                        /** 
                        * @param pattern {string | Buffer | null} p.q(const).xmlChar
                        * @param dict {xmlDict} p.xmlDict
                        * @param flags {number} int
                        * @param namespaces {string | Buffer | null} p.p.q(const).xmlChar
                        * @returns {xmlPatternPtr} xmlPatternPtr
                        */
                        (pattern: string | Buffer | null, dict: xmlDict, flags: number, namespaces: string | Buffer | null): xmlPatternPtr
                    }
                
                    xmlPedanticParserDefault: {
                        /** 
                        * @param val {number} int
                        * @returns {number} int
                        */
                        (val: number): number
                    }
                
                    xmlPopInput: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {string} xmlChar
                        */
                        (ctxt: xmlParserCtxtPtr | null): string
                    }
                
                    xmlPopInputCallbacks: {
                        /** 
                        * @returns {number} int
                        */
                        (): number
                    }
                
                    xmlPopOutputCallbacks: {
                        /** 
                        * @returns {number} int
                        */
                        (): number
                    }
                
                    xmlPreviousElementSibling: {
                        /** 
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (node: xmlNodePtr | null): xmlNodePtr | null
                    }
                
                    xmlPrintURI: {
                        /** 
                        * @param stream {undefined} p.FILE
                        * @param uri {xmlURIPtr | null} xmlURIPtr
                        * @returns {any} void
                        */
                        (stream: undefined, uri: xmlURIPtr | null): any
                    }
                
                    xmlPushInput: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param input {xmlParserInputPtr | null} xmlParserInputPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlParserCtxtPtr | null, input: xmlParserInputPtr | null): number
                    }
                
                    xmlRMutexLock: {
                        /** 
                        * @param tok {xmlRMutexPtr | null} xmlRMutexPtr
                        * @returns {any} void
                        */
                        (tok: xmlRMutexPtr | null): any
                    }
                
                    xmlRMutexUnlock: {
                        /** 
                        * @param tok {xmlRMutexPtr | null} xmlRMutexPtr
                        * @returns {any} void
                        */
                        (tok: xmlRMutexPtr | null): any
                    }
                
                    xmlReadDoc: {
                        /** 
                        * @param cur {string | Buffer | null} p.q(const).xmlChar
                        * @param URL {string | Buffer | null} p.q(const).char
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param options {number} int
                        * @returns {(xmlDocPtr | null)} xmlDocPtr
                        */
                        (cur: string | Buffer | null, URL: string | Buffer | null, encoding: string | Buffer | null, options: number): xmlDocPtr | null
                    }
                
                    xmlReadFd: {
                        /** 
                        * @param fd {number} int
                        * @param URL {string | Buffer | null} p.q(const).char
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param options {number} int
                        * @returns {(xmlDocPtr | null)} xmlDocPtr
                        */
                        (fd: number, URL: string | Buffer | null, encoding: string | Buffer | null, options: number): xmlDocPtr | null
                    }
                
                    xmlReadFile: {
                        /** 
                        * @param URL {string | Buffer | null} p.q(const).char
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param options {number} int
                        * @returns {(xmlDocPtr | null)} xmlDocPtr
                        */
                        (URL: string | Buffer | null, encoding: string | Buffer | null, options: number): xmlDocPtr | null
                    }
                
                    xmlReadIO: {
                        /** 
                        * @param ioread {xmlInputReadCallback} xmlInputReadCallback
                        * @param ioclose {xmlInputCloseCallback} xmlInputCloseCallback
                        * @param ioctx {any} p.void
                        * @param URL {string | Buffer | null} p.q(const).char
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param options {number} int
                        * @returns {(xmlDocPtr | null)} xmlDocPtr
                        */
                        (ioread: xmlInputReadCallback, ioclose: xmlInputCloseCallback, ioctx: any, URL: string | Buffer | null, encoding: string | Buffer | null, options: number): xmlDocPtr | null
                    }
                
                    xmlReadMemory: {
                        /** 
                        * @param buffer {string | Buffer | null} p.q(const).char
                        * @param size {number} int
                        * @param URL {string | Buffer | null} p.q(const).char
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param options {number} int
                        * @returns {(xmlDocPtr | null)} xmlDocPtr
                        */
                        (buffer: string | Buffer | null, size: number, URL: string | Buffer | null, encoding: string | Buffer | null, options: number): xmlDocPtr | null
                    }
                
                    xmlReallocLoc: {
                        /** 
                        * @param ptr {any} p.void
                        * @param size {number} size_t
                        * @param file {string | Buffer | null} p.q(const).char
                        * @param line {number} int
                        * @returns {any} void
                        */
                        (ptr: any, size: number, file: string | Buffer | null, line: number): any
                    }
                
                    xmlReconciliateNs: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param tree {xmlNodePtr | null} xmlNodePtr
                        * @returns {number} int
                        */
                        (doc: xmlDocPtr | null, tree: xmlNodePtr | null): number
                    }
                
                    xmlRecoverDoc: {
                        /** 
                        * @param cur {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlDocPtr | null)} xmlDocPtr
                        */
                        (cur: string | Buffer | null): xmlDocPtr | null
                    }
                
                    xmlRecoverFile: {
                        /** 
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @returns {(xmlDocPtr | null)} xmlDocPtr
                        */
                        (filename: string | Buffer | null): xmlDocPtr | null
                    }
                
                    xmlRecoverMemory: {
                        /** 
                        * @param buffer {string | Buffer | null} p.q(const).char
                        * @param size {number} int
                        * @returns {(xmlDocPtr | null)} xmlDocPtr
                        */
                        (buffer: string | Buffer | null, size: number): xmlDocPtr | null
                    }
                
                    xmlRegExecErrInfo: {
                        /** 
                        * @param exec {xmlRegExecCtxtPtr | null} xmlRegExecCtxtPtr
                        * @param string {string | Buffer | null} p.p.q(const).xmlChar
                        * @param nbval {number} p.int
                        * @param nbneg {number} p.int
                        * @param values {string | Buffer | null} p.p.xmlChar
                        * @param terminal {number} p.int
                        * @returns {number} int
                        */
                        (exec: xmlRegExecCtxtPtr | null, string: string | Buffer | null, nbval: number, nbneg: number, values: string | Buffer | null, terminal: number): number
                    }
                
                    xmlRegExecNextValues: {
                        /** 
                        * @param exec {xmlRegExecCtxtPtr | null} xmlRegExecCtxtPtr
                        * @param nbval {number} p.int
                        * @param nbneg {number} p.int
                        * @param values {string | Buffer | null} p.p.xmlChar
                        * @param terminal {number} p.int
                        * @returns {number} int
                        */
                        (exec: xmlRegExecCtxtPtr | null, nbval: number, nbneg: number, values: string | Buffer | null, terminal: number): number
                    }
                
                    xmlRegExecPushString: {
                        /** 
                        * @param exec {xmlRegExecCtxtPtr | null} xmlRegExecCtxtPtr
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @param data {any} p.void
                        * @returns {number} int
                        */
                        (exec: xmlRegExecCtxtPtr | null, value: string | Buffer | null, data: any): number
                    }
                
                    xmlRegExecPushString2: {
                        /** 
                        * @param exec {xmlRegExecCtxtPtr | null} xmlRegExecCtxtPtr
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @param value2 {string | Buffer | null} p.q(const).xmlChar
                        * @param data {any} p.void
                        * @returns {number} int
                        */
                        (exec: xmlRegExecCtxtPtr | null, value: string | Buffer | null, value2: string | Buffer | null, data: any): number
                    }
                
                    xmlRegFreeExecCtxt: {
                        /** 
                        * @param exec {xmlRegExecCtxtPtr | null} xmlRegExecCtxtPtr
                        * @returns {any} void
                        */
                        (exec: xmlRegExecCtxtPtr | null): any
                    }
                
                    xmlRegFreeRegexp: {
                        /** 
                        * @param regexp {xmlRegexpPtr | null} xmlRegexpPtr
                        * @returns {any} void
                        */
                        (regexp: xmlRegexpPtr | null): any
                    }
                
                    xmlRegNewExecCtxt: {
                        /** 
                        * @param comp {xmlRegexpPtr | null} xmlRegexpPtr
                        * @param callback {xmlRegExecCallbacks} xmlRegExecCallbacks
                        * @param data {any} p.void
                        * @returns {xmlRegExecCtxtPtr} xmlRegExecCtxtPtr
                        */
                        (comp: xmlRegexpPtr | null, callback: xmlRegExecCallbacks, data: any): xmlRegExecCtxtPtr
                    }
                
                    xmlRegexpCompile: {
                        /** 
                        * @param regexp {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlRegexpPtr} xmlRegexpPtr
                        */
                        (regexp: string | Buffer | null): xmlRegexpPtr
                    }
                
                    xmlRegexpExec: {
                        /** 
                        * @param comp {xmlRegexpPtr | null} xmlRegexpPtr
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (comp: xmlRegexpPtr | null, value: string | Buffer | null): number
                    }
                
                    xmlRegexpIsDeterminist: {
                        /** 
                        * @param comp {xmlRegexpPtr | null} xmlRegexpPtr
                        * @returns {number} int
                        */
                        (comp: xmlRegexpPtr | null): number
                    }
                
                    xmlRegexpPrint: {
                        /** 
                        * @param output {undefined} p.FILE
                        * @param regexp {xmlRegexpPtr | null} xmlRegexpPtr
                        * @returns {any} void
                        */
                        (output: undefined, regexp: xmlRegexpPtr | null): any
                    }
                
                    xmlRegisterCharEncodingHandler: {
                        /** 
                        * @param handler {xmlCharEncodingHandlerPtr | null} xmlCharEncodingHandlerPtr
                        * @returns {any} void
                        */
                        (handler: xmlCharEncodingHandlerPtr | null): any
                    }
                
                    xmlRegisterDefaultInputCallbacks: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    xmlRegisterDefaultOutputCallbacks: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    xmlRegisterInputCallbacks: {
                        /** 
                        * @param matchFunc {xmlInputMatchCallback} xmlInputMatchCallback
                        * @param openFunc {xmlInputOpenCallback} xmlInputOpenCallback
                        * @param readFunc {xmlInputReadCallback} xmlInputReadCallback
                        * @param closeFunc {xmlInputCloseCallback} xmlInputCloseCallback
                        * @returns {number} int
                        */
                        (matchFunc: xmlInputMatchCallback, openFunc: xmlInputOpenCallback, readFunc: xmlInputReadCallback, closeFunc: xmlInputCloseCallback): number
                    }
                
                    xmlRegisterNodeDefault: {
                        /** 
                        * @param func {xmlRegisterNodeFunc} xmlRegisterNodeFunc
                        * @returns {xmlRegisterNodeFunc} xmlRegisterNodeFunc
                        */
                        (func: xmlRegisterNodeFunc): xmlRegisterNodeFunc
                    }
                
                    xmlRegisterOutputCallbacks: {
                        /** 
                        * @param matchFunc {xmlOutputMatchCallback} xmlOutputMatchCallback
                        * @param openFunc {xmlOutputOpenCallback} xmlOutputOpenCallback
                        * @param writeFunc {xmlOutputWriteCallback} xmlOutputWriteCallback
                        * @param closeFunc {xmlOutputCloseCallback} xmlOutputCloseCallback
                        * @returns {number} int
                        */
                        (matchFunc: xmlOutputMatchCallback, openFunc: xmlOutputOpenCallback, writeFunc: xmlOutputWriteCallback, closeFunc: xmlOutputCloseCallback): number
                    }
                
                    xmlRelaxNGCleanupTypes: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    xmlRelaxNGDump: {
                        /** 
                        * @param output {undefined} p.FILE
                        * @param schema {xmlRelaxNGPtr | null} xmlRelaxNGPtr
                        * @returns {any} void
                        */
                        (output: undefined, schema: xmlRelaxNGPtr | null): any
                    }
                
                    xmlRelaxNGDumpTree: {
                        /** 
                        * @param output {undefined} p.FILE
                        * @param schema {xmlRelaxNGPtr | null} xmlRelaxNGPtr
                        * @returns {any} void
                        */
                        (output: undefined, schema: xmlRelaxNGPtr | null): any
                    }
                
                    xmlRelaxNGFree: {
                        /** 
                        * @param schema {xmlRelaxNGPtr | null} xmlRelaxNGPtr
                        * @returns {any} void
                        */
                        (schema: xmlRelaxNGPtr | null): any
                    }
                
                    xmlRelaxNGFreeParserCtxt: {
                        /** 
                        * @param ctxt {xmlRelaxNGParserCtxtPtr | null} xmlRelaxNGParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlRelaxNGParserCtxtPtr | null): any
                    }
                
                    xmlRelaxNGFreeValidCtxt: {
                        /** 
                        * @param ctxt {xmlRelaxNGValidCtxtPtr | null} xmlRelaxNGValidCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlRelaxNGValidCtxtPtr | null): any
                    }
                
                    xmlRelaxNGGetParserErrors: {
                        /** 
                        * @param ctxt {xmlRelaxNGParserCtxtPtr | null} xmlRelaxNGParserCtxtPtr
                        * @param err {xmlRelaxNGValidityErrorFunc} p.xmlRelaxNGValidityErrorFunc
                        * @param warn {xmlRelaxNGValidityWarningFunc} p.xmlRelaxNGValidityWarningFunc
                        * @param ctx {any} p.p.void
                        * @returns {number} int
                        */
                        (ctxt: xmlRelaxNGParserCtxtPtr | null, err: xmlRelaxNGValidityErrorFunc, warn: xmlRelaxNGValidityWarningFunc, ctx: any): number
                    }
                
                    xmlRelaxNGGetValidErrors: {
                        /** 
                        * @param ctxt {xmlRelaxNGValidCtxtPtr | null} xmlRelaxNGValidCtxtPtr
                        * @param err {xmlRelaxNGValidityErrorFunc} p.xmlRelaxNGValidityErrorFunc
                        * @param warn {xmlRelaxNGValidityWarningFunc} p.xmlRelaxNGValidityWarningFunc
                        * @param ctx {any} p.p.void
                        * @returns {number} int
                        */
                        (ctxt: xmlRelaxNGValidCtxtPtr | null, err: xmlRelaxNGValidityErrorFunc, warn: xmlRelaxNGValidityWarningFunc, ctx: any): number
                    }
                
                    xmlRelaxNGInitTypes: {
                        /** 
                        * @returns {number} int
                        */
                        (): number
                    }
                
                    xmlRelaxNGNewDocParserCtxt: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @returns {xmlRelaxNGParserCtxtPtr} xmlRelaxNGParserCtxtPtr
                        */
                        (doc: xmlDocPtr | null): xmlRelaxNGParserCtxtPtr
                    }
                
                    xmlRelaxNGNewMemParserCtxt: {
                        /** 
                        * @param buffer {string | Buffer | null} p.q(const).char
                        * @param size {number} int
                        * @returns {xmlRelaxNGParserCtxtPtr} xmlRelaxNGParserCtxtPtr
                        */
                        (buffer: string | Buffer | null, size: number): xmlRelaxNGParserCtxtPtr
                    }
                
                    xmlRelaxNGNewParserCtxt: {
                        /** 
                        * @param URL {string | Buffer | null} p.q(const).char
                        * @returns {xmlRelaxNGParserCtxtPtr} xmlRelaxNGParserCtxtPtr
                        */
                        (URL: string | Buffer | null): xmlRelaxNGParserCtxtPtr
                    }
                
                    xmlRelaxNGNewValidCtxt: {
                        /** 
                        * @param schema {xmlRelaxNGPtr | null} xmlRelaxNGPtr
                        * @returns {xmlRelaxNGValidCtxtPtr} xmlRelaxNGValidCtxtPtr
                        */
                        (schema: xmlRelaxNGPtr | null): xmlRelaxNGValidCtxtPtr
                    }
                
                    xmlRelaxNGParse: {
                        /** 
                        * @param ctxt {xmlRelaxNGParserCtxtPtr | null} xmlRelaxNGParserCtxtPtr
                        * @returns {xmlRelaxNGPtr} xmlRelaxNGPtr
                        */
                        (ctxt: xmlRelaxNGParserCtxtPtr | null): xmlRelaxNGPtr
                    }
                
                    xmlRelaxNGSetParserErrors: {
                        /** 
                        * @param ctxt {xmlRelaxNGParserCtxtPtr | null} xmlRelaxNGParserCtxtPtr
                        * @param err {xmlRelaxNGValidityErrorFunc} xmlRelaxNGValidityErrorFunc
                        * @param warn {xmlRelaxNGValidityWarningFunc} xmlRelaxNGValidityWarningFunc
                        * @param ctx {any} p.void
                        * @returns {any} void
                        */
                        (ctxt: xmlRelaxNGParserCtxtPtr | null, err: xmlRelaxNGValidityErrorFunc, warn: xmlRelaxNGValidityWarningFunc, ctx: any): any
                    }
                
                    xmlRelaxNGSetParserStructuredErrors: {
                        /** 
                        * @param ctxt {xmlRelaxNGParserCtxtPtr | null} xmlRelaxNGParserCtxtPtr
                        * @param serror {xmlStructuredErrorFunc} xmlStructuredErrorFunc
                        * @param ctx {any} p.void
                        * @returns {any} void
                        */
                        (ctxt: xmlRelaxNGParserCtxtPtr | null, serror: xmlStructuredErrorFunc, ctx: any): any
                    }
                
                    xmlRelaxNGSetValidErrors: {
                        /** 
                        * @param ctxt {xmlRelaxNGValidCtxtPtr | null} xmlRelaxNGValidCtxtPtr
                        * @param err {xmlRelaxNGValidityErrorFunc} xmlRelaxNGValidityErrorFunc
                        * @param warn {xmlRelaxNGValidityWarningFunc} xmlRelaxNGValidityWarningFunc
                        * @param ctx {any} p.void
                        * @returns {any} void
                        */
                        (ctxt: xmlRelaxNGValidCtxtPtr | null, err: xmlRelaxNGValidityErrorFunc, warn: xmlRelaxNGValidityWarningFunc, ctx: any): any
                    }
                
                    xmlRelaxNGSetValidStructuredErrors: {
                        /** 
                        * @param ctxt {xmlRelaxNGValidCtxtPtr | null} xmlRelaxNGValidCtxtPtr
                        * @param serror {xmlStructuredErrorFunc} xmlStructuredErrorFunc
                        * @param ctx {any} p.void
                        * @returns {any} void
                        */
                        (ctxt: xmlRelaxNGValidCtxtPtr | null, serror: xmlStructuredErrorFunc, ctx: any): any
                    }
                
                    xmlRelaxNGValidateDoc: {
                        /** 
                        * @param ctxt {xmlRelaxNGValidCtxtPtr | null} xmlRelaxNGValidCtxtPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlRelaxNGValidCtxtPtr | null, doc: xmlDocPtr | null): number
                    }
                
                    xmlRelaxNGValidateFullElement: {
                        /** 
                        * @param ctxt {xmlRelaxNGValidCtxtPtr | null} xmlRelaxNGValidCtxtPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param elem {xmlNodePtr | null} xmlNodePtr
                        * @returns {number} int
                        */
                        (ctxt: xmlRelaxNGValidCtxtPtr | null, doc: xmlDocPtr | null, elem: xmlNodePtr | null): number
                    }
                
                    xmlRelaxNGValidatePopElement: {
                        /** 
                        * @param ctxt {xmlRelaxNGValidCtxtPtr | null} xmlRelaxNGValidCtxtPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param elem {xmlNodePtr | null} xmlNodePtr
                        * @returns {number} int
                        */
                        (ctxt: xmlRelaxNGValidCtxtPtr | null, doc: xmlDocPtr | null, elem: xmlNodePtr | null): number
                    }
                
                    xmlRelaxNGValidatePushCData: {
                        /** 
                        * @param ctxt {xmlRelaxNGValidCtxtPtr | null} xmlRelaxNGValidCtxtPtr
                        * @param data {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {number} int
                        */
                        (ctxt: xmlRelaxNGValidCtxtPtr | null, data: string | Buffer | null, len: number): number
                    }
                
                    xmlRelaxNGValidatePushElement: {
                        /** 
                        * @param ctxt {xmlRelaxNGValidCtxtPtr | null} xmlRelaxNGValidCtxtPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param elem {xmlNodePtr | null} xmlNodePtr
                        * @returns {number} int
                        */
                        (ctxt: xmlRelaxNGValidCtxtPtr | null, doc: xmlDocPtr | null, elem: xmlNodePtr | null): number
                    }
                
                    xmlRelaxParserSetFlag: {
                        /** 
                        * @param ctxt {xmlRelaxNGParserCtxtPtr | null} xmlRelaxNGParserCtxtPtr
                        * @param flag {number} int
                        * @returns {number} int
                        */
                        (ctxt: xmlRelaxNGParserCtxtPtr | null, flag: number): number
                    }
                
                    xmlRemoveID: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param attr {xmlAttrPtr | null} xmlAttrPtr
                        * @returns {number} int
                        */
                        (doc: xmlDocPtr | null, attr: xmlAttrPtr | null): number
                    }
                
                    xmlRemoveProp: {
                        /** 
                        * @param cur {xmlAttrPtr | null} xmlAttrPtr
                        * @returns {number} int
                        */
                        (cur: xmlAttrPtr | null): number
                    }
                
                    xmlRemoveRef: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param attr {xmlAttrPtr | null} xmlAttrPtr
                        * @returns {number} int
                        */
                        (doc: xmlDocPtr | null, attr: xmlAttrPtr | null): number
                    }
                
                    xmlReplaceNode: {
                        /** 
                        * @param old {xmlNodePtr | null} xmlNodePtr
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (old: xmlNodePtr | null, cur: xmlNodePtr | null): xmlNodePtr | null
                    }
                
                    xmlResetError: {
                        /** 
                        * @param err {xmlErrorPtr | null} xmlErrorPtr
                        * @returns {any} void
                        */
                        (err: xmlErrorPtr | null): any
                    }
                
                    xmlResetLastError: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    xmlSAX2AttributeDecl: {
                        /** 
                        * @param ctx {any} p.void
                        * @param elem {string | Buffer | null} p.q(const).xmlChar
                        * @param fullname {string | Buffer | null} p.q(const).xmlChar
                        * @param type {number} int
                        * @param def {number} int
                        * @param defaultValue {string | Buffer | null} p.q(const).xmlChar
                        * @param tree {xmlEnumerationPtr | null} xmlEnumerationPtr
                        * @returns {any} void
                        */
                        (ctx: any, elem: string | Buffer | null, fullname: string | Buffer | null, type: number, def: number, defaultValue: string | Buffer | null, tree: xmlEnumerationPtr | null): any
                    }
                
                    xmlSAX2CDataBlock: {
                        /** 
                        * @param ctx {any} p.void
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {any} void
                        */
                        (ctx: any, value: string | Buffer | null, len: number): any
                    }
                
                    xmlSAX2Characters: {
                        /** 
                        * @param ctx {any} p.void
                        * @param ch {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {any} void
                        */
                        (ctx: any, ch: string | Buffer | null, len: number): any
                    }
                
                    xmlSAX2Comment: {
                        /** 
                        * @param ctx {any} p.void
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (ctx: any, value: string | Buffer | null): any
                    }
                
                    xmlSAX2ElementDecl: {
                        /** 
                        * @param ctx {any} p.void
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param type {number} int
                        * @param content {xmlElementContentPtr | null} xmlElementContentPtr
                        * @returns {any} void
                        */
                        (ctx: any, name: string | Buffer | null, type: number, content: xmlElementContentPtr | null): any
                    }
                
                    xmlSAX2EndDocument: {
                        /** 
                        * @param ctx {any} p.void
                        * @returns {any} void
                        */
                        (ctx: any): any
                    }
                
                    xmlSAX2EndElement: {
                        /** 
                        * @param ctx {any} p.void
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (ctx: any, name: string | Buffer | null): any
                    }
                
                    xmlSAX2EndElementNs: {
                        /** 
                        * @param ctx {any} p.void
                        * @param localname {string | Buffer | null} p.q(const).xmlChar
                        * @param prefix {string | Buffer | null} p.q(const).xmlChar
                        * @param URI {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (ctx: any, localname: string | Buffer | null, prefix: string | Buffer | null, URI: string | Buffer | null): any
                    }
                
                    xmlSAX2EntityDecl: {
                        /** 
                        * @param ctx {any} p.void
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param type {number} int
                        * @param publicId {string | Buffer | null} p.q(const).xmlChar
                        * @param systemId {string | Buffer | null} p.q(const).xmlChar
                        * @param content {string | Buffer | null} p.xmlChar
                        * @returns {any} void
                        */
                        (ctx: any, name: string | Buffer | null, type: number, publicId: string | Buffer | null, systemId: string | Buffer | null, content: string | Buffer | null): any
                    }
                
                    xmlSAX2ExternalSubset: {
                        /** 
                        * @param ctx {any} p.void
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param ExternalID {string | Buffer | null} p.q(const).xmlChar
                        * @param SystemID {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (ctx: any, name: string | Buffer | null, ExternalID: string | Buffer | null, SystemID: string | Buffer | null): any
                    }
                
                    xmlSAX2GetColumnNumber: {
                        /** 
                        * @param ctx {any} p.void
                        * @returns {number} int
                        */
                        (ctx: any): number
                    }
                
                    xmlSAX2GetEntity: {
                        /** 
                        * @param ctx {any} p.void
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlEntityPtr} xmlEntityPtr
                        */
                        (ctx: any, name: string | Buffer | null): xmlEntityPtr
                    }
                
                    xmlSAX2GetLineNumber: {
                        /** 
                        * @param ctx {any} p.void
                        * @returns {number} int
                        */
                        (ctx: any): number
                    }
                
                    xmlSAX2GetParameterEntity: {
                        /** 
                        * @param ctx {any} p.void
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlEntityPtr} xmlEntityPtr
                        */
                        (ctx: any, name: string | Buffer | null): xmlEntityPtr
                    }
                
                    xmlSAX2GetPublicId: {
                        /** 
                        * @param ctx {any} p.void
                        * @returns {string} q(const).xmlChar
                        */
                        (ctx: any): string
                    }
                
                    xmlSAX2GetSystemId: {
                        /** 
                        * @param ctx {any} p.void
                        * @returns {string} q(const).xmlChar
                        */
                        (ctx: any): string
                    }
                
                    xmlSAX2HasExternalSubset: {
                        /** 
                        * @param ctx {any} p.void
                        * @returns {number} int
                        */
                        (ctx: any): number
                    }
                
                    xmlSAX2HasInternalSubset: {
                        /** 
                        * @param ctx {any} p.void
                        * @returns {number} int
                        */
                        (ctx: any): number
                    }
                
                    xmlSAX2IgnorableWhitespace: {
                        /** 
                        * @param ctx {any} p.void
                        * @param ch {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {any} void
                        */
                        (ctx: any, ch: string | Buffer | null, len: number): any
                    }
                
                    xmlSAX2InitDefaultSAXHandler: {
                        /** 
                        * @param hdlr {xmlSAXHandler} p.xmlSAXHandler
                        * @param warning {number} int
                        * @returns {any} void
                        */
                        (hdlr: xmlSAXHandler, warning: number): any
                    }
                
                    xmlSAX2InitDocbDefaultSAXHandler: {
                        /** 
                        * @param hdlr {xmlSAXHandler} p.xmlSAXHandler
                        * @returns {any} void
                        */
                        (hdlr: xmlSAXHandler): any
                    }
                
                    xmlSAX2InitHtmlDefaultSAXHandler: {
                        /** 
                        * @param hdlr {xmlSAXHandler} p.xmlSAXHandler
                        * @returns {any} void
                        */
                        (hdlr: xmlSAXHandler): any
                    }
                
                    xmlSAX2InternalSubset: {
                        /** 
                        * @param ctx {any} p.void
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param ExternalID {string | Buffer | null} p.q(const).xmlChar
                        * @param SystemID {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (ctx: any, name: string | Buffer | null, ExternalID: string | Buffer | null, SystemID: string | Buffer | null): any
                    }
                
                    xmlSAX2IsStandalone: {
                        /** 
                        * @param ctx {any} p.void
                        * @returns {number} int
                        */
                        (ctx: any): number
                    }
                
                    xmlSAX2NotationDecl: {
                        /** 
                        * @param ctx {any} p.void
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param publicId {string | Buffer | null} p.q(const).xmlChar
                        * @param systemId {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (ctx: any, name: string | Buffer | null, publicId: string | Buffer | null, systemId: string | Buffer | null): any
                    }
                
                    xmlSAX2ProcessingInstruction: {
                        /** 
                        * @param ctx {any} p.void
                        * @param target {string | Buffer | null} p.q(const).xmlChar
                        * @param data {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (ctx: any, target: string | Buffer | null, data: string | Buffer | null): any
                    }
                
                    xmlSAX2Reference: {
                        /** 
                        * @param ctx {any} p.void
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (ctx: any, name: string | Buffer | null): any
                    }
                
                    xmlSAX2ResolveEntity: {
                        /** 
                        * @param ctx {any} p.void
                        * @param publicId {string | Buffer | null} p.q(const).xmlChar
                        * @param systemId {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlParserInputPtr} xmlParserInputPtr
                        */
                        (ctx: any, publicId: string | Buffer | null, systemId: string | Buffer | null): xmlParserInputPtr
                    }
                
                    xmlSAX2SetDocumentLocator: {
                        /** 
                        * @param ctx {any} p.void
                        * @param loc {xmlSAXLocatorPtr | null} xmlSAXLocatorPtr
                        * @returns {any} void
                        */
                        (ctx: any, loc: xmlSAXLocatorPtr | null): any
                    }
                
                    xmlSAX2StartDocument: {
                        /** 
                        * @param ctx {any} p.void
                        * @returns {any} void
                        */
                        (ctx: any): any
                    }
                
                    xmlSAX2StartElement: {
                        /** 
                        * @param ctx {any} p.void
                        * @param fullname {string | Buffer | null} p.q(const).xmlChar
                        * @param atts {string | Buffer | null} p.p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (ctx: any, fullname: string | Buffer | null, atts: string | Buffer | null): any
                    }
                
                    xmlSAX2StartElementNs: {
                        /** 
                        * @param ctx {any} p.void
                        * @param localname {string | Buffer | null} p.q(const).xmlChar
                        * @param prefix {string | Buffer | null} p.q(const).xmlChar
                        * @param URI {string | Buffer | null} p.q(const).xmlChar
                        * @param nb_namespaces {number} int
                        * @param namespaces {string | Buffer | null} p.p.q(const).xmlChar
                        * @param nb_attributes {number} int
                        * @param nb_defaulted {number} int
                        * @param attributes {string | Buffer | null} p.p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (ctx: any, localname: string | Buffer | null, prefix: string | Buffer | null, URI: string | Buffer | null, nb_namespaces: number, namespaces: string | Buffer | null, nb_attributes: number, nb_defaulted: number, attributes: string | Buffer | null): any
                    }
                
                    xmlSAX2UnparsedEntityDecl: {
                        /** 
                        * @param ctx {any} p.void
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param publicId {string | Buffer | null} p.q(const).xmlChar
                        * @param systemId {string | Buffer | null} p.q(const).xmlChar
                        * @param notationName {string | Buffer | null} p.q(const).xmlChar
                        * @returns {any} void
                        */
                        (ctx: any, name: string | Buffer | null, publicId: string | Buffer | null, systemId: string | Buffer | null, notationName: string | Buffer | null): any
                    }
                
                    xmlSAXDefaultVersion: {
                        /** 
                        * @param version {number} int
                        * @returns {number} int
                        */
                        (version: number): number
                    }
                
                    xmlSAXParseDTD: {
                        /** 
                        * @param sax {xmlSAXHandlerPtr | null} xmlSAXHandlerPtr
                        * @param ExternalID {string | Buffer | null} p.q(const).xmlChar
                        * @param SystemID {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlDtdPtr | null)} xmlDtdPtr
                        */
                        (sax: xmlSAXHandlerPtr | null, ExternalID: string | Buffer | null, SystemID: string | Buffer | null): xmlDtdPtr | null
                    }
                
                    xmlSAXParseDoc: {
                        /** 
                        * @param sax {xmlSAXHandlerPtr | null} xmlSAXHandlerPtr
                        * @param cur {string | Buffer | null} p.q(const).xmlChar
                        * @param recovery {number} int
                        * @returns {(xmlDocPtr | null)} xmlDocPtr
                        */
                        (sax: xmlSAXHandlerPtr | null, cur: string | Buffer | null, recovery: number): xmlDocPtr | null
                    }
                
                    xmlSAXParseEntity: {
                        /** 
                        * @param sax {xmlSAXHandlerPtr | null} xmlSAXHandlerPtr
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @returns {(xmlDocPtr | null)} xmlDocPtr
                        */
                        (sax: xmlSAXHandlerPtr | null, filename: string | Buffer | null): xmlDocPtr | null
                    }
                
                    xmlSAXParseFile: {
                        /** 
                        * @param sax {xmlSAXHandlerPtr | null} xmlSAXHandlerPtr
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @param recovery {number} int
                        * @returns {(xmlDocPtr | null)} xmlDocPtr
                        */
                        (sax: xmlSAXHandlerPtr | null, filename: string | Buffer | null, recovery: number): xmlDocPtr | null
                    }
                
                    xmlSAXParseFileWithData: {
                        /** 
                        * @param sax {xmlSAXHandlerPtr | null} xmlSAXHandlerPtr
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @param recovery {number} int
                        * @param data {any} p.void
                        * @returns {(xmlDocPtr | null)} xmlDocPtr
                        */
                        (sax: xmlSAXHandlerPtr | null, filename: string | Buffer | null, recovery: number, data: any): xmlDocPtr | null
                    }
                
                    xmlSAXParseMemory: {
                        /** 
                        * @param sax {xmlSAXHandlerPtr | null} xmlSAXHandlerPtr
                        * @param buffer {string | Buffer | null} p.q(const).char
                        * @param size {number} int
                        * @param recovery {number} int
                        * @returns {(xmlDocPtr | null)} xmlDocPtr
                        */
                        (sax: xmlSAXHandlerPtr | null, buffer: string | Buffer | null, size: number, recovery: number): xmlDocPtr | null
                    }
                
                    xmlSAXParseMemoryWithData: {
                        /** 
                        * @param sax {xmlSAXHandlerPtr | null} xmlSAXHandlerPtr
                        * @param buffer {string | Buffer | null} p.q(const).char
                        * @param size {number} int
                        * @param recovery {number} int
                        * @param data {any} p.void
                        * @returns {(xmlDocPtr | null)} xmlDocPtr
                        */
                        (sax: xmlSAXHandlerPtr | null, buffer: string | Buffer | null, size: number, recovery: number, data: any): xmlDocPtr | null
                    }
                
                    xmlSAXUserParseFile: {
                        /** 
                        * @param sax {xmlSAXHandlerPtr | null} xmlSAXHandlerPtr
                        * @param user_data {any} p.void
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @returns {number} int
                        */
                        (sax: xmlSAXHandlerPtr | null, user_data: any, filename: string | Buffer | null): number
                    }
                
                    xmlSAXUserParseMemory: {
                        /** 
                        * @param sax {xmlSAXHandlerPtr | null} xmlSAXHandlerPtr
                        * @param user_data {any} p.void
                        * @param buffer {string | Buffer | null} p.q(const).char
                        * @param size {number} int
                        * @returns {number} int
                        */
                        (sax: xmlSAXHandlerPtr | null, user_data: any, buffer: string | Buffer | null, size: number): number
                    }
                
                    xmlSAXVersion: {
                        /** 
                        * @param hdlr {xmlSAXHandler} p.xmlSAXHandler
                        * @param version {number} int
                        * @returns {number} int
                        */
                        (hdlr: xmlSAXHandler, version: number): number
                    }
                
                    xmlSaveClose: {
                        /** 
                        * @param ctxt {xmlSaveCtxtPtr | null} xmlSaveCtxtPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlSaveCtxtPtr | null): number
                    }
                
                    xmlSaveDoc: {
                        /** 
                        * @param ctxt {xmlSaveCtxtPtr | null} xmlSaveCtxtPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @returns {number} long
                        */
                        (ctxt: xmlSaveCtxtPtr | null, doc: xmlDocPtr | null): number
                    }
                
                    xmlSaveFile: {
                        /** 
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @param cur {xmlDocPtr | null} xmlDocPtr
                        * @returns {number} int
                        */
                        (filename: string | Buffer | null, cur: xmlDocPtr | null): number
                    }
                
                    xmlSaveFileEnc: {
                        /** 
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @param cur {xmlDocPtr | null} xmlDocPtr
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @returns {number} int
                        */
                        (filename: string | Buffer | null, cur: xmlDocPtr | null, encoding: string | Buffer | null): number
                    }
                
                    xmlSaveFileTo: {
                        /** 
                        * @param buf {xmlOutputBufferPtr | null} xmlOutputBufferPtr
                        * @param cur {xmlDocPtr | null} xmlDocPtr
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @returns {number} int
                        */
                        (buf: xmlOutputBufferPtr | null, cur: xmlDocPtr | null, encoding: string | Buffer | null): number
                    }
                
                    xmlSaveFlush: {
                        /** 
                        * @param ctxt {xmlSaveCtxtPtr | null} xmlSaveCtxtPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlSaveCtxtPtr | null): number
                    }
                
                    xmlSaveFormatFile: {
                        /** 
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @param cur {xmlDocPtr | null} xmlDocPtr
                        * @param format {number} int
                        * @returns {number} int
                        */
                        (filename: string | Buffer | null, cur: xmlDocPtr | null, format: number): number
                    }
                
                    xmlSaveFormatFileEnc: {
                        /** 
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @param cur {xmlDocPtr | null} xmlDocPtr
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param format {number} int
                        * @returns {number} int
                        */
                        (filename: string | Buffer | null, cur: xmlDocPtr | null, encoding: string | Buffer | null, format: number): number
                    }
                
                    xmlSaveFormatFileTo: {
                        /** 
                        * @param buf {xmlOutputBufferPtr | null} xmlOutputBufferPtr
                        * @param cur {xmlDocPtr | null} xmlDocPtr
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param format {number} int
                        * @returns {number} int
                        */
                        (buf: xmlOutputBufferPtr | null, cur: xmlDocPtr | null, encoding: string | Buffer | null, format: number): number
                    }
                
                    xmlSaveSetAttrEscape: {
                        /** 
                        * @param ctxt {xmlSaveCtxtPtr | null} xmlSaveCtxtPtr
                        * @param escape {xmlCharEncodingOutputFunc} xmlCharEncodingOutputFunc
                        * @returns {number} int
                        */
                        (ctxt: xmlSaveCtxtPtr | null, escape: xmlCharEncodingOutputFunc): number
                    }
                
                    xmlSaveSetEscape: {
                        /** 
                        * @param ctxt {xmlSaveCtxtPtr | null} xmlSaveCtxtPtr
                        * @param escape {xmlCharEncodingOutputFunc} xmlCharEncodingOutputFunc
                        * @returns {number} int
                        */
                        (ctxt: xmlSaveCtxtPtr | null, escape: xmlCharEncodingOutputFunc): number
                    }
                
                    xmlSaveToBuffer: {
                        /** 
                        * @param buffer {xmlBufferPtr | null} xmlBufferPtr
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param options {number} int
                        * @returns {xmlSaveCtxtPtr} xmlSaveCtxtPtr
                        */
                        (buffer: xmlBufferPtr | null, encoding: string | Buffer | null, options: number): xmlSaveCtxtPtr
                    }
                
                    xmlSaveToFd: {
                        /** 
                        * @param fd {number} int
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param options {number} int
                        * @returns {xmlSaveCtxtPtr} xmlSaveCtxtPtr
                        */
                        (fd: number, encoding: string | Buffer | null, options: number): xmlSaveCtxtPtr
                    }
                
                    xmlSaveToFilename: {
                        /** 
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param options {number} int
                        * @returns {xmlSaveCtxtPtr} xmlSaveCtxtPtr
                        */
                        (filename: string | Buffer | null, encoding: string | Buffer | null, options: number): xmlSaveCtxtPtr
                    }
                
                    xmlSaveToIO: {
                        /** 
                        * @param iowrite {xmlOutputWriteCallback} xmlOutputWriteCallback
                        * @param ioclose {xmlOutputCloseCallback} xmlOutputCloseCallback
                        * @param ioctx {any} p.void
                        * @param encoding {string | Buffer | null} p.q(const).char
                        * @param options {number} int
                        * @returns {xmlSaveCtxtPtr} xmlSaveCtxtPtr
                        */
                        (iowrite: xmlOutputWriteCallback, ioclose: xmlOutputCloseCallback, ioctx: any, encoding: string | Buffer | null, options: number): xmlSaveCtxtPtr
                    }
                
                    xmlSaveTree: {
                        /** 
                        * @param ctxt {xmlSaveCtxtPtr | null} xmlSaveCtxtPtr
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @returns {number} long
                        */
                        (ctxt: xmlSaveCtxtPtr | null, node: xmlNodePtr | null): number
                    }
                
                    xmlSaveUri: {
                        /** 
                        * @param uri {xmlURIPtr | null} xmlURIPtr
                        * @returns {string} xmlChar
                        */
                        (uri: xmlURIPtr | null): string
                    }
                
                    xmlScanName: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {string} xmlChar
                        */
                        (ctxt: xmlParserCtxtPtr | null): string
                    }
                
                    xmlSchemaCheckFacet: {
                        /** 
                        * @param facet {xmlSchemaFacetPtr | null} xmlSchemaFacetPtr
                        * @param typeDecl {xmlSchemaTypePtr | null} xmlSchemaTypePtr
                        * @param ctxt {xmlSchemaParserCtxtPtr | null} xmlSchemaParserCtxtPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (facet: xmlSchemaFacetPtr | null, typeDecl: xmlSchemaTypePtr | null, ctxt: xmlSchemaParserCtxtPtr | null, name: string | Buffer | null): number
                    }
                
                    xmlSchemaCleanupTypes: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    xmlSchemaCollapseString: {
                        /** 
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} xmlChar
                        */
                        (value: string | Buffer | null): string
                    }
                
                    xmlSchemaCompareValues: {
                        /** 
                        * @param x {xmlSchemaValPtr | null} xmlSchemaValPtr
                        * @param y {xmlSchemaValPtr | null} xmlSchemaValPtr
                        * @returns {number} int
                        */
                        (x: xmlSchemaValPtr | null, y: xmlSchemaValPtr | null): number
                    }
                
                    xmlSchemaCompareValuesWhtsp: {
                        /** 
                        * @param x {xmlSchemaValPtr | null} xmlSchemaValPtr
                        * @param xws {xmlSchemaWhitespaceValueType} xmlSchemaWhitespaceValueType
                        * @param y {xmlSchemaValPtr | null} xmlSchemaValPtr
                        * @param yws {xmlSchemaWhitespaceValueType} xmlSchemaWhitespaceValueType
                        * @returns {number} int
                        */
                        (x: xmlSchemaValPtr | null, xws: xmlSchemaWhitespaceValueType, y: xmlSchemaValPtr | null, yws: xmlSchemaWhitespaceValueType): number
                    }
                
                    xmlSchemaCopyValue: {
                        /** 
                        * @param val {xmlSchemaValPtr | null} xmlSchemaValPtr
                        * @returns {xmlSchemaValPtr} xmlSchemaValPtr
                        */
                        (val: xmlSchemaValPtr | null): xmlSchemaValPtr
                    }
                
                    xmlSchemaDump: {
                        /** 
                        * @param output {undefined} p.FILE
                        * @param schema {xmlSchemaPtr | null} xmlSchemaPtr
                        * @returns {any} void
                        */
                        (output: undefined, schema: xmlSchemaPtr | null): any
                    }
                
                    xmlSchemaFree: {
                        /** 
                        * @param schema {xmlSchemaPtr | null} xmlSchemaPtr
                        * @returns {any} void
                        */
                        (schema: xmlSchemaPtr | null): any
                    }
                
                    xmlSchemaFreeFacet: {
                        /** 
                        * @param facet {xmlSchemaFacetPtr | null} xmlSchemaFacetPtr
                        * @returns {any} void
                        */
                        (facet: xmlSchemaFacetPtr | null): any
                    }
                
                    xmlSchemaFreeParserCtxt: {
                        /** 
                        * @param ctxt {xmlSchemaParserCtxtPtr | null} xmlSchemaParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlSchemaParserCtxtPtr | null): any
                    }
                
                    xmlSchemaFreeType: {
                        /** 
                        * @param type {xmlSchemaTypePtr | null} xmlSchemaTypePtr
                        * @returns {any} void
                        */
                        (type: xmlSchemaTypePtr | null): any
                    }
                
                    xmlSchemaFreeValidCtxt: {
                        /** 
                        * @param ctxt {xmlSchemaValidCtxtPtr | null} xmlSchemaValidCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlSchemaValidCtxtPtr | null): any
                    }
                
                    xmlSchemaFreeValue: {
                        /** 
                        * @param val {xmlSchemaValPtr | null} xmlSchemaValPtr
                        * @returns {any} void
                        */
                        (val: xmlSchemaValPtr | null): any
                    }
                
                    xmlSchemaFreeWildcard: {
                        /** 
                        * @param wildcard {xmlSchemaWildcardPtr | null} xmlSchemaWildcardPtr
                        * @returns {any} void
                        */
                        (wildcard: xmlSchemaWildcardPtr | null): any
                    }
                
                    xmlSchemaGetBuiltInListSimpleTypeItemType: {
                        /** 
                        * @param type {xmlSchemaTypePtr | null} xmlSchemaTypePtr
                        * @returns {xmlSchemaTypePtr} xmlSchemaTypePtr
                        */
                        (type: xmlSchemaTypePtr | null): xmlSchemaTypePtr
                    }
                
                    xmlSchemaGetBuiltInType: {
                        /** 
                        * @param type {xmlSchemaValType} xmlSchemaValType
                        * @returns {xmlSchemaTypePtr} xmlSchemaTypePtr
                        */
                        (type: xmlSchemaValType): xmlSchemaTypePtr
                    }
                
                    xmlSchemaGetCanonValue: {
                        /** 
                        * @param val {xmlSchemaValPtr | null} xmlSchemaValPtr
                        * @param retValue {string | Buffer | null} p.p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (val: xmlSchemaValPtr | null, retValue: string | Buffer | null): number
                    }
                
                    xmlSchemaGetCanonValueWhtsp: {
                        /** 
                        * @param val {xmlSchemaValPtr | null} xmlSchemaValPtr
                        * @param retValue {string | Buffer | null} p.p.q(const).xmlChar
                        * @param ws {xmlSchemaWhitespaceValueType} xmlSchemaWhitespaceValueType
                        * @returns {number} int
                        */
                        (val: xmlSchemaValPtr | null, retValue: string | Buffer | null, ws: xmlSchemaWhitespaceValueType): number
                    }
                
                    xmlSchemaGetFacetValueAsULong: {
                        /** 
                        * @param facet {xmlSchemaFacetPtr | null} xmlSchemaFacetPtr
                        * @returns {number} unsigned long
                        */
                        (facet: xmlSchemaFacetPtr | null): number
                    }
                
                    xmlSchemaGetParserErrors: {
                        /** 
                        * @param ctxt {xmlSchemaParserCtxtPtr | null} xmlSchemaParserCtxtPtr
                        * @param err {xmlSchemaValidityErrorFunc} p.xmlSchemaValidityErrorFunc
                        * @param warn {xmlSchemaValidityWarningFunc} p.xmlSchemaValidityWarningFunc
                        * @param ctx {any} p.p.void
                        * @returns {number} int
                        */
                        (ctxt: xmlSchemaParserCtxtPtr | null, err: xmlSchemaValidityErrorFunc, warn: xmlSchemaValidityWarningFunc, ctx: any): number
                    }
                
                    xmlSchemaGetPredefinedType: {
                        /** 
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param ns {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlSchemaTypePtr} xmlSchemaTypePtr
                        */
                        (name: string | Buffer | null, ns: string | Buffer | null): xmlSchemaTypePtr
                    }
                
                    xmlSchemaGetValType: {
                        /** 
                        * @param val {xmlSchemaValPtr | null} xmlSchemaValPtr
                        * @returns {xmlSchemaValType} xmlSchemaValType
                        */
                        (val: xmlSchemaValPtr | null): xmlSchemaValType
                    }
                
                    xmlSchemaGetValidErrors: {
                        /** 
                        * @param ctxt {xmlSchemaValidCtxtPtr | null} xmlSchemaValidCtxtPtr
                        * @param err {xmlSchemaValidityErrorFunc} p.xmlSchemaValidityErrorFunc
                        * @param warn {xmlSchemaValidityWarningFunc} p.xmlSchemaValidityWarningFunc
                        * @param ctx {any} p.p.void
                        * @returns {number} int
                        */
                        (ctxt: xmlSchemaValidCtxtPtr | null, err: xmlSchemaValidityErrorFunc, warn: xmlSchemaValidityWarningFunc, ctx: any): number
                    }
                
                    xmlSchemaInitTypes: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    xmlSchemaIsBuiltInTypeFacet: {
                        /** 
                        * @param type {xmlSchemaTypePtr | null} xmlSchemaTypePtr
                        * @param facetType {number} int
                        * @returns {number} int
                        */
                        (type: xmlSchemaTypePtr | null, facetType: number): number
                    }
                
                    xmlSchemaIsValid: {
                        /** 
                        * @param ctxt {xmlSchemaValidCtxtPtr | null} xmlSchemaValidCtxtPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlSchemaValidCtxtPtr | null): number
                    }
                
                    xmlSchemaNewDocParserCtxt: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @returns {xmlSchemaParserCtxtPtr} xmlSchemaParserCtxtPtr
                        */
                        (doc: xmlDocPtr | null): xmlSchemaParserCtxtPtr
                    }
                
                    xmlSchemaNewFacet: {
                        /** 
                        * @returns {xmlSchemaFacetPtr} xmlSchemaFacetPtr
                        */
                        (): xmlSchemaFacetPtr
                    }
                
                    xmlSchemaNewMemParserCtxt: {
                        /** 
                        * @param buffer {string | Buffer | null} p.q(const).char
                        * @param size {number} int
                        * @returns {xmlSchemaParserCtxtPtr} xmlSchemaParserCtxtPtr
                        */
                        (buffer: string | Buffer | null, size: number): xmlSchemaParserCtxtPtr
                    }
                
                    xmlSchemaNewNOTATIONValue: {
                        /** 
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param ns {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlSchemaValPtr} xmlSchemaValPtr
                        */
                        (name: string | Buffer | null, ns: string | Buffer | null): xmlSchemaValPtr
                    }
                
                    xmlSchemaNewParserCtxt: {
                        /** 
                        * @param URL {string | Buffer | null} p.q(const).char
                        * @returns {xmlSchemaParserCtxtPtr} xmlSchemaParserCtxtPtr
                        */
                        (URL: string | Buffer | null): xmlSchemaParserCtxtPtr
                    }
                
                    xmlSchemaNewQNameValue: {
                        /** 
                        * @param namespaceName {string | Buffer | null} p.q(const).xmlChar
                        * @param localName {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlSchemaValPtr} xmlSchemaValPtr
                        */
                        (namespaceName: string | Buffer | null, localName: string | Buffer | null): xmlSchemaValPtr
                    }
                
                    xmlSchemaNewStringValue: {
                        /** 
                        * @param type {xmlSchemaValType} xmlSchemaValType
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlSchemaValPtr} xmlSchemaValPtr
                        */
                        (type: xmlSchemaValType, value: string | Buffer | null): xmlSchemaValPtr
                    }
                
                    xmlSchemaNewValidCtxt: {
                        /** 
                        * @param schema {xmlSchemaPtr | null} xmlSchemaPtr
                        * @returns {xmlSchemaValidCtxtPtr} xmlSchemaValidCtxtPtr
                        */
                        (schema: xmlSchemaPtr | null): xmlSchemaValidCtxtPtr
                    }
                
                    xmlSchemaParse: {
                        /** 
                        * @param ctxt {xmlSchemaParserCtxtPtr | null} xmlSchemaParserCtxtPtr
                        * @returns {xmlSchemaPtr} xmlSchemaPtr
                        */
                        (ctxt: xmlSchemaParserCtxtPtr | null): xmlSchemaPtr
                    }
                
                    xmlSchemaSAXPlug: {
                        /** 
                        * @param ctxt {xmlSchemaValidCtxtPtr | null} xmlSchemaValidCtxtPtr
                        * @param sax {xmlSAXHandlerPtr | null} p.xmlSAXHandlerPtr
                        * @param user_data {any} p.p.void
                        * @returns {xmlSchemaSAXPlugPtr} xmlSchemaSAXPlugPtr
                        */
                        (ctxt: xmlSchemaValidCtxtPtr | null, sax: xmlSAXHandlerPtr | null, user_data: any): xmlSchemaSAXPlugPtr
                    }
                
                    xmlSchemaSAXUnplug: {
                        /** 
                        * @param plug {xmlSchemaSAXPlugPtr | null} xmlSchemaSAXPlugPtr
                        * @returns {number} int
                        */
                        (plug: xmlSchemaSAXPlugPtr | null): number
                    }
                
                    xmlSchemaSetParserErrors: {
                        /** 
                        * @param ctxt {xmlSchemaParserCtxtPtr | null} xmlSchemaParserCtxtPtr
                        * @param err {xmlSchemaValidityErrorFunc} xmlSchemaValidityErrorFunc
                        * @param warn {xmlSchemaValidityWarningFunc} xmlSchemaValidityWarningFunc
                        * @param ctx {any} p.void
                        * @returns {any} void
                        */
                        (ctxt: xmlSchemaParserCtxtPtr | null, err: xmlSchemaValidityErrorFunc, warn: xmlSchemaValidityWarningFunc, ctx: any): any
                    }
                
                    xmlSchemaSetParserStructuredErrors: {
                        /** 
                        * @param ctxt {xmlSchemaParserCtxtPtr | null} xmlSchemaParserCtxtPtr
                        * @param serror {xmlStructuredErrorFunc} xmlStructuredErrorFunc
                        * @param ctx {any} p.void
                        * @returns {any} void
                        */
                        (ctxt: xmlSchemaParserCtxtPtr | null, serror: xmlStructuredErrorFunc, ctx: any): any
                    }
                
                    xmlSchemaSetValidErrors: {
                        /** 
                        * @param ctxt {xmlSchemaValidCtxtPtr | null} xmlSchemaValidCtxtPtr
                        * @param err {xmlSchemaValidityErrorFunc} xmlSchemaValidityErrorFunc
                        * @param warn {xmlSchemaValidityWarningFunc} xmlSchemaValidityWarningFunc
                        * @param ctx {any} p.void
                        * @returns {any} void
                        */
                        (ctxt: xmlSchemaValidCtxtPtr | null, err: xmlSchemaValidityErrorFunc, warn: xmlSchemaValidityWarningFunc, ctx: any): any
                    }
                
                    xmlSchemaSetValidOptions: {
                        /** 
                        * @param ctxt {xmlSchemaValidCtxtPtr | null} xmlSchemaValidCtxtPtr
                        * @param options {number} int
                        * @returns {number} int
                        */
                        (ctxt: xmlSchemaValidCtxtPtr | null, options: number): number
                    }
                
                    xmlSchemaSetValidStructuredErrors: {
                        /** 
                        * @param ctxt {xmlSchemaValidCtxtPtr | null} xmlSchemaValidCtxtPtr
                        * @param serror {xmlStructuredErrorFunc} xmlStructuredErrorFunc
                        * @param ctx {any} p.void
                        * @returns {any} void
                        */
                        (ctxt: xmlSchemaValidCtxtPtr | null, serror: xmlStructuredErrorFunc, ctx: any): any
                    }
                
                    xmlSchemaValPredefTypeNode: {
                        /** 
                        * @param type {xmlSchemaTypePtr | null} xmlSchemaTypePtr
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @param val {xmlSchemaValPtr | null} p.xmlSchemaValPtr
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @returns {number} int
                        */
                        (type: xmlSchemaTypePtr | null, value: string | Buffer | null, val: xmlSchemaValPtr | null, node: xmlNodePtr | null): number
                    }
                
                    xmlSchemaValPredefTypeNodeNoNorm: {
                        /** 
                        * @param type {xmlSchemaTypePtr | null} xmlSchemaTypePtr
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @param val {xmlSchemaValPtr | null} p.xmlSchemaValPtr
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @returns {number} int
                        */
                        (type: xmlSchemaTypePtr | null, value: string | Buffer | null, val: xmlSchemaValPtr | null, node: xmlNodePtr | null): number
                    }
                
                    xmlSchemaValidCtxtGetOptions: {
                        /** 
                        * @param ctxt {xmlSchemaValidCtxtPtr | null} xmlSchemaValidCtxtPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlSchemaValidCtxtPtr | null): number
                    }
                
                    xmlSchemaValidCtxtGetParserCtxt: {
                        /** 
                        * @param ctxt {xmlSchemaValidCtxtPtr | null} xmlSchemaValidCtxtPtr
                        * @returns {xmlParserCtxtPtr} xmlParserCtxtPtr
                        */
                        (ctxt: xmlSchemaValidCtxtPtr | null): xmlParserCtxtPtr
                    }
                
                    xmlSchemaValidateDoc: {
                        /** 
                        * @param ctxt {xmlSchemaValidCtxtPtr | null} xmlSchemaValidCtxtPtr
                        * @param instance {xmlDocPtr | null} xmlDocPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlSchemaValidCtxtPtr | null, instance: xmlDocPtr | null): number
                    }
                
                    xmlSchemaValidateFacet: {
                        /** 
                        * @param base {xmlSchemaTypePtr | null} xmlSchemaTypePtr
                        * @param facet {xmlSchemaFacetPtr | null} xmlSchemaFacetPtr
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @param val {xmlSchemaValPtr | null} xmlSchemaValPtr
                        * @returns {number} int
                        */
                        (base: xmlSchemaTypePtr | null, facet: xmlSchemaFacetPtr | null, value: string | Buffer | null, val: xmlSchemaValPtr | null): number
                    }
                
                    xmlSchemaValidateFacetWhtsp: {
                        /** 
                        * @param facet {xmlSchemaFacetPtr | null} xmlSchemaFacetPtr
                        * @param fws {xmlSchemaWhitespaceValueType} xmlSchemaWhitespaceValueType
                        * @param valType {xmlSchemaValType} xmlSchemaValType
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @param val {xmlSchemaValPtr | null} xmlSchemaValPtr
                        * @param ws {xmlSchemaWhitespaceValueType} xmlSchemaWhitespaceValueType
                        * @returns {number} int
                        */
                        (facet: xmlSchemaFacetPtr | null, fws: xmlSchemaWhitespaceValueType, valType: xmlSchemaValType, value: string | Buffer | null, val: xmlSchemaValPtr | null, ws: xmlSchemaWhitespaceValueType): number
                    }
                
                    xmlSchemaValidateFile: {
                        /** 
                        * @param ctxt {xmlSchemaValidCtxtPtr | null} xmlSchemaValidCtxtPtr
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @param options {number} int
                        * @returns {number} int
                        */
                        (ctxt: xmlSchemaValidCtxtPtr | null, filename: string | Buffer | null, options: number): number
                    }
                
                    xmlSchemaValidateLengthFacet: {
                        /** 
                        * @param type {xmlSchemaTypePtr | null} xmlSchemaTypePtr
                        * @param facet {xmlSchemaFacetPtr | null} xmlSchemaFacetPtr
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @param val {xmlSchemaValPtr | null} xmlSchemaValPtr
                        * @param length {number} p.unsigned long
                        * @returns {number} int
                        */
                        (type: xmlSchemaTypePtr | null, facet: xmlSchemaFacetPtr | null, value: string | Buffer | null, val: xmlSchemaValPtr | null, length: number): number
                    }
                
                    xmlSchemaValidateLengthFacetWhtsp: {
                        /** 
                        * @param facet {xmlSchemaFacetPtr | null} xmlSchemaFacetPtr
                        * @param valType {xmlSchemaValType} xmlSchemaValType
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @param val {xmlSchemaValPtr | null} xmlSchemaValPtr
                        * @param length {number} p.unsigned long
                        * @param ws {xmlSchemaWhitespaceValueType} xmlSchemaWhitespaceValueType
                        * @returns {number} int
                        */
                        (facet: xmlSchemaFacetPtr | null, valType: xmlSchemaValType, value: string | Buffer | null, val: xmlSchemaValPtr | null, length: number, ws: xmlSchemaWhitespaceValueType): number
                    }
                
                    xmlSchemaValidateListSimpleTypeFacet: {
                        /** 
                        * @param facet {xmlSchemaFacetPtr | null} xmlSchemaFacetPtr
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @param actualLen {number} unsigned long
                        * @param expectedLen {number} p.unsigned long
                        * @returns {number} int
                        */
                        (facet: xmlSchemaFacetPtr | null, value: string | Buffer | null, actualLen: number, expectedLen: number): number
                    }
                
                    xmlSchemaValidateOneElement: {
                        /** 
                        * @param ctxt {xmlSchemaValidCtxtPtr | null} xmlSchemaValidCtxtPtr
                        * @param elem {xmlNodePtr | null} xmlNodePtr
                        * @returns {number} int
                        */
                        (ctxt: xmlSchemaValidCtxtPtr | null, elem: xmlNodePtr | null): number
                    }
                
                    xmlSchemaValidatePredefinedType: {
                        /** 
                        * @param type {xmlSchemaTypePtr | null} xmlSchemaTypePtr
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @param val {xmlSchemaValPtr | null} p.xmlSchemaValPtr
                        * @returns {number} int
                        */
                        (type: xmlSchemaTypePtr | null, value: string | Buffer | null, val: xmlSchemaValPtr | null): number
                    }
                
                    xmlSchemaValidateSetFilename: {
                        /** 
                        * @param vctxt {xmlSchemaValidCtxtPtr | null} xmlSchemaValidCtxtPtr
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @returns {any} void
                        */
                        (vctxt: xmlSchemaValidCtxtPtr | null, filename: string | Buffer | null): any
                    }
                
                    xmlSchemaValidateSetLocator: {
                        /** 
                        * @param vctxt {xmlSchemaValidCtxtPtr | null} xmlSchemaValidCtxtPtr
                        * @param f {xmlSchemaValidityLocatorFunc} xmlSchemaValidityLocatorFunc
                        * @param ctxt {any} p.void
                        * @returns {any} void
                        */
                        (vctxt: xmlSchemaValidCtxtPtr | null, f: xmlSchemaValidityLocatorFunc, ctxt: any): any
                    }
                
                    xmlSchemaValidateStream: {
                        /** 
                        * @param ctxt {xmlSchemaValidCtxtPtr | null} xmlSchemaValidCtxtPtr
                        * @param input {xmlParserInputBufferPtr | null} xmlParserInputBufferPtr
                        * @param enc {xmlCharEncoding} xmlCharEncoding
                        * @param sax {xmlSAXHandlerPtr | null} xmlSAXHandlerPtr
                        * @param user_data {any} p.void
                        * @returns {number} int
                        */
                        (ctxt: xmlSchemaValidCtxtPtr | null, input: xmlParserInputBufferPtr | null, enc: xmlCharEncoding, sax: xmlSAXHandlerPtr | null, user_data: any): number
                    }
                
                    xmlSchemaValueAppend: {
                        /** 
                        * @param prev {xmlSchemaValPtr | null} xmlSchemaValPtr
                        * @param cur {xmlSchemaValPtr | null} xmlSchemaValPtr
                        * @returns {number} int
                        */
                        (prev: xmlSchemaValPtr | null, cur: xmlSchemaValPtr | null): number
                    }
                
                    xmlSchemaValueGetAsBoolean: {
                        /** 
                        * @param val {xmlSchemaValPtr | null} xmlSchemaValPtr
                        * @returns {number} int
                        */
                        (val: xmlSchemaValPtr | null): number
                    }
                
                    xmlSchemaValueGetAsString: {
                        /** 
                        * @param val {xmlSchemaValPtr | null} xmlSchemaValPtr
                        * @returns {string} q(const).xmlChar
                        */
                        (val: xmlSchemaValPtr | null): string
                    }
                
                    xmlSchemaValueGetNext: {
                        /** 
                        * @param cur {xmlSchemaValPtr | null} xmlSchemaValPtr
                        * @returns {xmlSchemaValPtr} xmlSchemaValPtr
                        */
                        (cur: xmlSchemaValPtr | null): xmlSchemaValPtr
                    }
                
                    xmlSchemaWhiteSpaceReplace: {
                        /** 
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} xmlChar
                        */
                        (value: string | Buffer | null): string
                    }
                
                    xmlSearchNs: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @param nameSpace {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlNsPtr | null)} xmlNsPtr
                        */
                        (doc: xmlDocPtr | null, node: xmlNodePtr | null, nameSpace: string | Buffer | null): xmlNsPtr | null
                    }
                
                    xmlSearchNsByHref: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @param href {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlNsPtr | null)} xmlNsPtr
                        */
                        (doc: xmlDocPtr | null, node: xmlNodePtr | null, href: string | Buffer | null): xmlNsPtr | null
                    }
                
                    xmlSetBufferAllocationScheme: {
                        /** 
                        * @param scheme {xmlBufferAllocationScheme} xmlBufferAllocationScheme
                        * @returns {any} void
                        */
                        (scheme: xmlBufferAllocationScheme): any
                    }
                
                    xmlSetCompressMode: {
                        /** 
                        * @param mode {number} int
                        * @returns {any} void
                        */
                        (mode: number): any
                    }
                
                    xmlSetDocCompressMode: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param mode {number} int
                        * @returns {any} void
                        */
                        (doc: xmlDocPtr | null, mode: number): any
                    }
                
                    xmlSetEntityReferenceFunc: {
                        /** 
                        * @param func {xmlEntityReferenceFunc} xmlEntityReferenceFunc
                        * @returns {any} void
                        */
                        (func: xmlEntityReferenceFunc): any
                    }
                
                    xmlSetExternalEntityLoader: {
                        /** 
                        * @param f {xmlExternalEntityLoader} xmlExternalEntityLoader
                        * @returns {any} void
                        */
                        (f: xmlExternalEntityLoader): any
                    }
                
                    xmlSetFeature: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param name {string | Buffer | null} p.q(const).char
                        * @param value {any} p.void
                        * @returns {number} int
                        */
                        (ctxt: xmlParserCtxtPtr | null, name: string | Buffer | null, value: any): number
                    }
                
                    xmlSetGenericErrorFunc: {
                        /** 
                        * @param ctx {any} p.void
                        * @param handler {xmlGenericErrorFunc} xmlGenericErrorFunc
                        * @returns {any} void
                        */
                        (ctx: any, handler: xmlGenericErrorFunc): any
                    }
                
                    xmlSetListDoc: {
                        /** 
                        * @param list {xmlNodePtr | null} xmlNodePtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @returns {any} void
                        */
                        (list: xmlNodePtr | null, doc: xmlDocPtr | null): any
                    }
                
                    xmlSetNs: {
                        /** 
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @param ns {xmlNsPtr | null} xmlNsPtr
                        * @returns {any} void
                        */
                        (node: xmlNodePtr | null, ns: xmlNsPtr | null): any
                    }
                
                    xmlSetNsProp: {
                        /** 
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @param ns {xmlNsPtr | null} xmlNsPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlAttrPtr | null)} xmlAttrPtr
                        */
                        (node: xmlNodePtr | null, ns: xmlNsPtr | null, name: string | Buffer | null, value: string | Buffer | null): xmlAttrPtr | null
                    }
                
                    xmlSetProp: {
                        /** 
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlAttrPtr | null)} xmlAttrPtr
                        */
                        (node: xmlNodePtr | null, name: string | Buffer | null, value: string | Buffer | null): xmlAttrPtr | null
                    }
                
                    xmlSetStructuredErrorFunc: {
                        /** 
                        * @param ctx {any} p.void
                        * @param handler {xmlStructuredErrorFunc} xmlStructuredErrorFunc
                        * @returns {any} void
                        */
                        (ctx: any, handler: xmlStructuredErrorFunc): any
                    }
                
                    xmlSetTreeDoc: {
                        /** 
                        * @param tree {xmlNodePtr | null} xmlNodePtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @returns {any} void
                        */
                        (tree: xmlNodePtr | null, doc: xmlDocPtr | null): any
                    }
                
                    xmlSetupParserForBuffer: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param buffer {string | Buffer | null} p.q(const).xmlChar
                        * @param filename {string | Buffer | null} p.q(const).char
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null, buffer: string | Buffer | null, filename: string | Buffer | null): any
                    }
                
                    xmlSkipBlankChars: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlParserCtxtPtr | null): number
                    }
                
                    xmlSnprintfElementContent: {
                        /** 
                        * @param buf {string | Buffer | null} p.char
                        * @param size {number} int
                        * @param content {xmlElementContentPtr | null} xmlElementContentPtr
                        * @param englob {number} int
                        * @returns {any} void
                        */
                        (buf: string | Buffer | null, size: number, content: xmlElementContentPtr | null, englob: number): any
                    }
                
                    xmlSplitQName: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param prefix {string | Buffer | null} p.p.xmlChar
                        * @returns {string} xmlChar
                        */
                        (ctxt: xmlParserCtxtPtr | null, name: string | Buffer | null, prefix: string | Buffer | null): string
                    }
                
                    xmlSplitQName2: {
                        /** 
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param prefix {string | Buffer | null} p.p.xmlChar
                        * @returns {string} xmlChar
                        */
                        (name: string | Buffer | null, prefix: string | Buffer | null): string
                    }
                
                    xmlSplitQName3: {
                        /** 
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} p.int
                        * @returns {string} q(const).xmlChar
                        */
                        (name: string | Buffer | null, len: number): string
                    }
                
                    xmlSprintfElementContent: {
                        /** 
                        * @param buf {string | Buffer | null} p.char
                        * @param content {xmlElementContentPtr | null} xmlElementContentPtr
                        * @param englob {number} int
                        * @returns {any} void
                        */
                        (buf: string | Buffer | null, content: xmlElementContentPtr | null, englob: number): any
                    }
                
                    xmlStopParser: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlParserCtxtPtr | null): any
                    }
                
                    xmlStrEqual: {
                        /** 
                        * @param str1 {string | Buffer | null} p.q(const).xmlChar
                        * @param str2 {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (str1: string | Buffer | null, str2: string | Buffer | null): number
                    }
                
                    xmlStrPrintf: {
                        /** 
                        * @param buf {string | Buffer | null} p.xmlChar
                        * @param len {number} int
                        * @param msg {string | Buffer | null} p.q(const).char
                        * @param arg3 {undefined} v(...)
                        * @returns {number} int
                        */
                        (buf: string | Buffer | null, len: number, msg: string | Buffer | null, arg3: undefined): number
                    }
                
                    xmlStrQEqual: {
                        /** 
                        * @param pref {string | Buffer | null} p.q(const).xmlChar
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param str {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (pref: string | Buffer | null, name: string | Buffer | null, str: string | Buffer | null): number
                    }
                
                    xmlStrcasecmp: {
                        /** 
                        * @param str1 {string | Buffer | null} p.q(const).xmlChar
                        * @param str2 {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (str1: string | Buffer | null, str2: string | Buffer | null): number
                    }
                
                    xmlStrcasestr: {
                        /** 
                        * @param str {string | Buffer | null} p.q(const).xmlChar
                        * @param val {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} q(const).xmlChar
                        */
                        (str: string | Buffer | null, val: string | Buffer | null): string
                    }
                
                    xmlStrcat: {
                        /** 
                        * @param cur {string | Buffer | null} p.xmlChar
                        * @param add {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} xmlChar
                        */
                        (cur: string | Buffer | null, add: string | Buffer | null): string
                    }
                
                    xmlStrchr: {
                        /** 
                        * @param str {string | Buffer | null} p.q(const).xmlChar
                        * @param val {string | Buffer | null} xmlChar
                        * @returns {string} q(const).xmlChar
                        */
                        (str: string | Buffer | null, val: string | Buffer | null): string
                    }
                
                    xmlStrcmp: {
                        /** 
                        * @param str1 {string | Buffer | null} p.q(const).xmlChar
                        * @param str2 {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (str1: string | Buffer | null, str2: string | Buffer | null): number
                    }
                
                    xmlStrdup: {
                        /** 
                        * @param cur {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} xmlChar
                        */
                        (cur: string | Buffer | null): string
                    }
                
                    xmlStreamPop: {
                        /** 
                        * @param stream {xmlStreamCtxtPtr | null} xmlStreamCtxtPtr
                        * @returns {number} int
                        */
                        (stream: xmlStreamCtxtPtr | null): number
                    }
                
                    xmlStreamPush: {
                        /** 
                        * @param stream {xmlStreamCtxtPtr | null} xmlStreamCtxtPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param ns {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (stream: xmlStreamCtxtPtr | null, name: string | Buffer | null, ns: string | Buffer | null): number
                    }
                
                    xmlStreamPushAttr: {
                        /** 
                        * @param stream {xmlStreamCtxtPtr | null} xmlStreamCtxtPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param ns {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (stream: xmlStreamCtxtPtr | null, name: string | Buffer | null, ns: string | Buffer | null): number
                    }
                
                    xmlStreamPushNode: {
                        /** 
                        * @param stream {xmlStreamCtxtPtr | null} xmlStreamCtxtPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param ns {string | Buffer | null} p.q(const).xmlChar
                        * @param nodeType {number} int
                        * @returns {number} int
                        */
                        (stream: xmlStreamCtxtPtr | null, name: string | Buffer | null, ns: string | Buffer | null, nodeType: number): number
                    }
                
                    xmlStreamWantsAnyNode: {
                        /** 
                        * @param stream {xmlStreamCtxtPtr | null} xmlStreamCtxtPtr
                        * @returns {number} int
                        */
                        (stream: xmlStreamCtxtPtr | null): number
                    }
                
                    xmlStringCurrentChar: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param cur {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} p.int
                        * @returns {number} int
                        */
                        (ctxt: xmlParserCtxtPtr | null, cur: string | Buffer | null, len: number): number
                    }
                
                    xmlStringDecodeEntities: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param str {string | Buffer | null} p.q(const).xmlChar
                        * @param what {number} int
                        * @param end {string | Buffer | null} xmlChar
                        * @param end2 {string | Buffer | null} xmlChar
                        * @param end3 {string | Buffer | null} xmlChar
                        * @returns {string} xmlChar
                        */
                        (ctxt: xmlParserCtxtPtr | null, str: string | Buffer | null, what: number, end: string | Buffer | null, end2: string | Buffer | null, end3: string | Buffer | null): string
                    }
                
                    xmlStringGetNodeList: {
                        /** 
                        * @param doc {xmlDocPtr | null} p.q(const).xmlDoc
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (doc: xmlDocPtr | null, value: string | Buffer | null): xmlNodePtr | null
                    }
                
                    xmlStringLenDecodeEntities: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param str {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @param what {number} int
                        * @param end {string | Buffer | null} xmlChar
                        * @param end2 {string | Buffer | null} xmlChar
                        * @param end3 {string | Buffer | null} xmlChar
                        * @returns {string} xmlChar
                        */
                        (ctxt: xmlParserCtxtPtr | null, str: string | Buffer | null, len: number, what: number, end: string | Buffer | null, end2: string | Buffer | null, end3: string | Buffer | null): string
                    }
                
                    xmlStringLenGetNodeList: {
                        /** 
                        * @param doc {xmlDocPtr | null} p.q(const).xmlDoc
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (doc: xmlDocPtr | null, value: string | Buffer | null, len: number): xmlNodePtr | null
                    }
                
                    xmlStrlen: {
                        /** 
                        * @param str {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (str: string | Buffer | null): number
                    }
                
                    xmlStrncasecmp: {
                        /** 
                        * @param str1 {string | Buffer | null} p.q(const).xmlChar
                        * @param str2 {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {number} int
                        */
                        (str1: string | Buffer | null, str2: string | Buffer | null, len: number): number
                    }
                
                    xmlStrncat: {
                        /** 
                        * @param cur {string | Buffer | null} p.xmlChar
                        * @param add {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {string} xmlChar
                        */
                        (cur: string | Buffer | null, add: string | Buffer | null, len: number): string
                    }
                
                    xmlStrncatNew: {
                        /** 
                        * @param str1 {string | Buffer | null} p.q(const).xmlChar
                        * @param str2 {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {string} xmlChar
                        */
                        (str1: string | Buffer | null, str2: string | Buffer | null, len: number): string
                    }
                
                    xmlStrncmp: {
                        /** 
                        * @param str1 {string | Buffer | null} p.q(const).xmlChar
                        * @param str2 {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {number} int
                        */
                        (str1: string | Buffer | null, str2: string | Buffer | null, len: number): number
                    }
                
                    xmlStrndup: {
                        /** 
                        * @param cur {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {string} xmlChar
                        */
                        (cur: string | Buffer | null, len: number): string
                    }
                
                    xmlStrstr: {
                        /** 
                        * @param str {string | Buffer | null} p.q(const).xmlChar
                        * @param val {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} q(const).xmlChar
                        */
                        (str: string | Buffer | null, val: string | Buffer | null): string
                    }
                
                    xmlStrsub: {
                        /** 
                        * @param str {string | Buffer | null} p.q(const).xmlChar
                        * @param start {number} int
                        * @param len {number} int
                        * @returns {string} xmlChar
                        */
                        (str: string | Buffer | null, start: number, len: number): string
                    }
                
                    xmlSubstituteEntitiesDefault: {
                        /** 
                        * @param val {number} int
                        * @returns {number} int
                        */
                        (val: number): number
                    }
                
                    xmlSwitchEncoding: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param enc {xmlCharEncoding} xmlCharEncoding
                        * @returns {number} int
                        */
                        (ctxt: xmlParserCtxtPtr | null, enc: xmlCharEncoding): number
                    }
                
                    xmlSwitchInputEncoding: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param input {xmlParserInputPtr | null} xmlParserInputPtr
                        * @param handler {xmlCharEncodingHandlerPtr | null} xmlCharEncodingHandlerPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlParserCtxtPtr | null, input: xmlParserInputPtr | null, handler: xmlCharEncodingHandlerPtr | null): number
                    }
                
                    xmlSwitchToEncoding: {
                        /** 
                        * @param ctxt {xmlParserCtxtPtr | null} xmlParserCtxtPtr
                        * @param handler {xmlCharEncodingHandlerPtr | null} xmlCharEncodingHandlerPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlParserCtxtPtr | null, handler: xmlCharEncodingHandlerPtr | null): number
                    }
                
                    xmlTextConcat: {
                        /** 
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @param content {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {number} int
                        */
                        (node: xmlNodePtr | null, content: string | Buffer | null, len: number): number
                    }
                
                    xmlTextMerge: {
                        /** 
                        * @param first {xmlNodePtr | null} xmlNodePtr
                        * @param second {xmlNodePtr | null} xmlNodePtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (first: xmlNodePtr | null, second: xmlNodePtr | null): xmlNodePtr | null
                    }
                
                    xmlThrDefBufferAllocScheme: {
                        /** 
                        * @param v {xmlBufferAllocationScheme} xmlBufferAllocationScheme
                        * @returns {xmlBufferAllocationScheme} xmlBufferAllocationScheme
                        */
                        (v: xmlBufferAllocationScheme): xmlBufferAllocationScheme
                    }
                
                    xmlThrDefDefaultBufferSize: {
                        /** 
                        * @param v {number} int
                        * @returns {number} int
                        */
                        (v: number): number
                    }
                
                    xmlThrDefDeregisterNodeDefault: {
                        /** 
                        * @param func {xmlDeregisterNodeFunc} xmlDeregisterNodeFunc
                        * @returns {xmlDeregisterNodeFunc} xmlDeregisterNodeFunc
                        */
                        (func: xmlDeregisterNodeFunc): xmlDeregisterNodeFunc
                    }
                
                    xmlThrDefDoValidityCheckingDefaultValue: {
                        /** 
                        * @param v {number} int
                        * @returns {number} int
                        */
                        (v: number): number
                    }
                
                    xmlThrDefGetWarningsDefaultValue: {
                        /** 
                        * @param v {number} int
                        * @returns {number} int
                        */
                        (v: number): number
                    }
                
                    xmlThrDefIndentTreeOutput: {
                        /** 
                        * @param v {number} int
                        * @returns {number} int
                        */
                        (v: number): number
                    }
                
                    xmlThrDefKeepBlanksDefaultValue: {
                        /** 
                        * @param v {number} int
                        * @returns {number} int
                        */
                        (v: number): number
                    }
                
                    xmlThrDefLineNumbersDefaultValue: {
                        /** 
                        * @param v {number} int
                        * @returns {number} int
                        */
                        (v: number): number
                    }
                
                    xmlThrDefLoadExtDtdDefaultValue: {
                        /** 
                        * @param v {number} int
                        * @returns {number} int
                        */
                        (v: number): number
                    }
                
                    xmlThrDefOutputBufferCreateFilenameDefault: {
                        /** 
                        * @param func {xmlOutputBufferCreateFilenameFunc} xmlOutputBufferCreateFilenameFunc
                        * @returns {xmlOutputBufferCreateFilenameFunc} xmlOutputBufferCreateFilenameFunc
                        */
                        (func: xmlOutputBufferCreateFilenameFunc): xmlOutputBufferCreateFilenameFunc
                    }
                
                    xmlThrDefParserDebugEntities: {
                        /** 
                        * @param v {number} int
                        * @returns {number} int
                        */
                        (v: number): number
                    }
                
                    xmlThrDefParserInputBufferCreateFilenameDefault: {
                        /** 
                        * @param func {xmlParserInputBufferCreateFilenameFunc} xmlParserInputBufferCreateFilenameFunc
                        * @returns {xmlParserInputBufferCreateFilenameFunc} xmlParserInputBufferCreateFilenameFunc
                        */
                        (func: xmlParserInputBufferCreateFilenameFunc): xmlParserInputBufferCreateFilenameFunc
                    }
                
                    xmlThrDefPedanticParserDefaultValue: {
                        /** 
                        * @param v {number} int
                        * @returns {number} int
                        */
                        (v: number): number
                    }
                
                    xmlThrDefRegisterNodeDefault: {
                        /** 
                        * @param func {xmlRegisterNodeFunc} xmlRegisterNodeFunc
                        * @returns {xmlRegisterNodeFunc} xmlRegisterNodeFunc
                        */
                        (func: xmlRegisterNodeFunc): xmlRegisterNodeFunc
                    }
                
                    xmlThrDefSaveNoEmptyTags: {
                        /** 
                        * @param v {number} int
                        * @returns {number} int
                        */
                        (v: number): number
                    }
                
                    xmlThrDefSetGenericErrorFunc: {
                        /** 
                        * @param ctx {any} p.void
                        * @param handler {xmlGenericErrorFunc} xmlGenericErrorFunc
                        * @returns {any} void
                        */
                        (ctx: any, handler: xmlGenericErrorFunc): any
                    }
                
                    xmlThrDefSetStructuredErrorFunc: {
                        /** 
                        * @param ctx {any} p.void
                        * @param handler {xmlStructuredErrorFunc} xmlStructuredErrorFunc
                        * @returns {any} void
                        */
                        (ctx: any, handler: xmlStructuredErrorFunc): any
                    }
                
                    xmlThrDefSubstituteEntitiesDefaultValue: {
                        /** 
                        * @param v {number} int
                        * @returns {number} int
                        */
                        (v: number): number
                    }
                
                    xmlThrDefTreeIndentString: {
                        /** 
                        * @param v {string | Buffer | null} p.q(const).char
                        * @returns {string} q(const).char
                        */
                        (v: string | Buffer | null): string
                    }
                
                    xmlUCSIsAegeanNumbers: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsAlphabeticPresentationForms: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsArabic: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsArabicPresentationFormsA: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsArabicPresentationFormsB: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsArmenian: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsArrows: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsBasicLatin: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsBengali: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsBlock: {
                        /** 
                        * @param code {number} int
                        * @param block {string | Buffer | null} p.q(const).char
                        * @returns {number} int
                        */
                        (code: number, block: string | Buffer | null): number
                    }
                
                    xmlUCSIsBlockElements: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsBopomofo: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsBopomofoExtended: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsBoxDrawing: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsBraillePatterns: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsBuhid: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsByzantineMusicalSymbols: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCJKCompatibility: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCJKCompatibilityForms: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCJKCompatibilityIdeographs: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCJKCompatibilityIdeographsSupplement: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCJKRadicalsSupplement: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCJKSymbolsandPunctuation: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCJKUnifiedIdeographs: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCJKUnifiedIdeographsExtensionA: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCJKUnifiedIdeographsExtensionB: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCat: {
                        /** 
                        * @param code {number} int
                        * @param cat {string | Buffer | null} p.q(const).char
                        * @returns {number} int
                        */
                        (code: number, cat: string | Buffer | null): number
                    }
                
                    xmlUCSIsCatC: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatCc: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatCf: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatCo: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatCs: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatL: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatLl: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatLm: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatLo: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatLt: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatLu: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatM: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatMc: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatMe: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatMn: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatN: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatNd: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatNl: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatNo: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatP: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatPc: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatPd: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatPe: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatPf: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatPi: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatPo: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatPs: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatS: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatSc: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatSk: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatSm: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatSo: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatZ: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatZl: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatZp: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCatZs: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCherokee: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCombiningDiacriticalMarks: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCombiningDiacriticalMarksforSymbols: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCombiningHalfMarks: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCombiningMarksforSymbols: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsControlPictures: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCurrencySymbols: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCypriotSyllabary: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCyrillic: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsCyrillicSupplement: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsDeseret: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsDevanagari: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsDingbats: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsEnclosedAlphanumerics: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsEnclosedCJKLettersandMonths: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsEthiopic: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsGeneralPunctuation: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsGeometricShapes: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsGeorgian: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsGothic: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsGreek: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsGreekExtended: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsGreekandCoptic: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsGujarati: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsGurmukhi: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsHalfwidthandFullwidthForms: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsHangulCompatibilityJamo: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsHangulJamo: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsHangulSyllables: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsHanunoo: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsHebrew: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsHighPrivateUseSurrogates: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsHighSurrogates: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsHiragana: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsIPAExtensions: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsIdeographicDescriptionCharacters: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsKanbun: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsKangxiRadicals: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsKannada: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsKatakana: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsKatakanaPhoneticExtensions: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsKhmer: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsKhmerSymbols: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsLao: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsLatin1Supplement: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsLatinExtendedA: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsLatinExtendedAdditional: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsLatinExtendedB: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsLetterlikeSymbols: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsLimbu: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsLinearBIdeograms: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsLinearBSyllabary: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsLowSurrogates: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsMalayalam: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsMathematicalAlphanumericSymbols: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsMathematicalOperators: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsMiscellaneousMathematicalSymbolsA: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsMiscellaneousMathematicalSymbolsB: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsMiscellaneousSymbols: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsMiscellaneousSymbolsandArrows: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsMiscellaneousTechnical: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsMongolian: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsMusicalSymbols: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsMyanmar: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsNumberForms: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsOgham: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsOldItalic: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsOpticalCharacterRecognition: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsOriya: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsOsmanya: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsPhoneticExtensions: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsPrivateUse: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsPrivateUseArea: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsRunic: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsShavian: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsSinhala: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsSmallFormVariants: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsSpacingModifierLetters: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsSpecials: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsSuperscriptsandSubscripts: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsSupplementalArrowsA: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsSupplementalArrowsB: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsSupplementalMathematicalOperators: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsSupplementaryPrivateUseAreaA: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsSupplementaryPrivateUseAreaB: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsSyriac: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsTagalog: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsTagbanwa: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsTags: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsTaiLe: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsTaiXuanJingSymbols: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsTamil: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsTelugu: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsThaana: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsThai: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsTibetan: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsUgaritic: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsUnifiedCanadianAboriginalSyllabics: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsVariationSelectors: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsVariationSelectorsSupplement: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsYiRadicals: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsYiSyllables: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlUCSIsYijingHexagramSymbols: {
                        /** 
                        * @param code {number} int
                        * @returns {number} int
                        */
                        (code: number): number
                    }
                
                    xmlURIEscape: {
                        /** 
                        * @param str {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} xmlChar
                        */
                        (str: string | Buffer | null): string
                    }
                
                    xmlURIEscapeStr: {
                        /** 
                        * @param str {string | Buffer | null} p.q(const).xmlChar
                        * @param list {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} xmlChar
                        */
                        (str: string | Buffer | null, list: string | Buffer | null): string
                    }
                
                    xmlURIUnescapeString: {
                        /** 
                        * @param str {string | Buffer | null} p.q(const).char
                        * @param len {number} int
                        * @param target {string | Buffer | null} p.char
                        * @returns {string} char
                        */
                        (str: string | Buffer | null, len: number, target: string | Buffer | null): string
                    }
                
                    xmlUTF8Charcmp: {
                        /** 
                        * @param utf1 {string | Buffer | null} p.q(const).xmlChar
                        * @param utf2 {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (utf1: string | Buffer | null, utf2: string | Buffer | null): number
                    }
                
                    xmlUTF8Size: {
                        /** 
                        * @param utf {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (utf: string | Buffer | null): number
                    }
                
                    xmlUTF8Strlen: {
                        /** 
                        * @param utf {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (utf: string | Buffer | null): number
                    }
                
                    xmlUTF8Strloc: {
                        /** 
                        * @param utf {string | Buffer | null} p.q(const).xmlChar
                        * @param utfchar {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (utf: string | Buffer | null, utfchar: string | Buffer | null): number
                    }
                
                    xmlUTF8Strndup: {
                        /** 
                        * @param utf {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {string} xmlChar
                        */
                        (utf: string | Buffer | null, len: number): string
                    }
                
                    xmlUTF8Strpos: {
                        /** 
                        * @param utf {string | Buffer | null} p.q(const).xmlChar
                        * @param pos {number} int
                        * @returns {string} q(const).xmlChar
                        */
                        (utf: string | Buffer | null, pos: number): string
                    }
                
                    xmlUTF8Strsize: {
                        /** 
                        * @param utf {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {number} int
                        */
                        (utf: string | Buffer | null, len: number): number
                    }
                
                    xmlUTF8Strsub: {
                        /** 
                        * @param utf {string | Buffer | null} p.q(const).xmlChar
                        * @param start {number} int
                        * @param len {number} int
                        * @returns {string} xmlChar
                        */
                        (utf: string | Buffer | null, start: number, len: number): string
                    }
                
                    xmlUnlinkNode: {
                        /** 
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @returns {any} void
                        */
                        (cur: xmlNodePtr | null): any
                    }
                
                    xmlUnlockLibrary: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    xmlUnsetNsProp: {
                        /** 
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @param ns {xmlNsPtr | null} xmlNsPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (node: xmlNodePtr | null, ns: xmlNsPtr | null, name: string | Buffer | null): number
                    }
                
                    xmlUnsetProp: {
                        /** 
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (node: xmlNodePtr | null, name: string | Buffer | null): number
                    }
                
                    xmlValidBuildContentModel: {
                        /** 
                        * @param ctxt {xmlValidCtxtPtr | null} xmlValidCtxtPtr
                        * @param elem {xmlElementPtr | null} xmlElementPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlValidCtxtPtr | null, elem: xmlElementPtr | null): number
                    }
                
                    xmlValidCtxtNormalizeAttributeValue: {
                        /** 
                        * @param ctxt {xmlValidCtxtPtr | null} xmlValidCtxtPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param elem {xmlNodePtr | null} xmlNodePtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} xmlChar
                        */
                        (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null, elem: xmlNodePtr | null, name: string | Buffer | null, value: string | Buffer | null): string
                    }
                
                    xmlValidGetPotentialChildren: {
                        /** 
                        * @param ctree {xmlElementContent} p.xmlElementContent
                        * @param names {string | Buffer | null} p.p.q(const).xmlChar
                        * @param len {number} p.int
                        * @param max {number} int
                        * @returns {number} int
                        */
                        (ctree: xmlElementContent, names: string | Buffer | null, len: number, max: number): number
                    }
                
                    xmlValidGetValidElements: {
                        /** 
                        * @param prev {xmlNode} p.xmlNode
                        * @param next {xmlNode} p.xmlNode
                        * @param names {string | Buffer | null} p.p.q(const).xmlChar
                        * @param max {number} int
                        * @returns {number} int
                        */
                        (prev: xmlNode, next: xmlNode, names: string | Buffer | null, max: number): number
                    }
                
                    xmlValidNormalizeAttributeValue: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param elem {xmlNodePtr | null} xmlNodePtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} xmlChar
                        */
                        (doc: xmlDocPtr | null, elem: xmlNodePtr | null, name: string | Buffer | null, value: string | Buffer | null): string
                    }
                
                    xmlValidateAttributeDecl: {
                        /** 
                        * @param ctxt {xmlValidCtxtPtr | null} xmlValidCtxtPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param attr {xmlAttributePtr | null} xmlAttributePtr
                        * @returns {number} int
                        */
                        (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null, attr: xmlAttributePtr | null): number
                    }
                
                    xmlValidateAttributeValue: {
                        /** 
                        * @param type {xmlAttributeType} xmlAttributeType
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (type: xmlAttributeType, value: string | Buffer | null): number
                    }
                
                    xmlValidateDocument: {
                        /** 
                        * @param ctxt {xmlValidCtxtPtr | null} xmlValidCtxtPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null): number
                    }
                
                    xmlValidateDocumentFinal: {
                        /** 
                        * @param ctxt {xmlValidCtxtPtr | null} xmlValidCtxtPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null): number
                    }
                
                    xmlValidateDtd: {
                        /** 
                        * @param ctxt {xmlValidCtxtPtr | null} xmlValidCtxtPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param dtd {xmlDtdPtr | null} xmlDtdPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null, dtd: xmlDtdPtr | null): number
                    }
                
                    xmlValidateDtdFinal: {
                        /** 
                        * @param ctxt {xmlValidCtxtPtr | null} xmlValidCtxtPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null): number
                    }
                
                    xmlValidateElement: {
                        /** 
                        * @param ctxt {xmlValidCtxtPtr | null} xmlValidCtxtPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param elem {xmlNodePtr | null} xmlNodePtr
                        * @returns {number} int
                        */
                        (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null, elem: xmlNodePtr | null): number
                    }
                
                    xmlValidateElementDecl: {
                        /** 
                        * @param ctxt {xmlValidCtxtPtr | null} xmlValidCtxtPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param elem {xmlElementPtr | null} xmlElementPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null, elem: xmlElementPtr | null): number
                    }
                
                    xmlValidateNCName: {
                        /** 
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @param space {number} int
                        * @returns {number} int
                        */
                        (value: string | Buffer | null, space: number): number
                    }
                
                    xmlValidateNMToken: {
                        /** 
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @param space {number} int
                        * @returns {number} int
                        */
                        (value: string | Buffer | null, space: number): number
                    }
                
                    xmlValidateName: {
                        /** 
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @param space {number} int
                        * @returns {number} int
                        */
                        (value: string | Buffer | null, space: number): number
                    }
                
                    xmlValidateNameValue: {
                        /** 
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (value: string | Buffer | null): number
                    }
                
                    xmlValidateNamesValue: {
                        /** 
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (value: string | Buffer | null): number
                    }
                
                    xmlValidateNmtokenValue: {
                        /** 
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (value: string | Buffer | null): number
                    }
                
                    xmlValidateNmtokensValue: {
                        /** 
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (value: string | Buffer | null): number
                    }
                
                    xmlValidateNotationDecl: {
                        /** 
                        * @param ctxt {xmlValidCtxtPtr | null} xmlValidCtxtPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param nota {xmlNotationPtr | null} xmlNotationPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null, nota: xmlNotationPtr | null): number
                    }
                
                    xmlValidateNotationUse: {
                        /** 
                        * @param ctxt {xmlValidCtxtPtr | null} xmlValidCtxtPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param notationName {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null, notationName: string | Buffer | null): number
                    }
                
                    xmlValidateOneAttribute: {
                        /** 
                        * @param ctxt {xmlValidCtxtPtr | null} xmlValidCtxtPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param elem {xmlNodePtr | null} xmlNodePtr
                        * @param attr {xmlAttrPtr | null} xmlAttrPtr
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null, elem: xmlNodePtr | null, attr: xmlAttrPtr | null, value: string | Buffer | null): number
                    }
                
                    xmlValidateOneElement: {
                        /** 
                        * @param ctxt {xmlValidCtxtPtr | null} xmlValidCtxtPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param elem {xmlNodePtr | null} xmlNodePtr
                        * @returns {number} int
                        */
                        (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null, elem: xmlNodePtr | null): number
                    }
                
                    xmlValidateOneNamespace: {
                        /** 
                        * @param ctxt {xmlValidCtxtPtr | null} xmlValidCtxtPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param elem {xmlNodePtr | null} xmlNodePtr
                        * @param prefix {string | Buffer | null} p.q(const).xmlChar
                        * @param ns {xmlNsPtr | null} xmlNsPtr
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null, elem: xmlNodePtr | null, prefix: string | Buffer | null, ns: xmlNsPtr | null, value: string | Buffer | null): number
                    }
                
                    xmlValidatePopElement: {
                        /** 
                        * @param ctxt {xmlValidCtxtPtr | null} xmlValidCtxtPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param elem {xmlNodePtr | null} xmlNodePtr
                        * @param qname {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null, elem: xmlNodePtr | null, qname: string | Buffer | null): number
                    }
                
                    xmlValidatePushCData: {
                        /** 
                        * @param ctxt {xmlValidCtxtPtr | null} xmlValidCtxtPtr
                        * @param data {string | Buffer | null} p.q(const).xmlChar
                        * @param len {number} int
                        * @returns {number} int
                        */
                        (ctxt: xmlValidCtxtPtr | null, data: string | Buffer | null, len: number): number
                    }
                
                    xmlValidatePushElement: {
                        /** 
                        * @param ctxt {xmlValidCtxtPtr | null} xmlValidCtxtPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param elem {xmlNodePtr | null} xmlNodePtr
                        * @param qname {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null, elem: xmlNodePtr | null, qname: string | Buffer | null): number
                    }
                
                    xmlValidateQName: {
                        /** 
                        * @param value {string | Buffer | null} p.q(const).xmlChar
                        * @param space {number} int
                        * @returns {number} int
                        */
                        (value: string | Buffer | null, space: number): number
                    }
                
                    xmlValidateRoot: {
                        /** 
                        * @param ctxt {xmlValidCtxtPtr | null} xmlValidCtxtPtr
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlValidCtxtPtr | null, doc: xmlDocPtr | null): number
                    }
                
                    xmlXPathAddValues: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null): any
                    }
                
                    xmlXPathBooleanFunction: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param nargs {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, nargs: number): any
                    }
                
                    xmlXPathCastBooleanToNumber: {
                        /** 
                        * @param val {number} int
                        * @returns {number} double
                        */
                        (val: number): number
                    }
                
                    xmlXPathCastBooleanToString: {
                        /** 
                        * @param val {number} int
                        * @returns {string} xmlChar
                        */
                        (val: number): string
                    }
                
                    xmlXPathCastNodeSetToBoolean: {
                        /** 
                        * @param ns {xmlNodePtr[]} xmlNodeSetPtr
                        * @returns {number} int
                        */
                        (ns: xmlNodePtr[]): number
                    }
                
                    xmlXPathCastNodeSetToNumber: {
                        /** 
                        * @param ns {xmlNodePtr[]} xmlNodeSetPtr
                        * @returns {number} double
                        */
                        (ns: xmlNodePtr[]): number
                    }
                
                    xmlXPathCastNodeSetToString: {
                        /** 
                        * @param ns {xmlNodePtr[]} xmlNodeSetPtr
                        * @returns {string} xmlChar
                        */
                        (ns: xmlNodePtr[]): string
                    }
                
                    xmlXPathCastNodeToNumber: {
                        /** 
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @returns {number} double
                        */
                        (node: xmlNodePtr | null): number
                    }
                
                    xmlXPathCastNodeToString: {
                        /** 
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @returns {string} xmlChar
                        */
                        (node: xmlNodePtr | null): string
                    }
                
                    xmlXPathCastNumberToBoolean: {
                        /** 
                        * @param val {number} double
                        * @returns {number} int
                        */
                        (val: number): number
                    }
                
                    xmlXPathCastNumberToString: {
                        /** 
                        * @param val {number} double
                        * @returns {string} xmlChar
                        */
                        (val: number): string
                    }
                
                    xmlXPathCastStringToBoolean: {
                        /** 
                        * @param val {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (val: string | Buffer | null): number
                    }
                
                    xmlXPathCastStringToNumber: {
                        /** 
                        * @param val {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} double
                        */
                        (val: string | Buffer | null): number
                    }
                
                    xmlXPathCastToBoolean: {
                        /** 
                        * @param val {xmlXPathObjectPtr | null} xmlXPathObjectPtr
                        * @returns {number} int
                        */
                        (val: xmlXPathObjectPtr | null): number
                    }
                
                    xmlXPathCastToNumber: {
                        /** 
                        * @param val {xmlXPathObjectPtr | null} xmlXPathObjectPtr
                        * @returns {number} double
                        */
                        (val: xmlXPathObjectPtr | null): number
                    }
                
                    xmlXPathCastToString: {
                        /** 
                        * @param val {xmlXPathObjectPtr | null} xmlXPathObjectPtr
                        * @returns {string} xmlChar
                        */
                        (val: xmlXPathObjectPtr | null): string
                    }
                
                    xmlXPathCeilingFunction: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param nargs {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, nargs: number): any
                    }
                
                    xmlXPathCmpNodes: {
                        /** 
                        * @param node1 {xmlNodePtr | null} xmlNodePtr
                        * @param node2 {xmlNodePtr | null} xmlNodePtr
                        * @returns {number} int
                        */
                        (node1: xmlNodePtr | null, node2: xmlNodePtr | null): number
                    }
                
                    xmlXPathCompareValues: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param inf {number} int
                        * @param strict {number} int
                        * @returns {number} int
                        */
                        (ctxt: xmlXPathParserContextPtr | null, inf: number, strict: number): number
                    }
                
                    xmlXPathCompile: {
                        /** 
                        * @param str {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlXPathCompExprPtr} xmlXPathCompExprPtr
                        */
                        (str: string | Buffer | null): xmlXPathCompExprPtr
                    }
                
                    xmlXPathCompiledEval: {
                        /** 
                        * @param comp {xmlXPathCompExprPtr | null} xmlXPathCompExprPtr
                        * @param ctx {xmlXPathContextPtr | null} xmlXPathContextPtr
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (comp: xmlXPathCompExprPtr | null, ctx: xmlXPathContextPtr | null): xmlXPathObjectPtr
                    }
                
                    xmlXPathCompiledEvalToBoolean: {
                        /** 
                        * @param comp {xmlXPathCompExprPtr | null} xmlXPathCompExprPtr
                        * @param ctxt {xmlXPathContextPtr | null} xmlXPathContextPtr
                        * @returns {number} int
                        */
                        (comp: xmlXPathCompExprPtr | null, ctxt: xmlXPathContextPtr | null): number
                    }
                
                    xmlXPathConcatFunction: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param nargs {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, nargs: number): any
                    }
                
                    xmlXPathContainsFunction: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param nargs {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, nargs: number): any
                    }
                
                    xmlXPathContextSetCache: {
                        /** 
                        * @param ctxt {xmlXPathContextPtr | null} xmlXPathContextPtr
                        * @param active {number} int
                        * @param value {number} int
                        * @param options {number} int
                        * @returns {number} int
                        */
                        (ctxt: xmlXPathContextPtr | null, active: number, value: number, options: number): number
                    }
                
                    xmlXPathConvertBoolean: {
                        /** 
                        * @param val {xmlXPathObjectPtr | null} xmlXPathObjectPtr
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (val: xmlXPathObjectPtr | null): xmlXPathObjectPtr
                    }
                
                    xmlXPathConvertNumber: {
                        /** 
                        * @param val {xmlXPathObjectPtr | null} xmlXPathObjectPtr
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (val: xmlXPathObjectPtr | null): xmlXPathObjectPtr
                    }
                
                    xmlXPathConvertString: {
                        /** 
                        * @param val {xmlXPathObjectPtr | null} xmlXPathObjectPtr
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (val: xmlXPathObjectPtr | null): xmlXPathObjectPtr
                    }
                
                    xmlXPathCountFunction: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param nargs {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, nargs: number): any
                    }
                
                    xmlXPathCtxtCompile: {
                        /** 
                        * @param ctxt {xmlXPathContextPtr | null} xmlXPathContextPtr
                        * @param str {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlXPathCompExprPtr} xmlXPathCompExprPtr
                        */
                        (ctxt: xmlXPathContextPtr | null, str: string | Buffer | null): xmlXPathCompExprPtr
                    }
                
                    xmlXPathDifference: {
                        /** 
                        * @param nodes1 {xmlNodePtr[]} xmlNodeSetPtr
                        * @param nodes2 {xmlNodePtr[]} xmlNodeSetPtr
                        * @returns {xmlNodePtr[]} xmlNodeSetPtr
                        */
                        (nodes1: xmlNodePtr[], nodes2: xmlNodePtr[]): xmlNodePtr[]
                    }
                
                    xmlXPathDistinct: {
                        /** 
                        * @param nodes {xmlNodePtr[]} xmlNodeSetPtr
                        * @returns {xmlNodePtr[]} xmlNodeSetPtr
                        */
                        (nodes: xmlNodePtr[]): xmlNodePtr[]
                    }
                
                    xmlXPathDistinctSorted: {
                        /** 
                        * @param nodes {xmlNodePtr[]} xmlNodeSetPtr
                        * @returns {xmlNodePtr[]} xmlNodeSetPtr
                        */
                        (nodes: xmlNodePtr[]): xmlNodePtr[]
                    }
                
                    xmlXPathDivValues: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null): any
                    }
                
                    xmlXPathEqualValues: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlXPathParserContextPtr | null): number
                    }
                
                    xmlXPathErr: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param error {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, error: number): any
                    }
                
                    xmlXPathEval: {
                        /** 
                        * @param str {string | Buffer | null} p.q(const).xmlChar
                        * @param ctx {xmlXPathContextPtr | null} xmlXPathContextPtr
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (str: string | Buffer | null, ctx: xmlXPathContextPtr | null): xmlXPathObjectPtr
                    }
                
                    xmlXPathEvalExpr: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null): any
                    }
                
                    xmlXPathEvalExpression: {
                        /** 
                        * @param str {string | Buffer | null} p.q(const).xmlChar
                        * @param ctxt {xmlXPathContextPtr | null} xmlXPathContextPtr
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (str: string | Buffer | null, ctxt: xmlXPathContextPtr | null): xmlXPathObjectPtr
                    }
                
                    xmlXPathEvalPredicate: {
                        /** 
                        * @param ctxt {xmlXPathContextPtr | null} xmlXPathContextPtr
                        * @param res {xmlXPathObjectPtr | null} xmlXPathObjectPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlXPathContextPtr | null, res: xmlXPathObjectPtr | null): number
                    }
                
                    xmlXPathEvaluatePredicateResult: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param res {xmlXPathObjectPtr | null} xmlXPathObjectPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlXPathParserContextPtr | null, res: xmlXPathObjectPtr | null): number
                    }
                
                    xmlXPathFalseFunction: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param nargs {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, nargs: number): any
                    }
                
                    xmlXPathFloorFunction: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param nargs {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, nargs: number): any
                    }
                
                    xmlXPathFreeCompExpr: {
                        /** 
                        * @param comp {xmlXPathCompExprPtr | null} xmlXPathCompExprPtr
                        * @returns {any} void
                        */
                        (comp: xmlXPathCompExprPtr | null): any
                    }
                
                    xmlXPathFreeContext: {
                        /** 
                        * @param ctxt {xmlXPathContextPtr | null} xmlXPathContextPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathContextPtr | null): any
                    }
                
                    xmlXPathFreeNodeSet: {
                        /** 
                        * @param obj {xmlNodePtr[]} xmlNodeSetPtr
                        * @returns {any} void
                        */
                        (obj: xmlNodePtr[]): any
                    }
                
                    xmlXPathFreeNodeSetList: {
                        /** 
                        * @param obj {xmlXPathObjectPtr | null} xmlXPathObjectPtr
                        * @returns {any} void
                        */
                        (obj: xmlXPathObjectPtr | null): any
                    }
                
                    xmlXPathFreeObject: {
                        /** 
                        * @param obj {xmlXPathObjectPtr | null} xmlXPathObjectPtr
                        * @returns {any} void
                        */
                        (obj: xmlXPathObjectPtr | null): any
                    }
                
                    xmlXPathFreeParserContext: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null): any
                    }
                
                    xmlXPathFunctionLookup: {
                        /** 
                        * @param ctxt {xmlXPathContextPtr | null} xmlXPathContextPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlXPathFunction} xmlXPathFunction
                        */
                        (ctxt: xmlXPathContextPtr | null, name: string | Buffer | null): xmlXPathFunction
                    }
                
                    xmlXPathFunctionLookupNS: {
                        /** 
                        * @param ctxt {xmlXPathContextPtr | null} xmlXPathContextPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param ns_uri {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlXPathFunction} xmlXPathFunction
                        */
                        (ctxt: xmlXPathContextPtr | null, name: string | Buffer | null, ns_uri: string | Buffer | null): xmlXPathFunction
                    }
                
                    xmlXPathHasSameNodes: {
                        /** 
                        * @param nodes1 {xmlNodePtr[]} xmlNodeSetPtr
                        * @param nodes2 {xmlNodePtr[]} xmlNodeSetPtr
                        * @returns {number} int
                        */
                        (nodes1: xmlNodePtr[], nodes2: xmlNodePtr[]): number
                    }
                
                    xmlXPathIdFunction: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param nargs {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, nargs: number): any
                    }
                
                    xmlXPathInit: {
                        /** 
                        * @returns {any} void
                        */
                        (): any
                    }
                
                    xmlXPathIntersection: {
                        /** 
                        * @param nodes1 {xmlNodePtr[]} xmlNodeSetPtr
                        * @param nodes2 {xmlNodePtr[]} xmlNodeSetPtr
                        * @returns {xmlNodePtr[]} xmlNodeSetPtr
                        */
                        (nodes1: xmlNodePtr[], nodes2: xmlNodePtr[]): xmlNodePtr[]
                    }
                
                    xmlXPathIsInf: {
                        /** 
                        * @param val {number} double
                        * @returns {number} int
                        */
                        (val: number): number
                    }
                
                    xmlXPathIsNaN: {
                        /** 
                        * @param val {number} double
                        * @returns {number} int
                        */
                        (val: number): number
                    }
                
                    xmlXPathIsNodeType: {
                        /** 
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (name: string | Buffer | null): number
                    }
                
                    xmlXPathLangFunction: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param nargs {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, nargs: number): any
                    }
                
                    xmlXPathLastFunction: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param nargs {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, nargs: number): any
                    }
                
                    xmlXPathLeading: {
                        /** 
                        * @param nodes1 {xmlNodePtr[]} xmlNodeSetPtr
                        * @param nodes2 {xmlNodePtr[]} xmlNodeSetPtr
                        * @returns {xmlNodePtr[]} xmlNodeSetPtr
                        */
                        (nodes1: xmlNodePtr[], nodes2: xmlNodePtr[]): xmlNodePtr[]
                    }
                
                    xmlXPathLeadingSorted: {
                        /** 
                        * @param nodes1 {xmlNodePtr[]} xmlNodeSetPtr
                        * @param nodes2 {xmlNodePtr[]} xmlNodeSetPtr
                        * @returns {xmlNodePtr[]} xmlNodeSetPtr
                        */
                        (nodes1: xmlNodePtr[], nodes2: xmlNodePtr[]): xmlNodePtr[]
                    }
                
                    xmlXPathLocalNameFunction: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param nargs {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, nargs: number): any
                    }
                
                    xmlXPathModValues: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null): any
                    }
                
                    xmlXPathMultValues: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null): any
                    }
                
                    xmlXPathNamespaceURIFunction: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param nargs {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, nargs: number): any
                    }
                
                    xmlXPathNewBoolean: {
                        /** 
                        * @param val {number} int
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (val: number): xmlXPathObjectPtr
                    }
                
                    xmlXPathNewCString: {
                        /** 
                        * @param val {string | Buffer | null} p.q(const).char
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (val: string | Buffer | null): xmlXPathObjectPtr
                    }
                
                    xmlXPathNewContext: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @returns {xmlXPathContextPtr} xmlXPathContextPtr
                        */
                        (doc: xmlDocPtr | null): xmlXPathContextPtr
                    }
                
                    xmlXPathNewFloat: {
                        /** 
                        * @param val {number} double
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (val: number): xmlXPathObjectPtr
                    }
                
                    xmlXPathNewNodeSet: {
                        /** 
                        * @param val {xmlNodePtr | null} xmlNodePtr
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (val: xmlNodePtr | null): xmlXPathObjectPtr
                    }
                
                    xmlXPathNewNodeSetList: {
                        /** 
                        * @param val {xmlNodePtr[]} xmlNodeSetPtr
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (val: xmlNodePtr[]): xmlXPathObjectPtr
                    }
                
                    xmlXPathNewParserContext: {
                        /** 
                        * @param str {string | Buffer | null} p.q(const).xmlChar
                        * @param ctxt {xmlXPathContextPtr | null} xmlXPathContextPtr
                        * @returns {xmlXPathParserContextPtr} xmlXPathParserContextPtr
                        */
                        (str: string | Buffer | null, ctxt: xmlXPathContextPtr | null): xmlXPathParserContextPtr
                    }
                
                    xmlXPathNewString: {
                        /** 
                        * @param val {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (val: string | Buffer | null): xmlXPathObjectPtr
                    }
                
                    xmlXPathNewValueTree: {
                        /** 
                        * @param val {xmlNodePtr | null} xmlNodePtr
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (val: xmlNodePtr | null): xmlXPathObjectPtr
                    }
                
                    xmlXPathNextAncestor: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (ctxt: xmlXPathParserContextPtr | null, cur: xmlNodePtr | null): xmlNodePtr | null
                    }
                
                    xmlXPathNextAncestorOrSelf: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (ctxt: xmlXPathParserContextPtr | null, cur: xmlNodePtr | null): xmlNodePtr | null
                    }
                
                    xmlXPathNextAttribute: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (ctxt: xmlXPathParserContextPtr | null, cur: xmlNodePtr | null): xmlNodePtr | null
                    }
                
                    xmlXPathNextChild: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (ctxt: xmlXPathParserContextPtr | null, cur: xmlNodePtr | null): xmlNodePtr | null
                    }
                
                    xmlXPathNextDescendant: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (ctxt: xmlXPathParserContextPtr | null, cur: xmlNodePtr | null): xmlNodePtr | null
                    }
                
                    xmlXPathNextDescendantOrSelf: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (ctxt: xmlXPathParserContextPtr | null, cur: xmlNodePtr | null): xmlNodePtr | null
                    }
                
                    xmlXPathNextFollowing: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (ctxt: xmlXPathParserContextPtr | null, cur: xmlNodePtr | null): xmlNodePtr | null
                    }
                
                    xmlXPathNextFollowingSibling: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (ctxt: xmlXPathParserContextPtr | null, cur: xmlNodePtr | null): xmlNodePtr | null
                    }
                
                    xmlXPathNextNamespace: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (ctxt: xmlXPathParserContextPtr | null, cur: xmlNodePtr | null): xmlNodePtr | null
                    }
                
                    xmlXPathNextParent: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (ctxt: xmlXPathParserContextPtr | null, cur: xmlNodePtr | null): xmlNodePtr | null
                    }
                
                    xmlXPathNextPreceding: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (ctxt: xmlXPathParserContextPtr | null, cur: xmlNodePtr | null): xmlNodePtr | null
                    }
                
                    xmlXPathNextPrecedingSibling: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (ctxt: xmlXPathParserContextPtr | null, cur: xmlNodePtr | null): xmlNodePtr | null
                    }
                
                    xmlXPathNextSelf: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param cur {xmlNodePtr | null} xmlNodePtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (ctxt: xmlXPathParserContextPtr | null, cur: xmlNodePtr | null): xmlNodePtr | null
                    }
                
                    xmlXPathNodeEval: {
                        /** 
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @param str {string | Buffer | null} p.q(const).xmlChar
                        * @param ctx {xmlXPathContextPtr | null} xmlXPathContextPtr
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (node: xmlNodePtr | null, str: string | Buffer | null, ctx: xmlXPathContextPtr | null): xmlXPathObjectPtr
                    }
                
                    xmlXPathNodeLeading: {
                        /** 
                        * @param nodes {xmlNodePtr[]} xmlNodeSetPtr
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @returns {xmlNodePtr[]} xmlNodeSetPtr
                        */
                        (nodes: xmlNodePtr[], node: xmlNodePtr | null): xmlNodePtr[]
                    }
                
                    xmlXPathNodeLeadingSorted: {
                        /** 
                        * @param nodes {xmlNodePtr[]} xmlNodeSetPtr
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @returns {xmlNodePtr[]} xmlNodeSetPtr
                        */
                        (nodes: xmlNodePtr[], node: xmlNodePtr | null): xmlNodePtr[]
                    }
                
                    xmlXPathNodeSetAdd: {
                        /** 
                        * @param cur {xmlNodePtr[]} xmlNodeSetPtr
                        * @param val {xmlNodePtr | null} xmlNodePtr
                        * @returns {number} int
                        */
                        (cur: xmlNodePtr[], val: xmlNodePtr | null): number
                    }
                
                    xmlXPathNodeSetAddNs: {
                        /** 
                        * @param cur {xmlNodePtr[]} xmlNodeSetPtr
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @param ns {xmlNsPtr | null} xmlNsPtr
                        * @returns {number} int
                        */
                        (cur: xmlNodePtr[], node: xmlNodePtr | null, ns: xmlNsPtr | null): number
                    }
                
                    xmlXPathNodeSetAddUnique: {
                        /** 
                        * @param cur {xmlNodePtr[]} xmlNodeSetPtr
                        * @param val {xmlNodePtr | null} xmlNodePtr
                        * @returns {number} int
                        */
                        (cur: xmlNodePtr[], val: xmlNodePtr | null): number
                    }
                
                    xmlXPathNodeSetContains: {
                        /** 
                        * @param cur {xmlNodePtr[]} xmlNodeSetPtr
                        * @param val {xmlNodePtr | null} xmlNodePtr
                        * @returns {number} int
                        */
                        (cur: xmlNodePtr[], val: xmlNodePtr | null): number
                    }
                
                    xmlXPathNodeSetCreate: {
                        /** 
                        * @param val {xmlNodePtr | null} xmlNodePtr
                        * @returns {xmlNodePtr[]} xmlNodeSetPtr
                        */
                        (val: xmlNodePtr | null): xmlNodePtr[]
                    }
                
                    xmlXPathNodeSetDel: {
                        /** 
                        * @param cur {xmlNodePtr[]} xmlNodeSetPtr
                        * @param val {xmlNodePtr | null} xmlNodePtr
                        * @returns {any} void
                        */
                        (cur: xmlNodePtr[], val: xmlNodePtr | null): any
                    }
                
                    xmlXPathNodeSetFreeNs: {
                        /** 
                        * @param ns {xmlNsPtr | null} xmlNsPtr
                        * @returns {any} void
                        */
                        (ns: xmlNsPtr | null): any
                    }
                
                    xmlXPathNodeSetMerge: {
                        /** 
                        * @param val1 {xmlNodePtr[]} xmlNodeSetPtr
                        * @param val2 {xmlNodePtr[]} xmlNodeSetPtr
                        * @returns {xmlNodePtr[]} xmlNodeSetPtr
                        */
                        (val1: xmlNodePtr[], val2: xmlNodePtr[]): xmlNodePtr[]
                    }
                
                    xmlXPathNodeSetRemove: {
                        /** 
                        * @param cur {xmlNodePtr[]} xmlNodeSetPtr
                        * @param val {number} int
                        * @returns {any} void
                        */
                        (cur: xmlNodePtr[], val: number): any
                    }
                
                    xmlXPathNodeSetSort: {
                        /** 
                        * @param set {xmlNodePtr[]} xmlNodeSetPtr
                        * @returns {any} void
                        */
                        (set: xmlNodePtr[]): any
                    }
                
                    xmlXPathNodeTrailing: {
                        /** 
                        * @param nodes {xmlNodePtr[]} xmlNodeSetPtr
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @returns {xmlNodePtr[]} xmlNodeSetPtr
                        */
                        (nodes: xmlNodePtr[], node: xmlNodePtr | null): xmlNodePtr[]
                    }
                
                    xmlXPathNodeTrailingSorted: {
                        /** 
                        * @param nodes {xmlNodePtr[]} xmlNodeSetPtr
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @returns {xmlNodePtr[]} xmlNodeSetPtr
                        */
                        (nodes: xmlNodePtr[], node: xmlNodePtr | null): xmlNodePtr[]
                    }
                
                    xmlXPathNormalizeFunction: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param nargs {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, nargs: number): any
                    }
                
                    xmlXPathNotEqualValues: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlXPathParserContextPtr | null): number
                    }
                
                    xmlXPathNotFunction: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param nargs {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, nargs: number): any
                    }
                
                    xmlXPathNsLookup: {
                        /** 
                        * @param ctxt {xmlXPathContextPtr | null} xmlXPathContextPtr
                        * @param prefix {string | Buffer | null} p.q(const).xmlChar
                        * @returns {string} q(const).xmlChar
                        */
                        (ctxt: xmlXPathContextPtr | null, prefix: string | Buffer | null): string
                    }
                
                    xmlXPathNumberFunction: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param nargs {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, nargs: number): any
                    }
                
                    xmlXPathObjectCopy: {
                        /** 
                        * @param val {xmlXPathObjectPtr | null} xmlXPathObjectPtr
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (val: xmlXPathObjectPtr | null): xmlXPathObjectPtr
                    }
                
                    xmlXPathOrderDocElems: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @returns {number} long
                        */
                        (doc: xmlDocPtr | null): number
                    }
                
                    xmlXPathParseNCName: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @returns {string} xmlChar
                        */
                        (ctxt: xmlXPathParserContextPtr | null): string
                    }
                
                    xmlXPathParseName: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @returns {string} xmlChar
                        */
                        (ctxt: xmlXPathParserContextPtr | null): string
                    }
                
                    xmlXPathPopBoolean: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlXPathParserContextPtr | null): number
                    }
                
                    xmlXPathPopExternal: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null): any
                    }
                
                    xmlXPathPopNodeSet: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @returns {xmlNodePtr[]} xmlNodeSetPtr
                        */
                        (ctxt: xmlXPathParserContextPtr | null): xmlNodePtr[]
                    }
                
                    xmlXPathPopNumber: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @returns {number} double
                        */
                        (ctxt: xmlXPathParserContextPtr | null): number
                    }
                
                    xmlXPathPopString: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @returns {string} xmlChar
                        */
                        (ctxt: xmlXPathParserContextPtr | null): string
                    }
                
                    xmlXPathPositionFunction: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param nargs {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, nargs: number): any
                    }
                
                    xmlXPathRegisterAllFunctions: {
                        /** 
                        * @param ctxt {xmlXPathContextPtr | null} xmlXPathContextPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathContextPtr | null): any
                    }
                
                    xmlXPathRegisterFunc: {
                        /** 
                        * @param ctxt {xmlXPathContextPtr | null} xmlXPathContextPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param f {xmlXPathFunction} xmlXPathFunction
                        * @returns {number} int
                        */
                        (ctxt: xmlXPathContextPtr | null, name: string | Buffer | null, f: xmlXPathFunction): number
                    }
                
                    xmlXPathRegisterFuncLookup: {
                        /** 
                        * @param ctxt {xmlXPathContextPtr | null} xmlXPathContextPtr
                        * @param f {xmlXPathFuncLookupFunc} xmlXPathFuncLookupFunc
                        * @param funcCtxt {any} p.void
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathContextPtr | null, f: xmlXPathFuncLookupFunc, funcCtxt: any): any
                    }
                
                    xmlXPathRegisterFuncNS: {
                        /** 
                        * @param ctxt {xmlXPathContextPtr | null} xmlXPathContextPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param ns_uri {string | Buffer | null} p.q(const).xmlChar
                        * @param f {xmlXPathFunction} xmlXPathFunction
                        * @returns {number} int
                        */
                        (ctxt: xmlXPathContextPtr | null, name: string | Buffer | null, ns_uri: string | Buffer | null, f: xmlXPathFunction): number
                    }
                
                    xmlXPathRegisterNs: {
                        /** 
                        * @param ctxt {xmlXPathContextPtr | null} xmlXPathContextPtr
                        * @param prefix {string | Buffer | null} p.q(const).xmlChar
                        * @param ns_uri {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} int
                        */
                        (ctxt: xmlXPathContextPtr | null, prefix: string | Buffer | null, ns_uri: string | Buffer | null): number
                    }
                
                    xmlXPathRegisterVariable: {
                        /** 
                        * @param ctxt {xmlXPathContextPtr | null} xmlXPathContextPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param value {xmlXPathObjectPtr | null} xmlXPathObjectPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlXPathContextPtr | null, name: string | Buffer | null, value: xmlXPathObjectPtr | null): number
                    }
                
                    xmlXPathRegisterVariableLookup: {
                        /** 
                        * @param ctxt {xmlXPathContextPtr | null} xmlXPathContextPtr
                        * @param f {xmlXPathVariableLookupFunc} xmlXPathVariableLookupFunc
                        * @param data {any} p.void
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathContextPtr | null, f: xmlXPathVariableLookupFunc, data: any): any
                    }
                
                    xmlXPathRegisterVariableNS: {
                        /** 
                        * @param ctxt {xmlXPathContextPtr | null} xmlXPathContextPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param ns_uri {string | Buffer | null} p.q(const).xmlChar
                        * @param value {xmlXPathObjectPtr | null} xmlXPathObjectPtr
                        * @returns {number} int
                        */
                        (ctxt: xmlXPathContextPtr | null, name: string | Buffer | null, ns_uri: string | Buffer | null, value: xmlXPathObjectPtr | null): number
                    }
                
                    xmlXPathRegisteredFuncsCleanup: {
                        /** 
                        * @param ctxt {xmlXPathContextPtr | null} xmlXPathContextPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathContextPtr | null): any
                    }
                
                    xmlXPathRegisteredNsCleanup: {
                        /** 
                        * @param ctxt {xmlXPathContextPtr | null} xmlXPathContextPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathContextPtr | null): any
                    }
                
                    xmlXPathRegisteredVariablesCleanup: {
                        /** 
                        * @param ctxt {xmlXPathContextPtr | null} xmlXPathContextPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathContextPtr | null): any
                    }
                
                    xmlXPathRoot: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null): any
                    }
                
                    xmlXPathRoundFunction: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param nargs {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, nargs: number): any
                    }
                
                    xmlXPathSetContextNode: {
                        /** 
                        * @param node {xmlNodePtr | null} xmlNodePtr
                        * @param ctx {xmlXPathContextPtr | null} xmlXPathContextPtr
                        * @returns {number} int
                        */
                        (node: xmlNodePtr | null, ctx: xmlXPathContextPtr | null): number
                    }
                
                    xmlXPathStartsWithFunction: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param nargs {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, nargs: number): any
                    }
                
                    xmlXPathStringEvalNumber: {
                        /** 
                        * @param str {string | Buffer | null} p.q(const).xmlChar
                        * @returns {number} double
                        */
                        (str: string | Buffer | null): number
                    }
                
                    xmlXPathStringFunction: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param nargs {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, nargs: number): any
                    }
                
                    xmlXPathStringLengthFunction: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param nargs {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, nargs: number): any
                    }
                
                    xmlXPathSubValues: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null): any
                    }
                
                    xmlXPathSubstringAfterFunction: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param nargs {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, nargs: number): any
                    }
                
                    xmlXPathSubstringBeforeFunction: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param nargs {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, nargs: number): any
                    }
                
                    xmlXPathSubstringFunction: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param nargs {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, nargs: number): any
                    }
                
                    xmlXPathSumFunction: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param nargs {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, nargs: number): any
                    }
                
                    xmlXPathTrailing: {
                        /** 
                        * @param nodes1 {xmlNodePtr[]} xmlNodeSetPtr
                        * @param nodes2 {xmlNodePtr[]} xmlNodeSetPtr
                        * @returns {xmlNodePtr[]} xmlNodeSetPtr
                        */
                        (nodes1: xmlNodePtr[], nodes2: xmlNodePtr[]): xmlNodePtr[]
                    }
                
                    xmlXPathTrailingSorted: {
                        /** 
                        * @param nodes1 {xmlNodePtr[]} xmlNodeSetPtr
                        * @param nodes2 {xmlNodePtr[]} xmlNodeSetPtr
                        * @returns {xmlNodePtr[]} xmlNodeSetPtr
                        */
                        (nodes1: xmlNodePtr[], nodes2: xmlNodePtr[]): xmlNodePtr[]
                    }
                
                    xmlXPathTranslateFunction: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param nargs {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, nargs: number): any
                    }
                
                    xmlXPathTrueFunction: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param nargs {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, nargs: number): any
                    }
                
                    xmlXPathValueFlipSign: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null): any
                    }
                
                    xmlXPathVariableLookup: {
                        /** 
                        * @param ctxt {xmlXPathContextPtr | null} xmlXPathContextPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (ctxt: xmlXPathContextPtr | null, name: string | Buffer | null): xmlXPathObjectPtr
                    }
                
                    xmlXPathVariableLookupNS: {
                        /** 
                        * @param ctxt {xmlXPathContextPtr | null} xmlXPathContextPtr
                        * @param name {string | Buffer | null} p.q(const).xmlChar
                        * @param ns_uri {string | Buffer | null} p.q(const).xmlChar
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (ctxt: xmlXPathContextPtr | null, name: string | Buffer | null, ns_uri: string | Buffer | null): xmlXPathObjectPtr
                    }
                
                    xmlXPathWrapCString: {
                        /** 
                        * @param val {string | Buffer | null} p.char
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (val: string | Buffer | null): xmlXPathObjectPtr
                    }
                
                    xmlXPathWrapExternal: {
                        /** 
                        * @param val {any} p.void
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (val: any): xmlXPathObjectPtr
                    }
                
                    xmlXPathWrapNodeSet: {
                        /** 
                        * @param val {xmlNodePtr[]} xmlNodeSetPtr
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (val: xmlNodePtr[]): xmlXPathObjectPtr
                    }
                
                    xmlXPathWrapString: {
                        /** 
                        * @param val {string | Buffer | null} p.xmlChar
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (val: string | Buffer | null): xmlXPathObjectPtr
                    }
                
                    xmlXPatherror: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param file {string | Buffer | null} p.q(const).char
                        * @param line {number} int
                        * @param no {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, file: string | Buffer | null, line: number, no: number): any
                    }
                
                    xmlXPtrBuildNodeList: {
                        /** 
                        * @param obj {xmlXPathObjectPtr | null} xmlXPathObjectPtr
                        * @returns {(xmlNodePtr | null)} xmlNodePtr
                        */
                        (obj: xmlXPathObjectPtr | null): xmlNodePtr | null
                    }
                
                    xmlXPtrEval: {
                        /** 
                        * @param str {string | Buffer | null} p.q(const).xmlChar
                        * @param ctx {xmlXPathContextPtr | null} xmlXPathContextPtr
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (str: string | Buffer | null, ctx: xmlXPathContextPtr | null): xmlXPathObjectPtr
                    }
                
                    xmlXPtrEvalRangePredicate: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null): any
                    }
                
                    xmlXPtrFreeLocationSet: {
                        /** 
                        * @param obj {xmlLocationSetPtr | null} xmlLocationSetPtr
                        * @returns {any} void
                        */
                        (obj: xmlLocationSetPtr | null): any
                    }
                
                    xmlXPtrLocationSetAdd: {
                        /** 
                        * @param cur {xmlLocationSetPtr | null} xmlLocationSetPtr
                        * @param val {xmlXPathObjectPtr | null} xmlXPathObjectPtr
                        * @returns {any} void
                        */
                        (cur: xmlLocationSetPtr | null, val: xmlXPathObjectPtr | null): any
                    }
                
                    xmlXPtrLocationSetCreate: {
                        /** 
                        * @param val {xmlXPathObjectPtr | null} xmlXPathObjectPtr
                        * @returns {xmlLocationSetPtr} xmlLocationSetPtr
                        */
                        (val: xmlXPathObjectPtr | null): xmlLocationSetPtr
                    }
                
                    xmlXPtrLocationSetDel: {
                        /** 
                        * @param cur {xmlLocationSetPtr | null} xmlLocationSetPtr
                        * @param val {xmlXPathObjectPtr | null} xmlXPathObjectPtr
                        * @returns {any} void
                        */
                        (cur: xmlLocationSetPtr | null, val: xmlXPathObjectPtr | null): any
                    }
                
                    xmlXPtrLocationSetMerge: {
                        /** 
                        * @param val1 {xmlLocationSetPtr | null} xmlLocationSetPtr
                        * @param val2 {xmlLocationSetPtr | null} xmlLocationSetPtr
                        * @returns {xmlLocationSetPtr} xmlLocationSetPtr
                        */
                        (val1: xmlLocationSetPtr | null, val2: xmlLocationSetPtr | null): xmlLocationSetPtr
                    }
                
                    xmlXPtrLocationSetRemove: {
                        /** 
                        * @param cur {xmlLocationSetPtr | null} xmlLocationSetPtr
                        * @param val {number} int
                        * @returns {any} void
                        */
                        (cur: xmlLocationSetPtr | null, val: number): any
                    }
                
                    xmlXPtrNewCollapsedRange: {
                        /** 
                        * @param start {xmlNodePtr | null} xmlNodePtr
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (start: xmlNodePtr | null): xmlXPathObjectPtr
                    }
                
                    xmlXPtrNewContext: {
                        /** 
                        * @param doc {xmlDocPtr | null} xmlDocPtr
                        * @param here {xmlNodePtr | null} xmlNodePtr
                        * @param origin {xmlNodePtr | null} xmlNodePtr
                        * @returns {xmlXPathContextPtr} xmlXPathContextPtr
                        */
                        (doc: xmlDocPtr | null, here: xmlNodePtr | null, origin: xmlNodePtr | null): xmlXPathContextPtr
                    }
                
                    xmlXPtrNewLocationSetNodeSet: {
                        /** 
                        * @param set {xmlNodePtr[]} xmlNodeSetPtr
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (set: xmlNodePtr[]): xmlXPathObjectPtr
                    }
                
                    xmlXPtrNewLocationSetNodes: {
                        /** 
                        * @param start {xmlNodePtr | null} xmlNodePtr
                        * @param end {xmlNodePtr | null} xmlNodePtr
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (start: xmlNodePtr | null, end: xmlNodePtr | null): xmlXPathObjectPtr
                    }
                
                    xmlXPtrNewRange: {
                        /** 
                        * @param start {xmlNodePtr | null} xmlNodePtr
                        * @param startindex {number} int
                        * @param end {xmlNodePtr | null} xmlNodePtr
                        * @param endindex {number} int
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (start: xmlNodePtr | null, startindex: number, end: xmlNodePtr | null, endindex: number): xmlXPathObjectPtr
                    }
                
                    xmlXPtrNewRangeNodeObject: {
                        /** 
                        * @param start {xmlNodePtr | null} xmlNodePtr
                        * @param end {xmlXPathObjectPtr | null} xmlXPathObjectPtr
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (start: xmlNodePtr | null, end: xmlXPathObjectPtr | null): xmlXPathObjectPtr
                    }
                
                    xmlXPtrNewRangeNodePoint: {
                        /** 
                        * @param start {xmlNodePtr | null} xmlNodePtr
                        * @param end {xmlXPathObjectPtr | null} xmlXPathObjectPtr
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (start: xmlNodePtr | null, end: xmlXPathObjectPtr | null): xmlXPathObjectPtr
                    }
                
                    xmlXPtrNewRangeNodes: {
                        /** 
                        * @param start {xmlNodePtr | null} xmlNodePtr
                        * @param end {xmlNodePtr | null} xmlNodePtr
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (start: xmlNodePtr | null, end: xmlNodePtr | null): xmlXPathObjectPtr
                    }
                
                    xmlXPtrNewRangePointNode: {
                        /** 
                        * @param start {xmlXPathObjectPtr | null} xmlXPathObjectPtr
                        * @param end {xmlNodePtr | null} xmlNodePtr
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (start: xmlXPathObjectPtr | null, end: xmlNodePtr | null): xmlXPathObjectPtr
                    }
                
                    xmlXPtrNewRangePoints: {
                        /** 
                        * @param start {xmlXPathObjectPtr | null} xmlXPathObjectPtr
                        * @param end {xmlXPathObjectPtr | null} xmlXPathObjectPtr
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (start: xmlXPathObjectPtr | null, end: xmlXPathObjectPtr | null): xmlXPathObjectPtr
                    }
                
                    xmlXPtrRangeToFunction: {
                        /** 
                        * @param ctxt {xmlXPathParserContextPtr | null} xmlXPathParserContextPtr
                        * @param nargs {number} int
                        * @returns {any} void
                        */
                        (ctxt: xmlXPathParserContextPtr | null, nargs: number): any
                    }
                
                    xmlXPtrWrapLocationSet: {
                        /** 
                        * @param val {xmlLocationSetPtr | null} xmlLocationSetPtr
                        * @returns {xmlXPathObjectPtr} xmlXPathObjectPtr
                        */
                        (val: xmlLocationSetPtr | null): xmlXPathObjectPtr
                    }
                
    
        fromBufferAsync: {
            /** 
            * @param type {FROM_BUFFER_ASYNC_TYPE} - type
            * @param buffer {string | Buffer} - p.q(const).char
            * @param size {number} - int
            * @param URL {string} - p.q(const).char
            * @param encoding {string} - p.q(const).char
            * @param options {number} - int
            * @param callback {Function} - callback
            * @returns xmlDocPtr - xmlDocPtr
            */
            (type: FROM_BUFFER_ASYNC_TYPE, buffer: string | Buffer, size: number, URL: string, encoding: string, options: number, callback: Function): xmlDocPtr
        }
                
        xmlPtrToXmlAttr: {
            /** 
            * @param arg0 {any} - p.void
            * @returns {xmlAttrPtr - xmlAttrPtr}
            */
            (arg0: any): xmlAttrPtr
        }
    
        xmlPtrToXmlDoc: {
            /** 
            * @param arg0 {any} - p.void
            * @returns {xmlDocPtr - xmlDocPtr}
            */
            (arg0: any): xmlDocPtr
        }
    
        xmlPtrToXmlDtd: {
            /** 
            * @param arg0 {any} - p.void
            * @returns {xmlDtdPtr - xmlDtdPtr}
            */
            (arg0: any): xmlDtdPtr
        }
    
        xmlPtrToXmlElement: {
            /** 
            * @param arg0 {any} - p.void
            * @returns {xmlElementPtr - xmlElementPtr}
            */
            (arg0: any): xmlElementPtr
        }
    
        xmlPtrToXmlNode: {
            /** 
            * @param arg0 {any} - p.void
            * @returns {xmlNodePtr - xmlNodePtr}
            */
            (arg0: any): xmlNodePtr
        }
    
        xmlPtrToXmlNs: {
            /** 
            * @param arg0 {any} - p.void
            * @returns {xmlNodePtr - xmlNsPtr}
            */
            (arg0: any): xmlNsPtr
        }
    }
    
    export type XMLReferenceType = xmlNodePtr | xmlDocPtr | xmlDtdPtr | xmlAttrPtr | xmlElementPtr | xmlNsPtr;
    
    